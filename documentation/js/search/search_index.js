var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.9","fields":["title","body"],"fieldVectors":[["title/controllers/AdminController.html",[0,1.546,1,2.815]],["body/controllers/AdminController.html",[0,1.313,1,3.424,2,1.313,3,0.127,4,0.127,5,0.099,6,2.901,7,2.069,8,2.901,9,0.187,10,1.66,11,2.718,12,4.157,13,4.157,14,4.157,15,4.858,16,4.157,17,2.901,18,3.784,19,1.913,20,0.015,21,3.257,22,1.144,23,3.346,24,2.436,25,0.841,26,0.485,27,2.436,28,4.157,29,2.243,30,2.901,31,4.536,32,4.795,33,3.346,34,4.813,35,2.901,36,4.795,37,3.346,38,2.901,39,4.073,40,0.716,41,4.151,42,4.795,43,3.346,44,2.901,45,3.346,46,0.37,47,2.069,48,2.069,49,2.389,50,3.174,51,2.608,52,2.215,53,0.782,54,3.465,55,2.901,56,2.901,57,2.069,58,1.113,59,3.346,60,3.346,61,0.127,62,0.058,63,1.945,64,1.207,65,3.346,66,3.424,67,2.965,68,3.424,69,3.895,70,2.876,71,1.672,72,3.424,73,4.37,74,2.787,75,3.424,76,3.424,77,1.803,78,3.424,79,2.154,80,3.346,81,3.346,82,1.121,83,4.77,84,2.4,85,3.346,86,1.964,87,2.389,88,3.346,89,3.346,90,3.346,91,3.346,92,3.346,93,2.608,94,2.608,95,1.652,96,2.608,97,0.006,98,0.009,99,0.006]],["title/modules/AdminModule.html",[100,1.546,101,2.609]],["body/modules/AdminModule.html",[1,4.848,2,2.424,3,0.185,4,0.185,5,0.144,20,0.015,25,0.632,46,0.462,53,1.138,54,4.926,55,4.222,61,0.185,62,0.084,97,0.009,98,0.012,99,0.009,100,2.663,101,5.245,102,2.403,103,2.288,104,2.671,105,2.671,106,2.403,107,3.724,108,3.724,109,4.222,110,4.222,111,4.222,112,4.222,113,3.913,114,3.913,115,3.39,116,2.671,117,2.53,118,4.869,119,3.591,120,3.011,121,2.085,122,4.869,123,4.413,124,4.222,125,3.477,126,3.477,127,3.223,128,3.223,129,3.011]],["title/injectables/AdminService.html",[54,2.438,130,0.996]],["body/injectables/AdminService.html",[3,0.097,4,0.097,5,0.075,8,3.399,9,0.142,10,1.357,11,2.864,12,3.399,13,3.399,14,3.399,15,3.399,16,3.399,17,3.399,18,3.313,20,0.015,22,1.159,24,2.466,25,0.907,26,0.503,27,2.466,28,2.213,29,2.2,30,3.399,31,4.439,34,3.825,35,3.399,38,3.399,39,1.4,40,0.626,41,2.939,44,3.399,46,0.384,47,2.424,53,0.597,54,2.424,56,2.213,61,0.097,62,0.044,64,1.722,67,1.578,70,2.987,71,1.792,74,1.483,77,0.96,79,2.029,82,1.573,84,2.88,86,1.606,97,0.009,98,0.007,99,0.005,121,1.093,124,2.213,128,1.689,130,0.991,131,1.093,132,2.213,133,3.92,134,3.92,135,1.757,136,2.552,137,4.545,138,4.139,139,4.139,140,2.552,141,3.92,142,2.552,143,2.552,144,2.552,145,3.92,146,2.552,147,2.644,148,3.92,149,1.161,150,2.552,151,2.552,152,2.552,153,1.822,154,1.989,155,1.689,156,0.96,157,1.405,158,1.989,159,0.671,160,1.26,161,2.552,162,2.244,163,2.213,164,2.552,165,7.387,166,2.8,167,4.774,168,4.039,169,1.822,170,2.8,171,2.8,172,2.8,173,4.128,174,2.552,175,1.989,176,1.989,177,2.552,178,2.552,179,4.774,180,3.826,181,4.774,182,3.16,183,5.357,184,1.588,185,3.92,186,3.16,187,1.588,188,3.92,189,1.873,190,3.92,191,1.873,192,3.92,193,2.481,194,3.92,195,3.16,196,6.355,197,2.213,198,2.552,199,2.552,200,2.552,201,2.552,202,1.989,203,2.552,204,2.552,205,2.552,206,2.552,207,2.552,208,2.552,209,1.989,210,3.92,211,1.935,212,2.481,213,2.481,214,1.989,215,3.92,216,1.113,217,2.552,218,2.213,219,2.552,220,2.552,221,2.552,222,2.552,223,2.552,224,1.989,225,2.552,226,2.213]],["title/controllers/AppController.html",[0,1.546,227,2.815]],["body/controllers/AppController.html",[0,2.134,2,1.573,3,0.152,4,0.152,5,0.195,9,0.223,10,1.883,11,2.045,19,1.184,20,0.016,21,3.161,22,0.708,29,1.388,46,0.418,50,2.653,53,0.937,61,0.152,62,0.069,63,2.33,64,1.446,79,2.201,82,1.443,97,0.007,98,0.01,99,0.007,227,3.884,228,3.476,229,5.739,230,4.009,231,4.009,232,2.653,233,4.009,234,3.125,235,5.352,236,3.476,237,4.009,238,4.009,239,3.476,240,2.863,241,2.863,242,3.817,243,3.476,244,4.812,245,4.812,246,4.009,247,4.716,248,4.009,249,3.476,250,4.009,251,4.009,252,4.009,253,4.009,254,4.009,255,4.009,256,5.439,257,5.439,258,5.439,259,6.173,260,6.619,261,5.439,262,4.009,263,6.619,264,5.439,265,5.439,266,5.439,267,4.009,268,4.009,269,4.009,270,4.009,271,3.476,272,4.009,273,4.009,274,4.009,275,4.009,276,4.009,277,1.333,278,4.24,279,4.009,280,4.009]],["title/modules/AppModule.html",[100,1.546,281,2.815]],["body/modules/AppModule.html",[2,2.286,3,0.169,4,0.169,5,0.131,20,0.015,46,0.472,53,1.039,61,0.169,62,0.077,97,0.008,98,0.011,99,0.008,100,2.55,101,4.865,102,2.194,103,2.089,104,2.439,105,2.439,106,2.194,107,3.566,108,2.439,113,3.82,114,3.82,115,3.197,116,2.439,117,2.31,119,3.386,120,2.749,121,1.904,227,4.642,240,3.174,241,3.174,242,4.545,243,3.854,281,5.75,282,3.854,283,3.854,284,3.854,285,4.865,286,4.865,287,4.865,288,4.445,289,4.445,290,4.445,291,4.445,292,4.445,293,4.445,294,4.445,295,4.445,296,4.445,297,4.445,298,4.445,299,4.445]],["title/injectables/AppService.html",[130,0.996,242,2.438]],["body/injectables/AppService.html",[3,0.211,4,0.211,5,0.164,9,0.31,10,2.325,20,0.015,22,1.186,26,0.417,29,2.325,40,0.641,46,0.336,53,1.302,61,0.211,62,0.096,79,2.233,97,0.01,98,0.013,99,0.01,130,1.697,131,2.385,229,6.49,242,4.153,300,4.828,301,7.485,302,5.569,303,2.385,304,5.569,305,5.569,306,5.569,307,6.715,308,3.055,309,1.852]],["title/controllers/AuthController.html",[0,1.546,310,2.815]],["body/controllers/AuthController.html",[0,1.587,2,1.587,3,0.154,4,0.154,5,0.119,7,2.501,9,0.226,10,1.895,11,2.914,19,1.962,20,0.015,21,2.351,22,1.174,24,2.498,25,0.863,27,2.498,29,2.301,46,0.46,48,2.501,53,0.946,57,2.501,58,1.345,61,0.154,62,0.07,70,1.901,71,1.105,79,2.062,82,1.279,84,2.343,97,0.01,98,0.01,99,0.008,117,2.102,135,1.813,162,2.572,232,2.677,234,3.153,249,5.377,310,3.908,311,3.507,312,4.045,313,4.744,314,5.472,315,3.908,316,5.472,317,4.045,318,4.045,319,4.045,320,4.925,321,4.045,322,4.045,323,4.045,324,4.045,325,4.045,326,4.045,327,5.761,328,4.045,329,4.045,330,4.045,331,4.045,332,2.888,333,2.677,334,4.265,335,2.888,336,4.045,337,3.908,338,3.18,339,3.153,340,2.351,341,4.045,342,2.351,343,2.888,344,2.677,345,2.453,346,2.888,347,3.384,348,3.153,349,2.501,350,4.045,351,2.102,352,4.045,353,4.045,354,5.761,355,4.045,356,4.045,357,4.045,358,3.153,359,4.045,360,4.744,361,4.045,362,4.265,363,4.045,364,4.428,365,4.045,366,4.045,367,4.045,368,4.045,369,4.045,370,4.744,371,4.045,372,4.045]],["title/modules/AuthModule.html",[100,1.546,285,2.609]],["body/modules/AuthModule.html",[2,2.369,3,0.178,4,0.178,5,0.138,20,0.015,46,0.476,53,1.098,61,0.178,62,0.081,97,0.009,98,0.011,99,0.009,100,2.618,102,2.318,103,2.207,104,2.576,105,2.576,106,2.318,107,3.662,108,2.576,113,2.44,114,3.877,115,3.313,116,2.576,117,2.44,119,3.509,125,3.353,126,3.353,216,0.976,285,5.294,310,4.766,338,4.335,339,3.66,345,3.344,346,3.353,373,4.072,374,4.072,375,4.696,376,4.937,377,4.937,378,4.696,379,4.696,380,2.904,381,4.696,382,4.696,383,4.696,384,3.66,385,3.108,386,3.66,387,4.696,388,4.696,389,4.696,390,3.66,391,4.696,392,4.696,393,2.318,394,4.696]],["title/injectables/AuthService.html",[130,0.996,338,2.291]],["body/injectables/AuthService.html",[3,0.113,4,0.113,5,0.088,9,0.166,10,1.525,11,2.885,20,0.015,22,1.183,24,2.518,25,0.912,26,0.434,27,2.518,29,2.241,40,0.682,46,0.391,53,0.696,61,0.113,62,0.051,71,0.813,79,2.463,82,1.732,84,2.771,97,0.01,98,0.008,99,0.006,130,1.113,131,1.275,135,1.974,147,3.619,154,2.321,159,1.7,162,2.07,187,1.743,189,1.728,191,1.728,216,0.619,218,2.582,309,0.99,313,3.819,315,4.621,327,2.582,338,2.56,345,2.596,347,1.842,348,2.321,351,2.289,358,3.433,362,4.086,384,2.321,385,1.971,386,2.321,395,2.321,396,4.404,397,4.404,398,4.404,399,4.404,400,4.404,401,2.978,402,5.241,403,5.792,404,2.978,405,4.404,406,2.978,407,2.724,408,4.404,409,2.978,410,4.404,411,2.978,412,4.404,413,2.978,414,4.404,415,2.978,416,2.978,417,4.404,418,3.469,419,2.978,420,2.582,421,1.47,422,3.242,423,2.582,424,1.548,425,2.127,426,2.321,427,5.044,428,2.978,429,5.806,430,2.978,431,2.978,432,2.978,433,2.978,434,2.978,435,3.433,436,2.978,437,2.978,438,3.433,439,4.404,440,4.404,441,4.545,442,2.582,443,4.404,444,2.978,445,4.515,446,4.404,447,2.978,448,2.978,449,2.978,450,2.978,451,5.792,452,4.404,453,2.978,454,4.404,455,2.978,456,2.978,457,2.978,458,4.404,459,2.978,460,2.978,461,2.978,462,2.978,463,2.978,464,2.978,465,5.241,466,2.978,467,2.978,468,2.978,469,2.978,470,2.978,471,2.978,472,2.978,473,2.978,474,2.978]],["title/classes/CreateUserDto.html",[62,0.068,342,2.291]],["body/classes/CreateUserDto.html",[3,0.149,4,0.149,5,0.116,9,0.218,19,2.212,20,0.015,22,1.323,26,0.561,40,0.763,46,0.368,58,1.303,61,0.149,62,0.105,64,2.831,82,1.252,97,0.007,98,0.01,99,0.007,189,2.393,191,2.393,342,3.112,343,5.411,393,1.934,418,4.038,475,1.357,476,2.798,477,0.986,478,1.949,479,3.545,480,3.773,481,3.081,482,2.029,483,3.545,484,3.918,485,3.918,486,3.918,487,3.918,488,5.354,489,4.055,490,4.055,491,3.918,492,3.918,493,5.354,494,3.918,495,3.918,496,3.918,497,3.918,498,3.918,499,3.918,500,3.918,501,3.918,502,2.617,503,3.112,504,2.423,505,3.918,506,3.918,507,2.294,508,3.918,509,3.918,510,1.252,511,5.354,512,7.577,513,3.397,514,3.397,515,1.934,516,1.934,517,3.054,518,3.397,519,1.537,520,3.311,521,3.918,522,3.918,523,3.918]],["title/interfaces/Dorm.html",[157,0.958,524,0.668]],["body/interfaces/Dorm.html",[3,0.096,4,0.096,5,0.074,9,0.216,20,0.015,25,0.87,26,0.608,40,0.777,46,0.235,61,0.254,71,1.454,82,1.108,86,2.355,97,0.005,98,0.007,99,0.005,149,1.885,156,1.46,157,0.944,159,1.51,160,1.244,184,1.912,211,2.338,212,2.018,213,3.288,216,0.524,277,2.019,303,2.279,309,0.838,424,1.31,477,0.715,478,1.514,482,1.291,515,1.244,516,1.244,519,2.382,524,1.029,525,0.909,526,1.31,527,2.982,528,2.745,529,3.341,530,3.529,531,3.155,532,3.529,533,2.722,534,2.255,535,2.191,536,2.379,537,3.093,538,2.773,539,2.18,540,2.255,541,2.599,542,2.018,543,2.627,544,1.858,545,2.487,546,2.018,547,1.663,548,1.523,549,1.523,550,1.523,551,1.523,552,1.523,553,1.741,554,1.741,555,2.13,556,1.741,557,2.123,558,1.184,559,1.465,560,1.465,561,2.279,562,1.465,563,1.383,564,2.6,565,3.155,566,1.559,567,1.559,568,1.559,569,1.383,570,1.559,571,1.244,572,1.559,573,1.559,574,1.559,575,3.093,576,1.383]],["title/interfaces/DormAdd.html",[524,0.668,569,2.163]],["body/interfaces/DormAdd.html",[3,0.1,4,0.1,5,0.078,9,0.225,20,0.015,25,0.882,26,0.607,40,0.777,46,0.243,61,0.258,71,1.491,82,1.141,86,1.651,97,0.005,98,0.008,99,0.005,149,1.895,156,1.515,157,0.643,159,1.543,160,1.306,184,1.34,211,2.409,212,2.094,213,2.836,216,0.55,277,1.623,303,2.337,309,0.88,424,1.375,477,0.742,478,1.56,482,1.34,515,1.306,516,1.306,519,2.428,524,1.049,525,0.954,526,1.375,527,3.018,528,2.784,529,2.342,530,3.597,531,3.216,532,3.597,533,2.774,534,1.581,535,2.228,536,2.42,537,2.342,538,2.428,539,1.651,540,1.915,541,2.678,542,2.094,543,2.694,544,1.915,545,2.535,546,2.094,547,1.726,548,1.581,549,1.581,550,1.581,551,1.581,552,1.581,553,1.806,554,1.806,555,2.211,556,1.806,557,2.188,558,1.243,559,1.537,560,1.537,561,2.337,562,1.537,563,1.451,564,2.65,565,3.216,566,1.636,567,1.636,568,1.636,569,2.211,570,1.636,571,1.306,572,1.636,573,1.636,574,1.636,575,3.855,576,1.451]],["title/classes/DormAddDto.html",[62,0.068,577,2.049]],["body/classes/DormAddDto.html",[3,0.106,4,0.106,5,0.082,9,0.155,19,2.199,20,0.015,22,1.315,25,0.78,26,0.574,40,0.774,46,0.338,58,0.927,61,0.191,62,0.097,64,2.895,77,2.107,97,0.005,98,0.008,99,0.005,149,1.857,157,0.677,159,1.324,277,1.864,309,2.1,393,3.117,421,1.375,475,0.965,477,0.772,478,1.791,482,1.864,489,1.723,490,1.723,502,2.811,503,2.928,504,1.723,507,2.749,510,0.89,514,3.149,519,1.976,520,1.723,524,0.71,527,2.157,528,2.462,533,2.258,535,1.451,536,1.048,539,2.064,540,1.976,544,1.644,545,2.586,547,1.193,548,1.644,549,1.644,550,1.644,551,1.644,552,1.644,553,1.249,554,1.249,556,2.512,557,2.512,561,2.4,577,2.178,578,1.723,579,3.116,580,3.335,581,5.375,582,2.786,583,2.786,584,2.786,585,2.786,586,2.786,587,2.786,588,2.786,589,2.786,590,2.786,591,2.786,592,2.786,593,2.786,594,2.786,595,2.786,596,2.786,597,2.786,598,1.528,599,2.774,600,1.619,601,1.528,602,1.844,603,1.844,604,1.375,605,1.723,606,1.723,607,1.723,608,1.619,609,1.723,610,1.619,611,1.619,612,1.723,613,3.466,614,1.528,615,1.723,616,2.436,617,2.299,618,1.619,619,1.528,620,1.619,621,1.619,622,1.619,623,1.619,624,1.619]],["title/controllers/DormController.html",[0,1.546,625,2.815]],["body/controllers/DormController.html",[0,0.843,2,0.843,3,0.13,4,0.082,5,0.063,7,1.329,9,0.12,10,1.187,11,2.659,19,1.827,20,0.015,21,2.484,22,1.093,24,2.24,25,0.882,26,0.463,27,2.24,29,2.142,39,3.268,40,0.778,41,3.268,46,0.41,47,1.329,48,2.119,49,3.483,50,1.422,52,1.422,53,0.502,57,1.329,58,0.715,61,0.082,62,0.037,64,1.236,66,1.535,67,1.329,68,1.535,69,2.676,70,1.611,71,0.936,72,1.535,73,2.447,74,1.249,75,1.535,76,1.535,77,0.808,78,1.535,79,2.057,82,1.328,84,2.432,87,1.535,97,0.004,98,0.006,99,0.004,103,1.01,135,0.963,154,1.675,157,0.833,159,0.9,160,1.061,162,1.611,211,1.061,216,0.447,232,1.422,235,1.863,236,1.863,239,1.863,240,1.535,241,1.535,247,1.863,278,1.675,320,2.829,332,1.535,333,2.829,337,1.535,340,1.249,345,1.536,346,1.535,349,2.119,351,1.117,364,1.535,427,2.671,481,1.01,515,1.061,516,1.061,528,2.326,541,1.179,544,2.09,548,1.913,549,1.913,550,1.913,551,1.913,552,1.913,577,2.221,579,2.119,601,1.88,604,1.692,608,3.097,610,2.835,611,3.097,614,1.88,616,3.097,617,2.923,618,3.097,619,2.923,620,3.097,621,3.097,622,3.097,623,3.097,624,3.097,625,2.447,626,1.675,627,4.62,628,2.971,629,3.427,630,4.877,631,3.427,632,3.427,633,3.427,634,4.274,635,2.149,636,2.149,637,2.149,638,2.149,639,2.149,640,2.149,641,3.427,642,2.149,643,3.427,644,2.149,645,3.427,646,2.149,647,2.149,648,2.149,649,2.971,650,2.149,651,2.669,652,2.149,653,3.427,654,2.149,655,2.149,656,2.535,657,3.427,658,2.149,659,2.149,660,2.149,661,2.484,662,1.863,663,1.863,664,1.422,665,1.863,666,1.863,667,2.149,668,1.117,669,1.863,670,2.149,671,2.149,672,2.149,673,2.149,674,2.149,675,2.149,676,2.149,677,1.863,678,2.149,679,2.149,680,3.427,681,2.149,682,2.149,683,2.149,684,3.427,685,2.149,686,2.149,687,2.149,688,2.149,689,2.149,690,3.427,691,2.149,692,2.149,693,1.863,694,2.149,695,2.149,696,2.149,697,2.149,698,2.149,699,1.863,700,2.971,701,2.149,702,2.149,703,2.149,704,2.149,705,2.149,706,2.149,707,2.149,708,2.149,709,2.149,710,2.149,711,2.149,712,2.149,713,2.149,714,2.149,715,2.149,716,2.149,717,2.149,718,2.149,719,2.149,720,2.149,721,2.149,722,2.149,723,2.149,724,2.149,725,1.863,726,2.149,727,2.149,728,2.149,729,2.149,730,2.149,731,2.149,732,2.149,733,2.149,734,2.149,735,2.971,736,2.149,737,2.149,738,3.758,739,2.149,740,2.149,741,2.149,742,2.149,743,2.149,744,2.149,745,2.149,746,2.149,747,2.149,748,2.149,749,2.149,750,2.149]],["title/modules/DormModule.html",[100,1.546,113,2.049]],["body/modules/DormModule.html",[2,2.356,3,0.177,4,0.177,5,0.137,20,0.015,25,0.912,46,0.463,53,1.089,61,0.177,62,0.081,97,0.009,98,0.011,99,0.009,100,2.608,102,2.299,103,2.189,104,2.555,105,2.555,106,2.299,107,3.647,108,3.647,113,4.029,114,3.868,115,3.295,116,2.555,117,2.42,119,3.491,120,2.88,121,1.994,126,3.326,127,4.648,129,4.343,157,1.46,345,2.088,346,3.326,535,1.613,536,1.751,542,3.121,546,3.121,558,3.124,600,2.707,625,4.747,661,4.601,662,4.038,668,2.42,669,4.038,751,4.038,752,4.038,753,4.038,754,4.657,755,4.657,756,4.657]],["title/interfaces/DormQuery.html",[524,0.668,576,2.163]],["body/interfaces/DormQuery.html",[3,0.105,4,0.105,5,0.082,9,0.232,20,0.015,25,0.894,26,0.605,40,0.777,46,0.252,61,0.261,71,1.525,82,1.173,86,1.707,97,0.005,98,0.008,99,0.005,149,1.893,156,1.567,157,0.672,159,1.318,160,1.365,184,1.386,211,2.476,212,2.166,213,2.901,216,0.575,277,1.668,303,1.785,309,0.92,424,1.437,477,0.767,478,1.603,482,1.386,515,1.365,516,1.365,519,1.968,524,1.067,525,0.998,526,1.437,527,3.05,528,2.819,529,2.422,530,2.915,531,2.606,532,2.915,533,2.248,534,1.635,535,2.263,536,2.457,537,2.422,538,2.47,539,1.707,540,1.968,541,2.752,542,2.166,543,2.756,544,1.968,545,2.579,546,2.166,547,1.785,548,1.635,549,1.635,550,1.635,551,1.635,552,1.635,553,1.868,554,1.868,555,2.286,556,1.868,557,2.248,558,1.3,559,1.607,560,1.607,561,2.391,562,1.607,563,1.517,564,2.696,565,3.272,566,1.71,567,1.71,568,1.71,569,1.517,570,1.71,571,1.365,572,1.71,573,1.71,574,1.71,575,3.909,576,2.286]],["title/injectables/DormService.html",[130,0.996,661,2.291]],["body/injectables/DormService.html",[3,0.086,4,0.086,5,0.067,9,0.127,10,1.241,11,2.843,20,0.015,22,1.235,24,2.592,25,0.938,26,0.55,27,2.592,29,2.387,39,1.966,40,0.725,41,3.192,46,0.351,53,0.531,61,0.086,62,0.039,64,1.6,69,1.247,70,1.684,71,0.979,74,1.321,77,1.668,79,2.025,82,1.475,84,2.608,86,1.468,97,0.004,98,0.007,99,0.004,121,0.973,130,0.906,131,0.973,135,1.606,137,4.4,138,3.106,147,2.872,153,1.623,155,1.504,156,0.855,157,1.786,159,1.322,160,1.122,162,3.186,163,1.971,166,1.623,168,2.371,169,1.623,170,1.623,171,1.623,172,1.623,173,2.559,277,1.192,278,2.793,424,2.305,527,2.155,528,2.062,535,2.108,536,1.893,539,2.243,540,1.74,544,1.406,545,2.062,547,1.534,548,1.406,549,1.406,550,1.406,551,1.406,552,1.406,561,1.534,575,1.321,577,2.305,600,1.321,614,2.433,617,1.247,619,1.247,627,1.971,628,3.106,651,2.084,656,2.305,661,2.082,663,1.971,700,3.106,735,4.748,757,1.971,758,3.583,759,3.583,760,3.583,761,4.434,762,3.583,763,3.583,764,3.583,765,3.583,766,3.583,767,3.583,768,3.583,769,2.273,770,4.434,771,4.434,772,2.273,773,3.583,774,2.273,775,2.273,776,2.273,777,2.273,778,2.273,779,2.273,780,2.273,781,3.583,782,2.273,783,2.273,784,3.583,785,2.273,786,3.583,787,2.273,788,2.273,789,2.273,790,2.273,791,3.583,792,2.273,793,3.583,794,2.273,795,2.273,796,2.273,797,3.583,798,4.434,799,2.273,800,2.273,801,2.273,802,2.273,803,1.772,804,2.273,805,2.273,806,2.273,807,2.273,808,3.583,809,3.583,810,3.583,811,3.583,812,3.583,813,3.583,814,5.033,815,3.583,816,3.583,817,3.583,818,3.583,819,3.583,820,3.583,821,3.583,822,3.583,823,3.583,824,3.583,825,3.583,826,2.273,827,2.273,828,5.033,829,4.434,830,2.273,831,2.273,832,2.273,833,2.273,834,2.273,835,3.583,836,2.273,837,2.273,838,2.273,839,6.493,840,2.273,841,2.273,842,2.273,843,2.273,844,2.273,845,2.273,846,2.273,847,2.273,848,3.106,849,2.273,850,2.273,851,2.273]],["title/injectables/JwtAuthGuard.html",[130,0.996,340,2.291]],["body/injectables/JwtAuthGuard.html",[3,0.23,4,0.23,5,0.178,20,0.014,46,0.426,53,1.414,61,0.23,62,0.105,97,0.011,98,0.013,99,0.011,130,1.782,131,2.59,340,4.099,380,3.741,564,2.59,664,4.003,852,4.715,853,5.244,854,6.048]],["title/injectables/JwtStrategy.html",[130,0.996,376,2.609]],["body/injectables/JwtStrategy.html",[3,0.201,4,0.201,5,0.156,9,0.295,10,2.254,11,2.651,20,0.015,22,1.15,24,1.99,25,0.687,26,0.396,27,1.99,29,1.833,46,0.456,53,1.238,61,0.201,62,0.092,79,1.76,97,0.01,98,0.012,99,0.01,130,1.646,131,2.267,135,3.161,147,3.214,348,4.126,362,5.075,376,4.309,380,3.273,385,3.504,386,4.126,390,4.126,393,2.613,422,3.273,442,4.59,564,2.267,855,4.59,856,5.075,857,5.293,858,6.51,859,5.293,860,4.59,861,4.59,862,5.293,863,4.126,864,4.59,865,4.59,866,5.293,867,5.293,868,5.293,869,5.293]],["title/interfaces/Lobby.html",[524,0.668,870,2.438]],["body/interfaces/Lobby.html",[3,0.152,4,0.152,5,0.118,9,0.223,20,0.015,26,0.605,40,0.733,46,0.372,61,0.206,71,1.091,82,0.934,95,3.263,97,0.007,98,0.01,99,0.007,149,1.607,156,2.04,157,0.971,158,3.114,159,1.916,160,1.972,184,2.298,216,1.481,303,3.053,308,2.977,477,0.999,519,2.711,524,0.677,525,1.441,531,3.592,534,2.711,538,3.072,543,1.972,558,2.55,564,1.711,565,2.076,870,3.355,871,3.114,872,5.993,873,4.936,874,5.387,875,3.842,876,5.387,877,5.387,878,2.853,879,4.704,880,3.153]],["title/controllers/LobbyController.html",[0,1.546,881,2.815]],["body/controllers/LobbyController.html",[0,0.905,2,0.905,3,0.088,4,0.088,5,0.068,7,1.427,9,0.129,10,1.256,11,2.948,19,2.043,20,0.015,21,2.603,22,1.255,24,2.602,25,0.898,26,0.518,27,2.602,29,2.396,39,2.457,40,0.703,41,2.785,46,0.37,47,1.427,48,1.427,49,1.648,50,3.359,51,1.799,52,3.651,53,0.54,57,1.427,58,0.768,61,0.088,62,0.04,63,1.341,64,0.833,66,1.648,69,3.026,70,1.704,71,0.991,77,0.868,79,2.22,82,1.561,83,2.827,84,2.963,86,3.118,87,1.648,93,2.827,94,2.827,95,2.891,96,2.827,97,0.012,98,0.007,99,0.004,187,1.688,320,4.752,332,1.648,333,3.651,337,1.648,340,1.341,349,2.243,351,1.199,364,1.648,370,2.001,649,3.144,651,2.593,656,2.867,664,1.528,665,2.001,666,2.001,870,2.77,873,2.589,875,3.56,880,1.341,881,2.589,882,2.001,883,2.001,884,3.144,885,3.626,886,4.479,887,3.144,888,3.883,889,3.144,890,3.144,891,3.626,892,3.883,893,3.883,894,3.144,895,3.144,896,2.308,897,4.208,898,2.457,899,2.308,900,2.308,901,2.308,902,3.626,903,2.308,904,2.308,905,4.479,906,2.638,907,2.308,908,2.308,909,3.626,910,2.308,911,2.001,912,2.308,913,2.308,914,2.308,915,2.308,916,2.308,917,4.035,918,3.36,919,3.626,920,2.308,921,2.308,922,2.308,923,2.308,924,3.626,925,2.308,926,2.308,927,3.626,928,2.308,929,2.308,930,3.626,931,2.308,932,2.308,933,3.626,934,2.308,935,2.308,936,2.308,937,2.77,938,2.001,939,2.001,940,2.308,941,2.308,942,2.308,943,2.001,944,2.308,945,2.308,946,3.626,947,2.308,948,2.308,949,2.308,950,2.308,951,2.308,952,2.308,953,2.308,954,3.626,955,2.308,956,2.001,957,3.626,958,2.308,959,2.308,960,2.001,961,2.308,962,2.308,963,2.308,964,2.308,965,2.308,966,2.308,967,2.308,968,2.308,969,2.308]],["title/modules/LobbyModule.html",[100,1.546,286,2.609]],["body/modules/LobbyModule.html",[2,2.448,3,0.188,4,0.188,5,0.146,20,0.015,25,0.642,46,0.464,53,1.156,61,0.188,62,0.085,97,0.009,98,0.012,99,0.009,100,2.682,102,2.44,103,2.323,104,2.712,105,2.712,106,2.44,107,3.751,108,2.712,113,3.929,114,3.929,115,3.423,116,2.712,117,2.569,119,3.626,120,3.057,121,2.117,125,3.53,126,3.53,127,3.272,129,3.057,286,5.225,870,3.057,878,4.456,881,4.882,937,4.675,938,4.287,970,4.287,971,4.944,972,4.287,973,4.944,974,4.944,975,4.287]],["title/injectables/LobbyService.html",[130,0.996,937,2.438]],["body/injectables/LobbyService.html",[3,0.069,4,0.069,5,0.054,9,0.102,10,1.041,11,2.909,20,0.015,22,1.218,24,2.592,25,0.895,26,0.516,27,2.592,29,2.358,39,2.69,40,0.735,41,3.405,46,0.351,47,1.131,53,0.428,61,0.069,62,0.032,64,1.6,67,1.86,68,1.306,69,3.193,70,2.917,71,1.774,72,1.306,73,2.148,74,1.748,75,1.306,76,1.306,77,1.131,78,1.306,79,2.064,82,1.518,84,2.832,86,2.16,95,1.485,97,0.006,98,0.006,99,0.003,121,0.783,130,0.76,131,0.783,135,1.348,137,2.937,147,2.873,149,1.466,153,1.306,155,1.211,156,0.688,157,0.931,162,3.24,166,3.168,168,4.21,169,2.735,170,3.501,171,3.168,172,3.168,173,4.156,175,1.426,176,2.344,184,1.63,187,1.475,202,2.344,209,1.426,216,1.095,224,1.426,334,1.426,345,2.497,423,1.586,519,1.923,531,2.548,534,1.923,535,0.633,538,0.717,651,3.24,656,3.491,661,3.238,668,2.306,693,1.586,699,1.586,725,1.586,870,4.263,873,2.148,874,3.822,875,3.904,876,3.822,877,3.822,883,5.905,884,2.608,887,2.608,888,3.321,889,2.608,890,2.608,892,2.608,893,2.608,894,2.608,895,2.608,897,3.896,898,2.101,911,1.586,917,1.131,918,2.434,937,1.86,939,1.586,975,1.586,976,1.586,977,3.007,978,3.007,979,3.83,980,3.007,981,3.007,982,3.007,983,1.829,984,3.83,985,1.829,986,3.007,987,1.829,988,1.829,989,1.829,990,1.829,991,3.007,992,1.829,993,3.007,994,1.829,995,1.829,996,1.829,997,3.007,998,1.829,999,1.829,1000,1.829,1001,1.829,1002,3.007,1003,1.829,1004,3.007,1005,1.829,1006,3.007,1007,1.829,1008,1.829,1009,1.829,1010,1.829,1011,1.829,1012,3.007,1013,1.829,1014,1.829,1015,1.829,1016,1.829,1017,1.829,1018,1.829,1019,1.829,1020,4.902,1021,3.007,1022,1.829,1023,1.829,1024,1.829,1025,3.83,1026,4.436,1027,4.436,1028,4.436,1029,4.436,1030,4.436,1031,4.436,1032,4.436,1033,4.436,1034,1.829,1035,1.829,1036,1.829,1037,3.007,1038,1.829,1039,1.829,1040,1.829,1041,1.829,1042,1.829,1043,3.007,1044,1.829,1045,1.829]],["title/injectables/LocalAuthGuard.html",[130,0.996,335,2.815]],["body/injectables/LocalAuthGuard.html",[3,0.23,4,0.23,5,0.178,20,0.014,46,0.426,53,1.414,61,0.23,62,0.105,97,0.011,98,0.013,99,0.011,130,1.782,131,2.59,335,5.036,380,3.741,564,2.59,852,4.715,853,5.244,1046,5.244,1047,6.048]],["title/injectables/LocalStrategy.html",[130,0.996,377,2.609]],["body/injectables/LocalStrategy.html",[3,0.177,4,0.177,5,0.138,9,0.26,10,2.082,11,2.502,20,0.015,22,1.176,24,2.261,25,0.781,26,0.45,27,2.261,29,1.616,40,0.711,46,0.439,53,1.091,61,0.177,62,0.081,63,2.712,64,2.4,70,2.193,71,1.818,79,1.552,82,1.091,84,1.998,97,0.009,98,0.011,99,0.009,130,1.52,131,1.998,135,2.092,147,2.969,162,3.127,214,3.638,216,1.511,334,3.638,338,4.328,339,3.638,344,3.089,377,3.981,380,2.886,418,4.652,420,5.214,477,1.107,563,2.56,564,1.998,856,4.688,860,4.046,861,5.214,863,3.638,864,4.046,865,4.046,1048,4.046,1049,7.028,1050,4.666,1051,4.666,1052,6.014,1053,4.666,1054,4.046,1055,6.014,1056,4.666,1057,4.046,1058,3.332,1059,3.638,1060,4.666,1061,4.666,1062,4.666]],["title/classes/LoginUserDto.html",[62,0.068,1058,2.815]],["body/classes/LoginUserDto.html",[3,0.207,4,0.207,5,0.161,9,0.304,19,1.96,20,0.015,22,1.172,26,0.497,40,0.71,46,0.401,58,1.816,61,0.207,62,0.115,64,2.794,97,0.01,98,0.012,99,0.01,418,4.731,475,1.891,476,3.899,477,1.222,478,2.284,502,2.579,503,3.857,510,1.745,514,3.204,1058,4.738,1059,5.572,1063,5.46,1064,5.46,1065,4.735,1066,5.46]],["title/interfaces/PendingAction.html",[128,2.609,524,0.668]],["body/interfaces/PendingAction.html",[3,0.176,4,0.176,5,0.136,9,0.258,20,0.015,25,0.777,26,0.608,40,0.768,46,0.28,61,0.227,71,1.264,82,1.082,97,0.009,98,0.011,99,0.009,123,3.305,128,3.959,156,2.249,180,4.802,182,4.802,184,2.413,186,4.802,187,1.989,189,2.347,191,2.347,193,3.109,195,4.802,303,2.562,477,1.101,524,0.784,525,1.669,538,2.749,543,2.285,564,1.982,565,2.405,1067,3.608]],["title/interfaces/Review.html",[524,0.668,1068,2.438]],["body/interfaces/Review.html",[3,0.175,4,0.175,5,0.136,9,0.257,20,0.015,26,0.6,40,0.762,46,0.36,61,0.226,71,1.259,82,1.078,86,2.866,97,0.009,98,0.011,99,0.009,149,1.701,156,2.243,157,1.881,158,3.593,184,2.41,187,1.984,216,1.505,277,2.41,303,2.555,477,1.098,524,0.781,525,1.663,538,2.744,543,2.275,558,2.804,564,1.974,565,2.395,1068,3.69,1069,3.593,1070,4.481,1071,4.481,1072,3.291,1073,2.679]],["title/classes/ReviewBodyDto.html",[62,0.068,1074,2.291]],["body/classes/ReviewBodyDto.html",[3,0.182,4,0.182,5,0.141,9,0.267,19,2.165,20,0.015,22,1.295,26,0.549,40,0.716,46,0.369,58,1.592,61,0.256,62,0.123,97,0.009,98,0.011,99,0.009,149,1.486,157,1.637,216,1.399,277,2.239,475,1.657,477,1.125,502,2.783,507,2.668,510,1.529,514,3.459,598,2.626,1065,5.299,1070,4.165,1071,4.165,1073,2.782,1074,3.552,1075,3.418,1076,3.418,1077,4.786,1078,4.786,1079,4.786,1080,4.786,1081,4.786,1082,4.786,1083,4.786,1084,4.046,1085,4.764,1086,3.168,1087,3.731,1088,2.782,1089,3.168,1090,2.782]],["title/controllers/ReviewController.html",[0,1.546,1091,2.815]],["body/controllers/ReviewController.html",[0,1.244,2,1.244,3,0.12,4,0.12,5,0.094,7,1.961,9,0.177,10,1.597,11,2.792,19,1.763,20,0.015,21,3.159,22,1.12,24,2.244,25,0.775,26,0.447,27,2.244,29,2.067,39,3.747,40,0.739,41,3.747,46,0.36,47,2.853,48,2.853,49,2.265,50,2.099,51,4.237,52,3.053,53,0.742,57,1.961,58,1.055,61,0.12,62,0.055,63,1.843,64,1.144,66,2.265,67,1.961,68,2.265,69,4.028,70,2.805,71,1.63,72,2.265,73,3.294,74,1.843,75,2.265,76,2.265,77,1.193,78,2.265,79,2.109,82,1.396,83,4.653,84,2.716,86,2.445,87,2.265,93,2.472,94,2.472,95,1.565,96,2.472,97,0.006,98,0.009,99,0.006,187,2.373,216,0.958,651,3.21,943,2.75,956,2.75,960,3.999,1068,2.853,1073,2.681,1074,3.969,1088,3.469,1089,4.86,1090,3.469,1091,3.294,1092,2.75,1093,5.436,1094,3.999,1095,4.713,1096,4.713,1097,4.612,1098,2.75,1099,3.171,1100,5.738,1101,2.75,1102,3.171,1103,2.75,1104,3.171,1105,3.171,1106,4.612,1107,3.171,1108,3.362,1109,2.75,1110,2.75,1111,3.171,1112,3.171,1113,3.171,1114,4.612,1115,3.171,1116,3.171,1117,3.171,1118,3.171,1119,3.171,1120,3.171,1121,3.171,1122,3.171,1123,3.171,1124,3.171]],["title/modules/ReviewModule.html",[100,1.546,287,2.609]],["body/modules/ReviewModule.html",[2,2.547,3,0.2,4,0.2,5,0.155,20,0.015,25,0.684,46,0.456,53,1.232,61,0.2,62,0.091,97,0.01,98,0.012,99,0.01,100,2.76,102,2.601,103,2.476,104,2.89,105,2.89,106,2.601,107,3.86,108,2.89,115,3.562,116,2.89,117,2.738,119,3.062,120,3.258,121,2.256,127,3.487,129,3.258,287,5.084,1068,3.258,1072,4.636,1091,5.025,1108,4.75,1109,4.568,1125,4.568,1126,4.568,1127,5.268,1128,5.268,1129,4.568]],["title/classes/ReviewParamDto.html",[62,0.068,1090,2.291]],["body/classes/ReviewParamDto.html",[3,0.198,4,0.198,5,0.154,9,0.29,19,1.538,20,0.015,22,0.92,26,0.39,40,0.718,46,0.389,58,1.732,61,0.266,62,0.126,97,0.01,98,0.012,99,0.01,149,1.266,157,1.266,216,1.082,277,1.732,475,1.803,477,1.187,502,2.829,507,2.75,510,1.664,514,3.516,598,2.857,1070,3.22,1071,3.22,1073,4.068,1074,3.026,1075,3.719,1076,3.719,1084,4.266,1085,5.024,1086,3.447,1087,4.059,1088,3.026,1089,3.447,1090,3.746,1130,5.207]],["title/injectables/ReviewService.html",[130,0.996,1108,2.438]],["body/injectables/ReviewService.html",[3,0.095,4,0.095,5,0.074,9,0.139,10,1.336,11,2.892,20,0.015,22,1.181,24,2.514,25,0.868,26,0.5,27,2.514,29,2.256,39,2.586,40,0.751,41,3.321,46,0.346,53,0.585,61,0.095,62,0.043,64,0.902,67,1.546,70,2.965,71,1.826,74,1.453,77,0.94,79,2.098,82,1.523,84,2.79,86,1.581,97,0.009,98,0.007,99,0.005,121,1.071,130,0.976,131,1.071,135,1.73,137,3.508,147,2.988,149,1.146,153,1.786,155,1.655,156,0.94,157,1.146,162,3.209,166,3.366,168,4.425,169,1.786,170,3.785,171,3.366,172,3.366,173,4.505,175,1.949,176,3.009,184,1.568,187,2.448,197,2.168,202,1.949,209,1.949,216,0.979,224,1.949,226,2.168,277,1.568,309,0.832,651,2.491,1068,4.774,1070,2.915,1071,2.915,1073,1.453,1074,3.969,1088,3.667,1089,4.52,1090,3.08,1094,3.347,1095,4.087,1096,3.347,1098,3.347,1100,5.797,1101,2.168,1103,3.347,1108,2.387,1110,2.168,1129,2.168,1131,2.168,1132,3.86,1133,4.714,1134,4.714,1135,4.714,1136,4.714,1137,2.501,1138,2.501,1139,3.86,1140,2.501,1141,3.86,1142,2.501,1143,2.501,1144,2.501,1145,2.501,1146,2.501,1147,2.501,1148,2.501,1149,2.501,1150,2.501,1151,2.501,1152,2.501,1153,2.501,1154,5.3,1155,2.501,1156,3.86,1157,3.86,1158,2.501,1159,2.501,1160,2.501,1161,3.86,1162,4.714,1163,3.86,1164,3.86,1165,3.86,1166,3.86,1167,3.86,1168,3.86,1169,2.501,1170,2.501,1171,2.501,1172,2.501,1173,2.501,1174,2.501,1175,2.501,1176,2.501,1177,2.501,1178,2.501,1179,2.501]],["title/guards/RoleGuard.html",[349,2.438,1180,3.073]],["body/guards/RoleGuard.html",[3,0.182,4,0.182,5,0.141,9,0.267,10,2.116,20,0.015,22,1.19,24,2.532,25,0.874,26,0.504,27,2.532,29,2.116,40,0.677,46,0.369,53,1.119,61,0.182,62,0.083,63,2.782,79,2.239,82,1.575,97,0.009,98,0.011,99,0.009,130,1.545,135,2.145,162,3.165,216,0.994,308,3.694,309,1.592,333,3.168,349,3.78,351,3.176,1181,4.786,1182,4.15,1183,7.095,1184,6.112,1185,4.786,1186,7.497,1187,4.786,1188,6.112,1189,7.095,1190,4.786,1191,4.786,1192,4.786,1193,6.734,1194,4.786,1195,6.112,1196,4.15,1197,4.786,1198,4.786,1199,4.786,1200,4.786,1201,4.786,1202,4.786,1203,4.786,1204,4.786,1205,4.786]],["title/interfaces/Room.html",[524,0.668,535,1.365]],["body/interfaces/Room.html",[3,0.121,4,0.121,5,0.094,9,0.177,20,0.015,25,0.86,26,0.57,40,0.779,46,0.361,58,1.058,61,0.207,62,0.103,64,2.763,77,2.247,97,0.006,98,0.009,99,0.006,149,1.941,157,0.773,159,1.214,277,2.111,303,1.979,309,2.203,393,3.27,421,1.57,477,0.851,478,1.477,482,1.537,489,1.967,490,1.967,502,2.805,503,3.164,504,1.967,507,2.82,510,1.016,514,3.251,519,1.248,520,1.967,524,0.783,525,1.147,527,1.362,528,2.714,533,1.426,535,1.885,536,1.196,539,1.893,540,1.813,544,1.813,545,2.8,547,2.56,548,2.491,549,2.491,550,2.491,551,2.491,552,2.491,553,1.426,554,1.426,556,2.072,557,2.072,561,1.979,577,1.653,578,1.967,579,1.967,580,2.105,598,1.745,599,3.059,600,1.848,601,1.745,602,2.105,603,2.105,604,1.57,605,1.967,606,1.967,607,1.967,608,1.848,609,1.967,610,1.848,611,1.848,612,1.967,613,3.696,614,1.745,615,1.967,616,2.686,617,2.536,618,1.848,619,1.745,620,1.848,621,1.848,622,1.848,623,1.848,624,1.848]],["title/interfaces/RoomInterface.html",[524,0.668,539,1.615]],["body/interfaces/RoomInterface.html",[3,0.1,4,0.1,5,0.078,9,0.224,20,0.015,25,0.881,26,0.606,40,0.778,46,0.242,61,0.257,71,1.486,82,1.137,86,2.4,97,0.005,98,0.007,99,0.005,149,1.93,156,1.508,157,0.639,159,1.278,160,1.298,184,1.334,211,2.401,212,2.085,213,2.828,216,0.546,277,2.054,303,1.718,309,0.874,424,1.366,477,0.739,478,1.554,482,1.334,515,1.298,516,1.298,519,1.908,524,1.046,525,0.948,526,1.366,527,2.836,528,2.779,529,2.331,530,2.827,531,2.527,532,2.827,533,2.18,534,1.574,535,1.884,536,2.046,537,2.331,538,2.422,539,1.992,540,1.908,541,2.668,542,2.085,543,2.686,544,1.908,545,2.779,546,2.085,547,2.509,548,2.298,549,2.298,550,2.298,551,2.298,552,2.298,553,1.798,554,1.798,555,2.201,556,1.798,557,2.18,558,1.236,559,1.528,560,1.528,561,2.33,562,1.528,563,1.443,564,2.644,565,3.209,566,1.626,567,1.626,568,1.626,569,1.443,570,1.626,571,1.298,572,1.626,573,1.626,574,1.626,575,3.162,576,1.443]],["title/classes/TicketBodyDto.html",[18,2.438,62,0.068]],["body/classes/TicketBodyDto.html",[3,0.18,4,0.18,5,0.14,9,0.264,18,3.754,19,2.158,20,0.015,22,1.291,25,0.615,26,0.582,31,2.929,34,3.382,40,0.742,46,0.367,58,1.575,61,0.23,62,0.116,69,2.598,97,0.009,98,0.011,99,0.009,180,4.435,182,4.435,186,4.435,187,1.575,189,1.858,191,1.858,193,2.461,195,4.435,303,2.028,475,1.64,477,1.118,502,2.636,507,2.657,510,1.513,514,3.351,1076,3.382,1084,3.134,1086,3.134,1206,3.691,1207,4.735,1208,4.735,1209,6.071,1210,4.735,1211,4.735,1212,4.735,1213,3.382,1214,4.735,1215,6.128,1216,4.106,1217,4.106]],["title/classes/TicketIdDto.html",[31,2.438,62,0.068]],["body/classes/TicketIdDto.html",[3,0.196,4,0.196,5,0.152,9,0.288,18,3.191,19,1.524,20,0.015,22,0.912,25,0.67,26,0.48,31,3.963,34,4.978,40,0.748,46,0.387,58,1.716,61,0.243,62,0.121,69,2.831,97,0.01,98,0.012,99,0.01,180,3.415,182,3.415,186,3.415,187,1.716,189,2.024,191,2.024,193,2.681,195,3.415,475,1.787,477,1.18,502,2.704,507,2.742,510,1.649,514,3.425,1076,3.684,1084,3.415,1086,3.415,1206,4.022,1215,6.321,1216,4.474,1217,4.474,1218,5.159]],["title/classes/User.html",[62,0.068,216,0.819]],["body/classes/User.html",[3,0.14,4,0.14,5,0.109,9,0.33,19,2.255,20,0.015,22,1.349,25,0.768,26,0.583,40,0.758,46,0.357,61,0.224,62,0.064,82,0.863,97,0.007,98,0.01,99,0.007,121,1.581,129,3.179,149,1.25,156,1.389,159,0.97,184,1.966,189,1.449,191,1.449,216,1.229,308,2.82,309,2.656,407,3.657,475,1.279,477,0.946,478,1.889,479,3.437,480,3.657,481,2.779,482,1.966,483,3.437,534,2.32,571,1.823,1219,2.637,1220,3.914,1221,3.914,1222,5.14,1223,7.281,1224,3.692,1225,6.959,1226,4.457,1227,3.692,1228,3.692,1229,3.692,1230,3.692,1231,5.14,1232,3.692,1233,3.692,1234,7.824,1235,3.692,1236,3.692,1237,3.692,1238,3.692,1239,3.692,1240,3.692,1241,3.692,1242,5.14,1243,5.14,1244,3.692,1245,3.692,1246,5.14,1247,3.202]],["title/interfaces/UserParsedDto.html",[524,0.668,1248,2.291]],["body/interfaces/UserParsedDto.html",[3,0.165,4,0.165,5,0.129,9,0.243,20,0.015,25,0.924,26,0.593,40,0.788,61,0.244,97,0.008,98,0.011,99,0.008,149,1.664,184,2.367,187,1.45,189,2.257,191,2.257,193,2.265,303,2.463,308,3.756,407,4.234,477,1.059,478,2.274,479,4.136,480,4.234,481,3.345,482,2.367,483,4.136,524,1.091,525,1.572,534,2.792,1220,4.532,1221,4.532,1248,3.343,1249,3.113,1250,2.696,1251,2.696]],["title/interfaces/UserRegisterRes.html",[524,0.668,1250,2.438]],["body/interfaces/UserRegisterRes.html",[3,0.195,4,0.195,5,0.152,9,0.287,20,0.015,25,0.831,26,0.385,40,0.784,61,0.264,97,0.01,98,0.012,99,0.01,149,1.556,184,2.128,187,2.423,189,2.51,191,2.51,193,2.675,308,3.511,407,3.183,477,1.178,478,2.045,479,3.719,480,3.183,481,3.007,482,2.128,483,3.719,524,1.18,525,1.857,534,2.51,1220,3.407,1221,3.407,1248,2.992,1249,3.676,1250,3.957,1251,3.183]],["title/injectables/UserRepository.html",[130,0.996,668,2.049]],["body/injectables/UserRepository.html",[3,0.164,4,0.164,5,0.128,9,0.242,10,1.984,11,2.946,20,0.015,22,1.255,24,2.569,25,0.887,26,0.511,27,2.569,29,2.365,40,0.697,46,0.441,53,1.013,61,0.164,62,0.075,71,1.565,79,2.272,82,1.013,97,0.008,98,0.011,99,0.008,121,1.856,130,1.448,131,1.856,135,1.943,137,4.521,139,4.968,147,3.73,155,2.868,156,1.63,159,1.139,162,2.037,187,1.441,216,0.9,342,3.731,344,2.868,668,2.978,803,4.467,1248,3.97,1252,3.757,1253,6.831,1254,5.73,1255,4.968,1256,4.333,1257,4.333,1258,5.73,1259,4.333,1260,4.333,1261,5.73,1262,4.333,1263,4.333,1264,4.968,1265,4.333,1266,3.095,1267,3.378,1268,3.378,1269,4.333,1270,4.333,1271,4.333,1272,4.333,1273,4.333,1274,4.333,1275,4.333,1276,4.333,1277,4.333,1278,4.333,1279,4.333,1280,4.333,1281,4.333,1282,4.333,1283,4.333]],["title/controllers/UsersController.html",[0,1.546,1284,2.815]],["body/controllers/UsersController.html",[0,1.737,2,1.737,3,0.168,4,0.168,5,0.131,7,2.738,9,0.247,10,2.012,11,2.761,19,1.716,20,0.015,21,2.573,22,1.027,24,2.185,25,0.842,26,0.331,27,2.185,29,2.012,46,0.459,48,2.738,53,1.035,57,2.738,58,1.472,61,0.168,62,0.077,63,2.573,79,1.933,82,1.359,84,2.489,97,0.008,98,0.011,99,0.008,147,3.4,157,1.076,159,1.163,184,1.472,187,2.158,189,1.737,191,1.737,193,2.301,232,2.931,234,3.451,320,3.847,332,3.162,333,2.931,337,3.162,340,2.573,342,4.267,344,2.931,345,2.605,354,5.039,358,3.451,360,5.039,364,3.162,427,3.451,478,1.415,479,2.573,481,2.081,482,1.472,483,2.573,534,1.737,664,2.931,1250,2.738,1251,2.738,1266,3.162,1267,3.451,1268,3.451,1284,4.15,1285,3.839,1286,4.427,1287,5.811,1288,5.811,1289,4.427,1290,4.427,1291,4.427,1292,4.427,1293,5.811,1294,4.427,1295,3.839,1296,4.427,1297,4.427,1298,4.427,1299,4.427,1300,4.427,1301,4.427,1302,4.427,1303,4.427,1304,4.427,1305,4.427,1306,4.427,1307,4.427,1308,4.427,1309,4.427,1310,4.427,1311,4.427,1312,4.427]],["title/modules/UsersModule.html",[100,1.546,114,2.049]],["body/modules/UsersModule.html",[2,2.391,3,0.181,4,0.181,5,0.141,20,0.015,25,0.791,46,0.46,53,1.114,61,0.181,62,0.082,97,0.009,98,0.011,99,0.009,100,2.636,102,2.352,103,2.24,104,2.615,105,2.615,106,2.352,107,3.687,108,3.687,113,2.477,114,4.078,115,3.344,116,2.615,117,2.477,119,2.77,120,2.947,121,2.041,125,3.403,127,4.035,129,3.77,216,1.266,345,3.56,571,3.318,668,4.128,1266,3.403,1284,4.799,1295,4.132,1313,4.132,1314,4.132,1315,4.132,1316,4.765,1317,4.132,1318,4.765]],["title/injectables/UsersService.html",[130,0.996,345,1.767]],["body/injectables/UsersService.html",[3,0.129,4,0.129,5,0.1,9,0.19,10,1.682,11,2.73,20,0.015,22,1.152,24,2.453,25,0.88,26,0.488,27,2.453,29,2.136,40,0.647,46,0.41,52,3.215,53,0.797,61,0.129,62,0.084,70,2.283,71,1.327,77,1.281,79,2.255,82,1.697,84,2.904,97,0.006,98,0.009,99,0.006,130,1.228,131,1.459,135,2.177,147,3.347,159,0.895,162,2.9,168,3.215,184,1.133,187,1.133,189,1.337,191,1.337,214,3.786,216,1.409,232,2.255,309,1.133,342,4.056,344,2.255,345,2.177,407,2.107,418,2.255,424,1.771,425,2.433,426,2.656,429,5.879,478,2.167,479,1.98,480,2.107,481,1.601,482,1.133,483,1.98,510,1.089,534,1.337,668,3.206,677,2.954,803,3.786,856,2.656,1220,2.255,1221,2.255,1226,2.954,1248,3.289,1255,4.211,1264,4.211,1266,2.433,1267,2.656,1268,2.656,1317,2.954,1319,2.656,1320,4.857,1321,3.407,1322,3.407,1323,4.857,1324,4.857,1325,3.407,1326,4.857,1327,4.857,1328,3.407,1329,3.407,1330,4.857,1331,3.407,1332,3.407,1333,3.407,1334,3.407,1335,3.407,1336,5.66,1337,4.857,1338,5.66,1339,3.407,1340,3.407,1341,4.857,1342,3.407,1343,4.857,1344,3.407,1345,6.169,1346,3.407,1347,4.857,1348,5.66,1349,4.857,1350,4.857,1351,4.857,1352,3.407,1353,3.407,1354,4.857,1355,3.407,1356,3.407,1357,3.407,1358,3.407,1359,3.407,1360,3.407,1361,3.407,1362,3.407,1363,3.407,1364,3.407,1365,3.407,1366,3.407]],["title/interfaces/Utility.html",[524,0.668,536,1.482]],["body/interfaces/Utility.html",[3,0.13,4,0.13,5,0.101,9,0.191,20,0.015,25,0.737,26,0.544,40,0.779,46,0.374,58,1.14,61,0.216,62,0.107,64,2.794,77,2.326,97,0.006,98,0.009,99,0.006,149,1.915,157,0.833,159,1.282,277,1.622,309,2.259,393,3.354,421,1.692,477,0.898,478,1.559,482,1.622,489,2.12,490,2.12,502,2.831,503,3.3,504,2.12,507,2.857,510,1.095,514,3.305,519,1.345,520,2.12,524,0.827,525,1.236,527,1.468,528,2.326,533,1.537,535,1.689,536,1.834,539,1.998,540,1.914,544,2.565,545,2.864,547,1.468,548,1.914,549,1.914,550,1.914,551,1.914,552,1.914,553,1.537,554,1.537,556,2.187,557,2.187,561,2.089,577,1.781,578,2.12,579,2.12,580,2.269,598,1.881,599,3.229,600,1.992,601,1.881,602,2.269,603,2.269,604,1.692,605,2.12,606,2.12,607,2.12,608,1.992,609,2.12,610,1.992,611,1.992,612,2.12,613,3.826,614,1.881,615,2.12,616,2.835,617,2.676,618,1.992,619,1.881,620,1.992,621,1.992,622,1.992,623,1.992,624,1.992]],["title/interfaces/UtilityInterface.html",[524,0.668,540,1.546]],["body/interfaces/UtilityInterface.html",[3,0.107,4,0.107,5,0.083,9,0.236,20,0.015,25,0.824,26,0.605,40,0.778,46,0.256,61,0.263,71,1.54,82,1.187,86,1.733,97,0.005,98,0.008,99,0.005,149,1.909,156,1.591,157,0.686,159,1.334,160,1.393,184,1.407,211,2.506,212,2.198,213,2.931,216,0.586,277,1.688,309,0.938,424,1.466,477,0.779,478,1.622,482,1.407,515,1.393,516,1.393,519,1.991,524,1.075,525,1.018,526,1.466,527,2.897,528,2.599,529,2.459,530,2.95,531,2.638,532,2.95,533,2.275,534,1.66,535,1.953,536,2.121,537,2.459,538,2.489,539,1.733,540,2.212,541,2.785,542,2.198,543,2.784,544,2.489,545,2.835,546,2.198,547,1.812,548,1.66,549,1.66,550,1.66,551,1.66,552,1.66,553,1.896,554,1.896,555,2.321,556,1.896,557,2.275,558,1.326,559,1.64,560,1.64,561,2.415,562,1.64,563,1.548,564,2.717,565,3.297,566,1.745,567,1.745,568,1.745,569,1.548,570,1.745,571,1.393,572,1.745,573,1.745,574,1.745,575,3.277,576,1.548]],["title/interfaces/UtilityInterface-1.html",[524,0.558,540,1.292,738,2.18]],["body/interfaces/UtilityInterface-1.html",[3,0.107,4,0.107,5,0.083,9,0.236,20,0.015,25,0.824,26,0.605,40,0.778,46,0.256,61,0.263,71,1.54,82,1.187,86,1.733,97,0.005,98,0.008,99,0.005,149,1.909,156,1.591,157,0.686,159,1.334,160,1.393,184,1.407,211,2.506,212,2.198,213,2.931,216,0.586,277,1.688,309,0.938,424,1.466,477,0.779,478,1.622,482,1.407,515,1.393,516,1.393,519,1.991,524,1.075,525,1.018,526,1.466,527,2.897,528,2.599,529,2.459,530,2.95,531,2.638,532,2.95,533,2.275,534,1.66,535,1.953,536,2.121,537,2.459,538,2.489,539,1.733,540,2.212,541,2.785,542,2.198,543,2.784,544,2.489,545,2.835,546,2.198,547,1.812,548,1.66,549,1.66,550,1.66,551,1.66,552,1.66,553,1.896,554,1.896,555,2.321,556,1.896,557,2.275,558,1.326,559,1.64,560,1.64,561,2.415,562,1.64,563,1.548,564,2.717,565,3.297,566,1.745,567,1.745,568,1.745,569,1.548,570,1.745,571,1.393,572,1.745,573,1.745,574,1.745,575,3.277,576,1.548]],["title/classes/addDorm.html",[62,0.068,601,2.163]],["body/classes/addDorm.html",[3,0.116,4,0.116,5,0.09,9,0.17,19,2.086,20,0.015,22,1.248,25,0.81,26,0.562,40,0.777,46,0.354,58,1.013,61,0.202,62,0.101,64,2.855,77,2.202,97,0.006,98,0.008,99,0.006,149,1.88,157,0.741,159,1.177,277,1.49,309,2.17,393,3.221,421,1.504,475,1.055,477,0.825,478,1.871,482,1.947,489,2.77,490,2.77,502,2.789,503,3.087,504,1.884,507,2.797,510,0.974,514,3.335,519,1.195,520,1.884,524,0.759,527,1.305,528,2.556,533,1.366,535,1.551,536,1.146,539,1.835,540,1.757,544,1.757,545,2.673,547,1.305,548,1.757,549,1.757,550,1.757,551,1.757,552,1.757,553,1.366,554,1.366,556,2.625,557,2.625,561,2.508,577,1.583,578,1.884,579,1.884,580,2.017,598,1.671,599,2.965,600,1.771,601,2.457,602,2.017,603,2.965,604,1.504,605,1.884,606,1.884,607,1.884,608,1.771,609,1.884,610,1.771,611,1.771,612,1.884,613,3.622,614,1.671,615,1.884,616,2.603,617,2.457,618,1.771,619,1.671,620,1.771,621,1.771,622,1.771,623,1.771,624,1.771,1367,3.047,1368,3.047,1369,3.047,1370,3.047,1371,3.047,1372,3.047,1373,3.047,1374,3.047,1375,3.047,1376,3.047,1377,3.047,1378,3.047,1379,3.047,1380,3.047,1381,3.047]],["title/classes/chatDto.html",[62,0.068,898,2.163]],["body/classes/chatDto.html",[3,0.188,4,0.188,5,0.146,9,0.277,19,2.023,20,0.015,22,1.21,26,0.513,40,0.723,46,0.378,61,0.273,62,0.128,95,3.382,97,0.009,98,0.012,99,0.009,159,1.8,216,1.423,421,2.451,475,1.719,477,1.152,502,2.804,507,2.846,510,1.587,538,2.455,651,2.334,656,2.581,875,2.886,880,3.981,897,2.724,898,3.433,906,2.581,917,3.071,918,2.724,1213,3.546,1382,3.287,1383,4.966,1384,4.966,1385,4.966,1386,4.966,1387,4.966,1388,4.468,1389,4.468]],["title/coverage.html",[1390,4.662]],["body/coverage.html",[0,2.589,1,2.035,5,0.084,6,2.471,18,1.762,20,0.015,26,0.213,31,1.762,54,1.762,62,0.131,71,0.778,77,3.092,97,0.005,98,0.008,99,0.005,106,1.407,123,2.035,128,1.886,130,1.836,132,2.471,157,0.693,216,0.592,227,2.035,228,2.471,242,1.762,244,2.221,245,2.221,300,2.471,310,2.035,311,2.471,335,2.035,338,1.656,340,1.656,342,1.656,343,3.647,345,1.277,347,1.762,349,1.762,351,1.481,376,1.886,377,1.886,385,1.886,395,3.323,422,1.762,425,3.044,476,4.047,481,1.339,517,2.221,524,1.276,526,3.672,535,0.987,536,1.072,539,1.167,540,1.672,542,1.481,546,1.481,555,1.563,558,1.339,569,1.563,571,1.407,576,1.563,577,1.481,578,3.752,601,1.563,604,2.104,625,2.035,626,2.221,661,1.656,664,1.886,668,1.481,757,2.471,852,3.323,855,2.471,870,1.762,871,3.323,878,2.035,881,2.035,882,2.471,897,1.563,898,1.563,906,2.215,918,1.563,937,1.762,976,2.471,1046,2.471,1048,2.471,1058,2.035,1059,2.221,1067,3.323,1068,1.762,1069,3.323,1072,2.035,1074,1.656,1075,3.647,1088,1.656,1090,1.656,1091,2.035,1092,2.471,1108,1.762,1131,2.471,1180,2.221,1182,2.471,1206,3.323,1219,3.044,1248,1.656,1249,3.647,1250,1.762,1251,1.762,1252,2.471,1284,2.035,1285,2.471,1319,3.323,1382,3.751,1390,2.471,1391,2.849,1392,2.849,1393,2.849,1394,6.6,1395,6.6,1396,2.849,1397,7.529,1398,7.661,1399,4.262,1400,6.6,1401,4.262,1402,3.323,1403,4.262,1404,2.471,1405,2.471,1406,6.367,1407,5.668,1408,2.849,1409,2.849,1410,5.106,1411,4.262,1412,2.849,1413,2.849,1414,2.471,1415,2.849,1416,3.696,1417,3.696,1418,5.106,1419,2.471,1420,2.471,1421,2.849,1422,2.849,1423,2.849]],["title/classes/createLobbyDto.html",[62,0.068,906,2.049]],["body/classes/createLobbyDto.html",[3,0.193,4,0.193,5,0.15,9,0.283,19,1.874,20,0.015,22,1.121,26,0.475,40,0.737,46,0.383,61,0.275,62,0.129,95,2.507,97,0.009,98,0.012,99,0.009,159,1.667,216,1.055,421,2.507,475,1.758,477,1.168,502,2.816,507,2.862,510,1.623,538,1.992,581,4.946,651,3.253,656,3.597,875,2.951,880,2.951,897,2.786,898,2.786,906,3.297,917,3.14,918,2.786,1382,3.361,1388,4.531,1389,4.531,1424,5.078,1425,5.078]],["title/classes/createLobbyDto-1.html",[62,0.057,738,2.18,906,1.711]],["body/classes/createLobbyDto-1.html",[3,0.213,4,0.213,5,0.165,9,0.313,19,1.992,20,0.015,22,1.192,26,0.505,40,0.716,46,0.339,61,0.213,62,0.117,97,0.01,98,0.013,99,0.01,475,1.943,477,1.242,502,2.609,507,2.72,510,1.793,581,5.258,651,3.399,656,3.759,906,3.505,1419,4.865,1426,5.61,1427,5.61]],["title/dependencies.html",[103,2.228,1428,3.293]],["body/dependencies.html",[20,0.015,53,1.258,58,1.79,62,0.114,97,0.01,98,0.012,99,0.01,103,2.529,121,2.305,156,2.024,240,3.843,241,4.697,380,3.328,384,4.195,390,4.195,510,1.72,513,4.667,863,5.537,1057,4.667,1196,4.667,1429,7.103,1430,6.577,1431,5.382,1432,5.382,1433,5.382,1434,5.382,1435,5.382,1436,5.382,1437,5.382,1438,5.382,1439,5.382,1440,5.382,1441,5.382,1442,5.382,1443,5.382,1444,5.382,1445,5.382,1446,5.382,1447,5.382,1448,5.382,1449,5.382,1450,5.382,1451,5.382,1452,5.382]],["title/miscellaneous/enumerations.html",[1453,1.807,1454,4.11]],["body/miscellaneous/enumerations.html",[9,0.341,20,0.013,97,0.011,98,0.013,99,0.011,211,3.018,212,3.178,213,3.178,481,3.335,515,3.018,516,3.018,526,3.178,537,4.124,626,4.766,1453,3.354,1454,5.301,1455,5.301,1456,6.114]],["title/miscellaneous/functions.html",[1453,1.807,1457,4.11]],["body/miscellaneous/functions.html",[9,0.348,20,0.013,97,0.012,98,0.013,99,0.012,106,3.735,1420,5.419,1453,3.429,1457,5.419,1458,6.25]],["title/interfaces/generalUserInfo.html",[524,0.668,1251,2.438]],["body/interfaces/generalUserInfo.html",[3,0.172,4,0.172,5,0.134,9,0.253,20,0.015,25,0.937,26,0.587,40,0.786,61,0.249,97,0.008,98,0.011,99,0.008,149,1.692,184,2.399,187,1.511,189,2.319,191,2.319,193,3.616,303,2.531,308,3.817,407,2.81,477,1.088,478,2.305,479,4.192,480,2.81,481,3.39,482,2.399,483,4.192,524,1.113,525,1.639,534,2.83,1220,3.008,1221,3.008,1248,2.641,1249,3.245,1250,2.81,1251,3.656]],["title/index.html",[9,0.184,1459,3.293,1460,3.293]],["body/index.html",[20,0.015,97,0.011,98,0.013,99,0.011,545,2.458,1461,7.019,1462,6,1463,6,1464,6,1465,6,1466,6,1467,6,1468,6,1469,6,1470,6,1471,6,1472,6,1473,7.019,1474,6,1475,6,1476,6]],["title/interfaces/jwtPayload.html",[422,2.438,524,0.668]],["body/interfaces/jwtPayload.html",[3,0.2,4,0.2,5,0.155,9,0.294,20,0.015,25,0.954,26,0.583,40,0.771,61,0.246,97,0.01,98,0.012,99,0.01,149,1.711,187,2.442,189,2.067,191,2.067,303,2.78,315,3.762,347,3.258,351,3.817,422,4.015,435,5.725,438,5.725,445,4.107,477,1.195,524,1.1,525,1.9,1402,4.107]],["title/interfaces/jwtToken.html",[347,2.438,524,0.668]],["body/interfaces/jwtToken.html",[3,0.211,4,0.211,5,0.164,9,0.31,20,0.015,25,0.723,26,0.503,40,0.771,61,0.255,97,0.01,98,0.013,99,0.01,149,1.354,187,1.852,189,2.185,191,2.185,315,5.345,347,4.153,351,2.894,422,3.444,435,4.341,438,4.341,445,5.835,477,1.236,524,1.138,525,2.009,1402,4.341]],["title/classes/lobbyCodeDto.html",[62,0.068,918,2.163]],["body/classes/lobbyCodeDto.html",[3,0.197,4,0.197,5,0.153,9,0.29,19,1.534,20,0.015,22,0.918,26,0.389,40,0.731,46,0.389,61,0.277,62,0.13,95,2.565,97,0.01,98,0.012,99,0.01,159,1.691,216,1.079,421,2.565,475,1.799,477,1.185,502,2.828,507,2.878,510,1.66,538,2.038,651,2.442,656,2.7,875,3.019,880,3.019,897,2.85,898,2.85,906,2.7,917,4.324,918,3.531,1213,3.71,1382,3.439,1388,4.596,1389,4.596,1477,5.195]],["title/classes/lobbyIdDto.html",[62,0.068,897,2.163]],["body/classes/lobbyIdDto.html",[3,0.197,4,0.197,5,0.153,9,0.29,19,1.534,20,0.015,22,0.918,26,0.389,40,0.731,46,0.389,61,0.277,62,0.13,95,2.565,97,0.01,98,0.012,99,0.01,159,1.691,216,1.079,421,2.565,475,1.799,477,1.185,502,2.828,507,2.878,510,1.66,538,2.038,651,2.442,656,2.7,875,4.064,880,3.019,897,3.531,898,2.85,906,2.7,917,3.213,918,2.85,1213,3.71,1382,3.439,1388,4.596,1389,4.596,1478,5.195]],["title/modules.html",[102,2.654]],["body/modules.html",[20,0.013,97,0.011,98,0.013,99,0.011,101,3.838,102,2.862,113,3.014,114,3.014,281,4.141,285,3.838,286,3.838,287,3.838,1479,7.935,1480,7.935,1481,7.935,1482,7.935]],["title/overview.html",[1483,4.662]],["body/overview.html",[2,1.619,20,0.015,54,4.547,97,0.008,98,0.01,99,0.008,100,1.619,101,5.065,102,2.037,103,1.939,104,2.264,105,2.264,106,2.037,107,2.264,108,2.264,109,3.578,110,3.578,111,3.578,112,3.578,113,3.977,114,4.066,115,3.043,116,2.264,117,2.145,131,1.767,242,3.874,281,5.666,282,3.578,283,3.578,284,3.578,285,5.178,286,5.012,287,4.626,338,3.641,345,3.351,373,3.578,374,3.578,376,4.147,377,4.147,475,1.429,525,1.489,661,4.274,668,3.821,738,2.731,751,3.578,752,3.578,753,3.578,937,3.874,970,3.578,972,3.578,1108,3.874,1125,3.578,1126,3.578,1180,3.217,1313,3.578,1314,3.578,1315,3.578,1483,3.578,1484,5.546,1485,4.126,1486,4.126,1487,4.126]],["title/classes/propsSearchDto.html",[62,0.068,604,1.946]],["body/classes/propsSearchDto.html",[3,0.11,4,0.11,5,0.086,9,0.162,20,0.015,22,1.363,25,0.67,26,0.584,40,0.777,46,0.345,58,0.965,61,0.196,62,0.099,64,2.724,77,2.15,97,0.005,98,0.008,99,0.005,149,1.915,157,0.705,159,1.135,277,1.437,309,2.132,393,3.164,421,1.432,475,1.005,477,0.795,478,1.38,482,1.437,489,1.794,490,1.794,502,2.771,503,3,504,1.794,507,2.771,510,0.927,514,3.181,519,1.138,520,1.794,524,0.732,527,1.242,528,2.114,533,1.3,535,1.496,536,1.091,539,1.77,540,1.695,544,2.243,545,2.342,547,1.242,548,2.243,549,2.243,550,2.243,551,2.243,552,2.243,553,1.3,554,1.3,556,1.936,557,1.936,561,1.85,577,1.508,578,1.794,579,1.794,580,1.92,598,1.592,599,2.859,600,1.686,601,1.592,602,1.92,603,1.92,604,2.132,605,3.192,606,1.794,607,1.794,608,3,609,3.192,610,3,611,3,612,1.794,613,3.536,614,1.592,615,1.794,616,3.323,617,3.137,618,3,619,2.832,620,3,621,3,622,3,623,3,624,3,1488,2.901,1489,2.901,1490,2.901,1491,2.901,1492,2.901,1493,2.901,1494,2.901,1495,2.901,1496,2.901,1497,2.901,1498,2.901,1499,2.901,1500,2.901,1501,2.901,1502,2.901,1503,2.901,1504,2.901,1505,2.901,1506,2.901,1507,2.901]],["title/classes/propsSearchDto-1.html",[62,0.057,604,1.626,738,2.18]],["body/classes/propsSearchDto-1.html",[3,0.141,4,0.141,5,0.109,9,0.207,20,0.015,22,1.408,26,0.597,40,0.769,46,0.224,61,0.141,62,0.089,77,2.409,97,0.007,98,0.01,99,0.007,149,1.903,157,0.902,309,2.318,393,3.441,475,1.285,477,0.95,510,1.186,535,1.285,544,2.326,548,2.326,549,2.326,550,2.326,551,2.326,552,2.326,604,2.546,605,3.666,606,2.295,607,2.295,608,3.446,609,3.666,610,3.446,611,3.446,612,2.295,613,3.962,614,2.036,615,2.295,616,3.724,617,3.515,618,3.446,619,3.253,620,3.446,621,3.446,622,3.446,623,3.446,624,3.446,1414,3.218,1508,5.928,1509,3.711,1510,3.711,1511,3.711,1512,3.711,1513,3.711,1514,3.711,1515,3.711,1516,3.711,1517,3.711,1518,3.711,1519,3.711,1520,3.711,1521,3.711,1522,3.711,1523,3.711,1524,3.711,1525,3.711,1526,3.711,1527,3.711,1528,3.711,1529,3.711]],["title/classes/reviewCodeDto.html",[62,0.068,1088,2.291]],["body/classes/reviewCodeDto.html",[3,0.198,4,0.198,5,0.154,9,0.29,19,1.538,20,0.015,22,0.92,26,0.39,40,0.718,46,0.389,58,1.732,61,0.266,62,0.126,97,0.01,98,0.012,99,0.01,149,1.266,157,1.266,216,1.082,277,1.732,475,1.803,477,1.187,502,2.829,507,2.75,510,1.664,514,3.516,598,2.857,1070,3.22,1071,3.22,1073,3.026,1074,3.026,1075,3.719,1084,4.266,1085,5.024,1086,3.447,1087,4.059,1088,3.746,1089,4.633,1090,3.026,1530,5.207,1531,5.207]],["title/miscellaneous/typealiases.html",[1453,1.807,1532,4.74]],["body/miscellaneous/typealiases.html",[9,0.348,20,0.013,26,0.468,97,0.012,98,0.013,99,0.012,159,1.889,1219,4.464,1453,3.429,1533,6.25,1534,5.419]],["title/miscellaneous/variables.html",[1453,1.807,1535,4.11]],["body/miscellaneous/variables.html",[5,0.114,9,0.216,20,0.016,25,0.746,26,0.609,40,0.755,71,1.727,79,0.836,82,1.106,95,1.914,97,0.005,98,0.007,99,0.005,123,2.768,149,1.717,157,0.942,180,1.664,182,1.664,184,1.768,186,1.664,187,1.289,189,0.987,191,0.987,193,1.307,195,1.664,211,1.914,212,1.307,213,2.014,216,1.193,244,3.022,245,3.022,271,2.18,277,1.768,308,1.38,309,1.289,320,2.566,343,1.796,351,2.762,385,2.566,393,1.241,395,1.96,425,3.796,426,3.022,441,2.18,476,3.378,478,0.804,481,1.822,482,0.836,515,1.914,516,1.914,517,3.022,518,2.18,519,1.856,526,1.307,527,1.66,528,1.588,529,1.462,530,1.462,531,2.014,532,1.462,533,1.127,534,1.521,535,0.871,536,0.946,538,2.627,541,2.127,542,2.458,543,3.121,544,0.987,545,1.938,546,2.458,547,1.077,548,0.987,549,0.987,550,0.987,551,0.987,552,0.987,553,1.127,554,1.127,555,2.595,556,1.127,557,1.127,558,2.498,559,1.462,560,1.462,561,1.077,562,1.462,563,4.073,571,1.914,848,2.18,871,1.96,872,2.18,873,1.796,874,1.96,876,1.96,877,1.96,878,2.768,879,2.18,880,1.462,1054,6.388,1067,1.96,1069,1.96,1070,1.555,1071,1.555,1072,2.768,1073,1.462,1219,1.796,1247,2.18,1319,1.96,1404,2.18,1405,2.18,1416,2.18,1417,4.101,1453,1.38,1455,4.609,1534,2.18,1535,2.18,1536,3.876,1537,2.515,1538,2.515,1539,3.876,1540,2.515,1541,2.515,1542,2.515,1543,2.515,1544,2.515,1545,3.876,1546,2.515,1547,2.515,1548,2.515,1549,2.515,1550,2.515,1551,2.515,1552,2.515,1553,2.515,1554,2.515,1555,2.515,1556,3.876,1557,2.515,1558,2.515,1559,2.515,1560,2.515,1561,2.515,1562,2.515,1563,3.876,1564,2.515]]],"invertedIndex":[["",{"_index":20,"title":{},"body":{"controllers/AdminController.html":{},"modules/AdminModule.html":{},"injectables/AdminService.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreateUserDto.html":{},"interfaces/Dorm.html":{},"interfaces/DormAdd.html":{},"classes/DormAddDto.html":{},"controllers/DormController.html":{},"modules/DormModule.html":{},"interfaces/DormQuery.html":{},"injectables/DormService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"interfaces/Lobby.html":{},"controllers/LobbyController.html":{},"modules/LobbyModule.html":{},"injectables/LobbyService.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"classes/LoginUserDto.html":{},"interfaces/PendingAction.html":{},"interfaces/Review.html":{},"classes/ReviewBodyDto.html":{},"controllers/ReviewController.html":{},"modules/ReviewModule.html":{},"classes/ReviewParamDto.html":{},"injectables/ReviewService.html":{},"guards/RoleGuard.html":{},"interfaces/Room.html":{},"interfaces/RoomInterface.html":{},"classes/TicketBodyDto.html":{},"classes/TicketIdDto.html":{},"classes/User.html":{},"interfaces/UserParsedDto.html":{},"interfaces/UserRegisterRes.html":{},"injectables/UserRepository.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"interfaces/Utility.html":{},"interfaces/UtilityInterface.html":{},"interfaces/UtilityInterface-1.html":{},"classes/addDorm.html":{},"classes/chatDto.html":{},"coverage.html":{},"classes/createLobbyDto.html":{},"classes/createLobbyDto-1.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"interfaces/generalUserInfo.html":{},"index.html":{},"interfaces/jwtPayload.html":{},"interfaces/jwtToken.html":{},"classes/lobbyCodeDto.html":{},"classes/lobbyIdDto.html":{},"modules.html":{},"overview.html":{},"classes/propsSearchDto.html":{},"classes/propsSearchDto-1.html":{},"classes/reviewCodeDto.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["0",{"_index":77,"title":{},"body":{"controllers/AdminController.html":{},"injectables/AdminService.html":{},"classes/DormAddDto.html":{},"controllers/DormController.html":{},"injectables/DormService.html":{},"controllers/LobbyController.html":{},"injectables/LobbyService.html":{},"controllers/ReviewController.html":{},"injectables/ReviewService.html":{},"interfaces/Room.html":{},"injectables/UsersService.html":{},"interfaces/Utility.html":{},"classes/addDorm.html":{},"coverage.html":{},"classes/propsSearchDto.html":{},"classes/propsSearchDto-1.html":{}}}],["0.1.13",{"_index":1445,"title":{},"body":{"dependencies.html":{}}}],["0.12.2",{"_index":1438,"title":{},"body":{"dependencies.html":{}}}],["0.3.1",{"_index":1437,"title":{},"body":{"dependencies.html":{}}}],["0.4.1",{"_index":1440,"title":{},"body":{"dependencies.html":{}}}],["0/1",{"_index":1398,"title":{},"body":{"coverage.html":{}}}],["0/10",{"_index":1407,"title":{},"body":{"coverage.html":{}}}],["0/11",{"_index":1410,"title":{},"body":{"coverage.html":{}}}],["0/12",{"_index":1412,"title":{},"body":{"coverage.html":{}}}],["0/13",{"_index":1418,"title":{},"body":{"coverage.html":{}}}],["0/14",{"_index":1413,"title":{},"body":{"coverage.html":{}}}],["0/16",{"_index":1408,"title":{},"body":{"coverage.html":{}}}],["0/17",{"_index":1411,"title":{},"body":{"coverage.html":{}}}],["0/2",{"_index":1395,"title":{},"body":{"coverage.html":{}}}],["0/21",{"_index":1409,"title":{},"body":{"coverage.html":{}}}],["0/22",{"_index":1415,"title":{},"body":{"coverage.html":{}}}],["0/3",{"_index":1400,"title":{},"body":{"coverage.html":{}}}],["0/4",{"_index":1406,"title":{},"body":{"coverage.html":{}}}],["0/5",{"_index":1401,"title":{},"body":{"coverage.html":{}}}],["0/6",{"_index":1394,"title":{},"body":{"coverage.html":{}}}],["0/7",{"_index":1396,"title":{},"body":{"coverage.html":{}}}],["0/8",{"_index":1403,"title":{},"body":{"coverage.html":{}}}],["0/9",{"_index":1399,"title":{},"body":{"coverage.html":{}}}],["1",{"_index":738,"title":{"interfaces/UtilityInterface-1.html":{},"classes/createLobbyDto-1.html":{},"classes/propsSearchDto-1.html":{}},"body":{"controllers/DormController.html":{},"overview.html":{}}}],["1.0.0",{"_index":1442,"title":{},"body":{"dependencies.html":{}}}],["10",{"_index":1360,"title":{},"body":{"injectables/UsersService.html":{}}}],["12",{"_index":1485,"title":{},"body":{"overview.html":{}}}],["14",{"_index":1039,"title":{},"body":{"injectables/LobbyService.html":{}}}],["15m",{"_index":444,"title":{},"body":{"injectables/AuthService.html":{}}}],["16",{"_index":1487,"title":{},"body":{"overview.html":{}}}],["16).tostring(16",{"_index":1554,"title":{},"body":{"miscellaneous/variables.html":{}}}],["17",{"_index":1486,"title":{},"body":{"overview.html":{}}}],["2.4.3",{"_index":1436,"title":{},"body":{"dependencies.html":{}}}],["20",{"_index":269,"title":{},"body":{"controllers/AppController.html":{}}}],["200",{"_index":94,"title":{},"body":{"controllers/AdminController.html":{},"controllers/LobbyController.html":{},"controllers/ReviewController.html":{}}}],["24",{"_index":1040,"title":{},"body":{"injectables/LobbyService.html":{}}}],["3",{"_index":1276,"title":{},"body":{"injectables/UserRepository.html":{}}}],["3.0.2",{"_index":1447,"title":{},"body":{"dependencies.html":{}}}],["30d",{"_index":453,"title":{},"body":{"injectables/AuthService.html":{}}}],["4.0.0",{"_index":1441,"title":{},"body":{"dependencies.html":{}}}],["4.1.4",{"_index":1452,"title":{},"body":{"dependencies.html":{}}}],["4.6.1",{"_index":1432,"title":{},"body":{"dependencies.html":{}}}],["5.10.7",{"_index":1439,"title":{},"body":{"dependencies.html":{}}}],["50",{"_index":78,"title":{},"body":{"controllers/AdminController.html":{},"controllers/DormController.html":{},"injectables/LobbyService.html":{},"controllers/ReviewController.html":{}}}],["6.5.4",{"_index":1449,"title":{},"body":{"dependencies.html":{}}}],["7",{"_index":1484,"title":{},"body":{"overview.html":{}}}],["7.0.0",{"_index":1429,"title":{},"body":{"dependencies.html":{}}}],["7.0.2",{"_index":1431,"title":{},"body":{"dependencies.html":{}}}],["7.1.0",{"_index":1430,"title":{},"body":{"dependencies.html":{}}}],["7.4.4",{"_index":1434,"title":{},"body":{"dependencies.html":{}}}],["9",{"_index":603,"title":{},"body":{"classes/DormAddDto.html":{},"interfaces/Room.html":{},"interfaces/Utility.html":{},"classes/addDorm.html":{},"classes/propsSearchDto.html":{}}}],["999999999999999999",{"_index":613,"title":{},"body":{"classes/DormAddDto.html":{},"interfaces/Room.html":{},"interfaces/Utility.html":{},"classes/addDorm.html":{},"classes/propsSearchDto.html":{},"classes/propsSearchDto-1.html":{}}}],["99999999999999999999999999999999999",{"_index":743,"title":{},"body":{"controllers/DormController.html":{}}}],["_errors",{"_index":1354,"title":{},"body":{"injectables/UsersService.html":{}}}],["_id",{"_index":224,"title":{},"body":{"injectables/AdminService.html":{},"injectables/LobbyService.html":{},"injectables/ReviewService.html":{}}}],["_offset",{"_index":175,"title":{},"body":{"injectables/AdminService.html":{},"injectables/LobbyService.html":{},"injectables/ReviewService.html":{}}}],["_stop",{"_index":176,"title":{},"body":{"injectables/AdminService.html":{},"injectables/LobbyService.html":{},"injectables/ReviewService.html":{}}}],["access",{"_index":462,"title":{},"body":{"injectables/AuthService.html":{}}}],["access_options",{"_index":440,"title":{},"body":{"injectables/AuthService.html":{}}}],["access_token",{"_index":445,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/jwtPayload.html":{},"interfaces/jwtToken.html":{}}}],["addchat",{"_index":884,"title":{},"body":{"controllers/LobbyController.html":{},"injectables/LobbyService.html":{}}}],["addchat(id",{"_index":896,"title":{},"body":{"controllers/LobbyController.html":{}}}],["addchat(lobbyid",{"_index":987,"title":{},"body":{"injectables/LobbyService.html":{}}}],["adddorm",{"_index":601,"title":{"classes/addDorm.html":{}},"body":{"classes/DormAddDto.html":{},"controllers/DormController.html":{},"interfaces/Room.html":{},"interfaces/Utility.html":{},"classes/addDorm.html":{},"coverage.html":{},"classes/propsSearchDto.html":{}}}],["adddorm(@body",{"_index":675,"title":{},"body":{"controllers/DormController.html":{}}}],["adddorm(dormdto",{"_index":635,"title":{},"body":{"controllers/DormController.html":{}}}],["address",{"_index":527,"title":{},"body":{"interfaces/Dorm.html":{},"interfaces/DormAdd.html":{},"classes/DormAddDto.html":{},"interfaces/DormQuery.html":{},"injectables/DormService.html":{},"interfaces/Room.html":{},"interfaces/RoomInterface.html":{},"interfaces/Utility.html":{},"interfaces/UtilityInterface.html":{},"interfaces/UtilityInterface-1.html":{},"classes/addDorm.html":{},"classes/propsSearchDto.html":{},"miscellaneous/variables.html":{}}}],["address.coord",{"_index":606,"title":{},"body":{"classes/DormAddDto.html":{},"interfaces/Room.html":{},"interfaces/Utility.html":{},"classes/addDorm.html":{},"classes/propsSearchDto.html":{},"classes/propsSearchDto-1.html":{}}}],["addreview",{"_index":1094,"title":{},"body":{"controllers/ReviewController.html":{},"injectables/ReviewService.html":{}}}],["addreview(@body",{"_index":1120,"title":{},"body":{"controllers/ReviewController.html":{}}}],["addreview(reviewbody",{"_index":1098,"title":{},"body":{"controllers/ReviewController.html":{},"injectables/ReviewService.html":{}}}],["addroom",{"_index":628,"title":{},"body":{"controllers/DormController.html":{},"injectables/DormService.html":{}}}],["addroom(@body('room",{"_index":687,"title":{},"body":{"controllers/DormController.html":{}}}],["addroom(roomarray",{"_index":773,"title":{},"body":{"injectables/DormService.html":{}}}],["addroom(roomlist",{"_index":640,"title":{},"body":{"controllers/DormController.html":{}}}],["addticket",{"_index":12,"title":{},"body":{"controllers/AdminController.html":{},"injectables/AdminService.html":{}}}],["addticket(@body",{"_index":81,"title":{},"body":{"controllers/AdminController.html":{}}}],["addticket(ticketbody",{"_index":17,"title":{},"body":{"controllers/AdminController.html":{},"injectables/AdminService.html":{}}}],["addutil",{"_index":629,"title":{},"body":{"controllers/DormController.html":{}}}],["addutil(@body('util",{"_index":689,"title":{},"body":{"controllers/DormController.html":{}}}],["addutil(util",{"_index":644,"title":{},"body":{"controllers/DormController.html":{}}}],["addutility",{"_index":758,"title":{},"body":{"injectables/DormService.html":{}}}],["addutility(utilityarray",{"_index":776,"title":{},"body":{"injectables/DormService.html":{}}}],["admin.controller",{"_index":122,"title":{},"body":{"modules/AdminModule.html":{}}}],["admin.dto",{"_index":56,"title":{},"body":{"controllers/AdminController.html":{},"injectables/AdminService.html":{}}}],["admin.model",{"_index":124,"title":{},"body":{"modules/AdminModule.html":{},"injectables/AdminService.html":{}}}],["admin.service",{"_index":55,"title":{},"body":{"controllers/AdminController.html":{},"modules/AdminModule.html":{}}}],["admin/admin.module",{"_index":294,"title":{},"body":{"modules/AppModule.html":{}}}],["admincontroller",{"_index":1,"title":{"controllers/AdminController.html":{}},"body":{"controllers/AdminController.html":{},"modules/AdminModule.html":{},"coverage.html":{}}}],["adminmodule",{"_index":101,"title":{"modules/AdminModule.html":{}},"body":{"modules/AdminModule.html":{},"modules/AppModule.html":{},"modules.html":{},"overview.html":{}}}],["adminservice",{"_index":54,"title":{"injectables/AdminService.html":{}},"body":{"controllers/AdminController.html":{},"modules/AdminModule.html":{},"injectables/AdminService.html":{},"coverage.html":{},"overview.html":{}}}],["aircond",{"_index":549,"title":{},"body":{"interfaces/Dorm.html":{},"interfaces/DormAdd.html":{},"classes/DormAddDto.html":{},"controllers/DormController.html":{},"interfaces/DormQuery.html":{},"injectables/DormService.html":{},"interfaces/Room.html":{},"interfaces/RoomInterface.html":{},"interfaces/Utility.html":{},"interfaces/UtilityInterface.html":{},"interfaces/UtilityInterface-1.html":{},"classes/addDorm.html":{},"classes/propsSearchDto.html":{},"classes/propsSearchDto-1.html":{},"miscellaneous/variables.html":{}}}],["aliases",{"_index":1533,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["allowed",{"_index":1561,"title":{},"body":{"miscellaneous/variables.html":{}}}],["allowedsex",{"_index":528,"title":{},"body":{"interfaces/Dorm.html":{},"interfaces/DormAdd.html":{},"classes/DormAddDto.html":{},"controllers/DormController.html":{},"interfaces/DormQuery.html":{},"injectables/DormService.html":{},"interfaces/Room.html":{},"interfaces/RoomInterface.html":{},"interfaces/Utility.html":{},"interfaces/UtilityInterface.html":{},"interfaces/UtilityInterface-1.html":{},"classes/addDorm.html":{},"classes/propsSearchDto.html":{},"miscellaneous/variables.html":{}}}],["allowedusertype",{"_index":517,"title":{},"body":{"classes/CreateUserDto.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["amount",{"_index":553,"title":{},"body":{"interfaces/Dorm.html":{},"interfaces/DormAdd.html":{},"classes/DormAddDto.html":{},"interfaces/DormQuery.html":{},"interfaces/Room.html":{},"interfaces/RoomInterface.html":{},"interfaces/Utility.html":{},"interfaces/UtilityInterface.html":{},"interfaces/UtilityInterface-1.html":{},"classes/addDorm.html":{},"classes/propsSearchDto.html":{},"miscellaneous/variables.html":{}}}],["apibearerauth",{"_index":353,"title":{},"body":{"controllers/AuthController.html":{}}}],["apioauth2",{"_index":354,"title":{},"body":{"controllers/AuthController.html":{},"controllers/UsersController.html":{}}}],["apiproperty",{"_index":514,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/DormAddDto.html":{},"classes/LoginUserDto.html":{},"classes/ReviewBodyDto.html":{},"classes/ReviewParamDto.html":{},"interfaces/Room.html":{},"classes/TicketBodyDto.html":{},"classes/TicketIdDto.html":{},"interfaces/Utility.html":{},"classes/addDorm.html":{},"classes/propsSearchDto.html":{},"classes/reviewCodeDto.html":{}}}],["apiproperty()@expose",{"_index":493,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["apiproperty()@isemail",{"_index":1371,"title":{},"body":{"classes/addDorm.html":{}}}],["apiproperty()@isin(sex)@expose",{"_index":497,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["apiproperty()@isnotempty",{"_index":1368,"title":{},"body":{"classes/addDorm.html":{}}}],["apiproperty()@isnotempty()@expose",{"_index":495,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["apiproperty()@isnotempty()@expose()@isin(allowedusertype",{"_index":500,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["apiproperty()@isnotempty()@expose()@isin(undefined",{"_index":486,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["apiproperty()@isnotempty()@isemail()@expose",{"_index":484,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["apiproperty()@isnotempty()@isstring()@expose()@matches(/[a",{"_index":488,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["apiproperty()@isnotempty()@isstring()@matches(/[0",{"_index":1377,"title":{},"body":{"classes/addDorm.html":{}}}],["apiproperty()@isnotempty()@matches(/[a",{"_index":1375,"title":{},"body":{"classes/addDorm.html":{}}}],["apiproperty()@isstring",{"_index":1373,"title":{},"body":{"classes/addDorm.html":{}}}],["apiproperty()@isurl",{"_index":1380,"title":{},"body":{"classes/addDorm.html":{}}}],["apitags",{"_index":57,"title":{},"body":{"controllers/AdminController.html":{},"controllers/AuthController.html":{},"controllers/DormController.html":{},"controllers/LobbyController.html":{},"controllers/ReviewController.html":{},"controllers/UsersController.html":{}}}],["apitags('admin",{"_index":60,"title":{},"body":{"controllers/AdminController.html":{}}}],["apitags('authentication",{"_index":355,"title":{},"body":{"controllers/AuthController.html":{}}}],["apitags('dorms",{"_index":671,"title":{},"body":{"controllers/DormController.html":{}}}],["apitags('lobby",{"_index":941,"title":{},"body":{"controllers/LobbyController.html":{}}}],["apitags('reviews",{"_index":1112,"title":{},"body":{"controllers/ReviewController.html":{}}}],["apitags('users",{"_index":1298,"title":{},"body":{"controllers/UsersController.html":{}}}],["app.controller",{"_index":289,"title":{},"body":{"modules/AppModule.html":{}}}],["app.service",{"_index":243,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{}}}],["appcontroller",{"_index":227,"title":{"controllers/AppController.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"coverage.html":{}}}],["appmodule",{"_index":281,"title":{"modules/AppModule.html":{}},"body":{"modules/AppModule.html":{},"modules.html":{},"overview.html":{}}}],["approval",{"_index":537,"title":{},"body":{"interfaces/Dorm.html":{},"interfaces/DormAdd.html":{},"interfaces/DormQuery.html":{},"interfaces/RoomInterface.html":{},"interfaces/UtilityInterface.html":{},"interfaces/UtilityInterface-1.html":{},"miscellaneous/enumerations.html":{}}}],["approved",{"_index":213,"title":{},"body":{"injectables/AdminService.html":{},"interfaces/Dorm.html":{},"interfaces/DormAdd.html":{},"interfaces/DormQuery.html":{},"interfaces/RoomInterface.html":{},"interfaces/UtilityInterface.html":{},"interfaces/UtilityInterface-1.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["approvedon",{"_index":529,"title":{},"body":{"interfaces/Dorm.html":{},"interfaces/DormAdd.html":{},"interfaces/DormQuery.html":{},"interfaces/RoomInterface.html":{},"interfaces/UtilityInterface.html":{},"interfaces/UtilityInterface-1.html":{},"miscellaneous/variables.html":{}}}],["appservice",{"_index":242,"title":{"injectables/AppService.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"coverage.html":{},"overview.html":{}}}],["arr",{"_index":798,"title":{},"body":{"injectables/DormService.html":{}}}],["arr.push",{"_index":832,"title":{},"body":{"injectables/DormService.html":{}}}],["array",{"_index":575,"title":{},"body":{"interfaces/Dorm.html":{},"interfaces/DormAdd.html":{},"interfaces/DormQuery.html":{},"injectables/DormService.html":{},"interfaces/RoomInterface.html":{},"interfaces/UtilityInterface.html":{},"interfaces/UtilityInterface-1.html":{}}}],["array(4",{"_index":1550,"title":{},"body":{"miscellaneous/variables.html":{}}}],["async",{"_index":11,"title":{},"body":{"controllers/AdminController.html":{},"injectables/AdminService.html":{},"controllers/AppController.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/DormController.html":{},"injectables/DormService.html":{},"injectables/JwtStrategy.html":{},"controllers/LobbyController.html":{},"injectables/LobbyService.html":{},"injectables/LocalStrategy.html":{},"controllers/ReviewController.html":{},"injectables/ReviewService.html":{},"injectables/UserRepository.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["auth.controller",{"_index":382,"title":{},"body":{"modules/AuthModule.html":{}}}],["auth.guard",{"_index":337,"title":{},"body":{"controllers/AuthController.html":{},"controllers/DormController.html":{},"controllers/LobbyController.html":{},"controllers/UsersController.html":{}}}],["auth.guard.ts",{"_index":852,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"injectables/LocalAuthGuard.html":{},"coverage.html":{}}}],["auth.interface",{"_index":348,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{}}}],["auth.service",{"_index":339,"title":{},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/LocalStrategy.html":{}}}],["auth/auth.module",{"_index":290,"title":{},"body":{"modules/AppModule.html":{}}}],["authcontroller",{"_index":310,"title":{"controllers/AuthController.html":{}},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"coverage.html":{}}}],["authguard",{"_index":853,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"injectables/LocalAuthGuard.html":{}}}],["authguard('jwt",{"_index":854,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["authguard('local",{"_index":1047,"title":{},"body":{"injectables/LocalAuthGuard.html":{}}}],["authmodule",{"_index":285,"title":{"modules/AuthModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules.html":{},"overview.html":{}}}],["authserv",{"_index":357,"title":{},"body":{"controllers/AuthController.html":{}}}],["authservice",{"_index":338,"title":{"injectables/AuthService.html":{}},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/LocalStrategy.html":{},"coverage.html":{},"overview.html":{}}}],["avatar",{"_index":435,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/jwtPayload.html":{},"interfaces/jwtToken.html":{}}}],["avgstar",{"_index":530,"title":{},"body":{"interfaces/Dorm.html":{},"interfaces/DormAdd.html":{},"interfaces/DormQuery.html":{},"interfaces/RoomInterface.html":{},"interfaces/UtilityInterface.html":{},"interfaces/UtilityInterface-1.html":{},"miscellaneous/variables.html":{}}}],["await",{"_index":84,"title":{},"body":{"controllers/AdminController.html":{},"injectables/AdminService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/DormController.html":{},"injectables/DormService.html":{},"controllers/LobbyController.html":{},"injectables/LobbyService.html":{},"injectables/LocalStrategy.html":{},"controllers/ReviewController.html":{},"injectables/ReviewService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["backend",{"_index":1462,"title":{},"body":{"index.html":{}}}],["badrequestexception",{"_index":47,"title":{},"body":{"controllers/AdminController.html":{},"injectables/AdminService.html":{},"controllers/DormController.html":{},"controllers/LobbyController.html":{},"injectables/LobbyService.html":{},"controllers/ReviewController.html":{}}}],["badrequestexception('dormid",{"_index":945,"title":{},"body":{"controllers/LobbyController.html":{}}}],["badrequestexception('offset",{"_index":72,"title":{},"body":{"controllers/AdminController.html":{},"controllers/DormController.html":{},"injectables/LobbyService.html":{},"controllers/ReviewController.html":{}}}],["badrequestexception('only",{"_index":955,"title":{},"body":{"controllers/LobbyController.html":{}}}],["badrequestexception('stop",{"_index":76,"title":{},"body":{"controllers/AdminController.html":{},"controllers/DormController.html":{},"injectables/LobbyService.html":{},"controllers/ReviewController.html":{}}}],["badrequestexception('type",{"_index":221,"title":{},"body":{"injectables/AdminService.html":{}}}],["badrequestexception('userid",{"_index":1118,"title":{},"body":{"controllers/ReviewController.html":{}}}],["bash",{"_index":1473,"title":{},"body":{"index.html":{}}}],["bathroom",{"_index":548,"title":{},"body":{"interfaces/Dorm.html":{},"interfaces/DormAdd.html":{},"classes/DormAddDto.html":{},"controllers/DormController.html":{},"interfaces/DormQuery.html":{},"injectables/DormService.html":{},"interfaces/Room.html":{},"interfaces/RoomInterface.html":{},"interfaces/Utility.html":{},"interfaces/UtilityInterface.html":{},"interfaces/UtilityInterface-1.html":{},"classes/addDorm.html":{},"classes/propsSearchDto.html":{},"classes/propsSearchDto-1.html":{},"miscellaneous/variables.html":{}}}],["bcrypt",{"_index":425,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UsersService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["bcrypt.compare(password",{"_index":430,"title":{},"body":{"injectables/AuthService.html":{}}}],["bcrypt.hash(dto.password",{"_index":1359,"title":{},"body":{"injectables/UsersService.html":{}}}],["bcryptjs",{"_index":1435,"title":{},"body":{"dependencies.html":{}}}],["bearer",{"_index":439,"title":{},"body":{"injectables/AuthService.html":{}}}],["bedroom",{"_index":551,"title":{},"body":{"interfaces/Dorm.html":{},"interfaces/DormAdd.html":{},"classes/DormAddDto.html":{},"controllers/DormController.html":{},"interfaces/DormQuery.html":{},"injectables/DormService.html":{},"interfaces/Room.html":{},"interfaces/RoomInterface.html":{},"interfaces/Utility.html":{},"interfaces/UtilityInterface.html":{},"interfaces/UtilityInterface-1.html":{},"classes/addDorm.html":{},"classes/propsSearchDto.html":{},"classes/propsSearchDto-1.html":{},"miscellaneous/variables.html":{}}}],["before",{"_index":1357,"title":{},"body":{"injectables/UsersService.html":{}}}],["blacklist",{"_index":872,"title":{},"body":{"interfaces/Lobby.html":{},"miscellaneous/variables.html":{}}}],["body",{"_index":48,"title":{},"body":{"controllers/AdminController.html":{},"controllers/AuthController.html":{},"controllers/DormController.html":{},"controllers/LobbyController.html":{},"controllers/ReviewController.html":{},"controllers/UsersController.html":{}}}],["body('message",{"_index":961,"title":{},"body":{"controllers/LobbyController.html":{}}}],["boolean",{"_index":308,"title":{},"body":{"injectables/AppService.html":{},"interfaces/Lobby.html":{},"guards/RoleGuard.html":{},"classes/User.html":{},"interfaces/UserParsedDto.html":{},"interfaces/UserRegisterRes.html":{},"interfaces/generalUserInfo.html":{},"miscellaneous/variables.html":{}}}],["bootstrap",{"_index":106,"title":{},"body":{"modules/AdminModule.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/DormModule.html":{},"modules/LobbyModule.html":{},"modules/ReviewModule.html":{},"modules/UsersModule.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"overview.html":{}}}],["browse",{"_index":1482,"title":{},"body":{"modules.html":{}}}],["browser",{"_index":1479,"title":{},"body":{"modules.html":{}}}],["callback",{"_index":1545,"title":{},"body":{"miscellaneous/variables.html":{}}}],["callback(new",{"_index":1559,"title":{},"body":{"miscellaneous/variables.html":{}}}],["callback(null",{"_index":1556,"title":{},"body":{"miscellaneous/variables.html":{}}}],["canactivate",{"_index":1183,"title":{},"body":{"guards/RoleGuard.html":{}}}],["canactivate(context",{"_index":1188,"title":{},"body":{"guards/RoleGuard.html":{}}}],["capacity",{"_index":547,"title":{},"body":{"interfaces/Dorm.html":{},"interfaces/DormAdd.html":{},"classes/DormAddDto.html":{},"interfaces/DormQuery.html":{},"injectables/DormService.html":{},"interfaces/Room.html":{},"interfaces/RoomInterface.html":{},"interfaces/Utility.html":{},"interfaces/UtilityInterface.html":{},"interfaces/UtilityInterface-1.html":{},"classes/addDorm.html":{},"classes/propsSearchDto.html":{},"miscellaneous/variables.html":{}}}],["catch",{"_index":171,"title":{},"body":{"injectables/AdminService.html":{},"injectables/DormService.html":{},"injectables/LobbyService.html":{},"injectables/ReviewService.html":{}}}],["change",{"_index":570,"title":{},"body":{"interfaces/Dorm.html":{},"interfaces/DormAdd.html":{},"interfaces/DormQuery.html":{},"interfaces/RoomInterface.html":{},"interfaces/UtilityInterface.html":{},"interfaces/UtilityInterface-1.html":{}}}],["changestatus",{"_index":13,"title":{},"body":{"controllers/AdminController.html":{},"injectables/AdminService.html":{}}}],["changestatus(@param",{"_index":89,"title":{},"body":{"controllers/AdminController.html":{}}}],["changestatus(ticketid",{"_index":30,"title":{},"body":{"controllers/AdminController.html":{},"injectables/AdminService.html":{}}}],["chat",{"_index":873,"title":{},"body":{"interfaces/Lobby.html":{},"controllers/LobbyController.html":{},"injectables/LobbyService.html":{},"miscellaneous/variables.html":{}}}],["chatdto",{"_index":898,"title":{"classes/chatDto.html":{}},"body":{"controllers/LobbyController.html":{},"injectables/LobbyService.html":{},"classes/chatDto.html":{},"coverage.html":{},"classes/createLobbyDto.html":{},"classes/lobbyCodeDto.html":{},"classes/lobbyIdDto.html":{}}}],["checkvalidtoken",{"_index":396,"title":{},"body":{"injectables/AuthService.html":{}}}],["checkvalidtoken(refreshtoken",{"_index":405,"title":{},"body":{"injectables/AuthService.html":{}}}],["class",{"_index":62,"title":{"classes/CreateUserDto.html":{},"classes/DormAddDto.html":{},"classes/LoginUserDto.html":{},"classes/ReviewBodyDto.html":{},"classes/ReviewParamDto.html":{},"classes/TicketBodyDto.html":{},"classes/TicketIdDto.html":{},"classes/User.html":{},"classes/addDorm.html":{},"classes/chatDto.html":{},"classes/createLobbyDto.html":{},"classes/createLobbyDto-1.html":{},"classes/lobbyCodeDto.html":{},"classes/lobbyIdDto.html":{},"classes/propsSearchDto.html":{},"classes/propsSearchDto-1.html":{},"classes/reviewCodeDto.html":{}},"body":{"controllers/AdminController.html":{},"modules/AdminModule.html":{},"injectables/AdminService.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreateUserDto.html":{},"classes/DormAddDto.html":{},"controllers/DormController.html":{},"modules/DormModule.html":{},"injectables/DormService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"controllers/LobbyController.html":{},"modules/LobbyModule.html":{},"injectables/LobbyService.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"classes/LoginUserDto.html":{},"classes/ReviewBodyDto.html":{},"controllers/ReviewController.html":{},"modules/ReviewModule.html":{},"classes/ReviewParamDto.html":{},"injectables/ReviewService.html":{},"guards/RoleGuard.html":{},"interfaces/Room.html":{},"classes/TicketBodyDto.html":{},"classes/TicketIdDto.html":{},"classes/User.html":{},"injectables/UserRepository.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"interfaces/Utility.html":{},"classes/addDorm.html":{},"classes/chatDto.html":{},"coverage.html":{},"classes/createLobbyDto.html":{},"classes/createLobbyDto-1.html":{},"dependencies.html":{},"classes/lobbyCodeDto.html":{},"classes/lobbyIdDto.html":{},"classes/propsSearchDto.html":{},"classes/propsSearchDto-1.html":{},"classes/reviewCodeDto.html":{}}}],["classes",{"_index":475,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/DormAddDto.html":{},"classes/LoginUserDto.html":{},"classes/ReviewBodyDto.html":{},"classes/ReviewParamDto.html":{},"classes/TicketBodyDto.html":{},"classes/TicketIdDto.html":{},"classes/User.html":{},"classes/addDorm.html":{},"classes/chatDto.html":{},"classes/createLobbyDto.html":{},"classes/createLobbyDto-1.html":{},"classes/lobbyCodeDto.html":{},"classes/lobbyIdDto.html":{},"overview.html":{},"classes/propsSearchDto.html":{},"classes/propsSearchDto-1.html":{},"classes/reviewCodeDto.html":{}}}],["clone",{"_index":1467,"title":{},"body":{"index.html":{}}}],["closelobby",{"_index":885,"title":{},"body":{"controllers/LobbyController.html":{}}}],["closelobby(@param",{"_index":968,"title":{},"body":{"controllers/LobbyController.html":{}}}],["closelobby(id",{"_index":901,"title":{},"body":{"controllers/LobbyController.html":{}}}],["cluster_adminmodule",{"_index":109,"title":{},"body":{"modules/AdminModule.html":{},"overview.html":{}}}],["cluster_adminmodule_exports",{"_index":110,"title":{},"body":{"modules/AdminModule.html":{},"overview.html":{}}}],["cluster_adminmodule_imports",{"_index":111,"title":{},"body":{"modules/AdminModule.html":{},"overview.html":{}}}],["cluster_adminmodule_providers",{"_index":112,"title":{},"body":{"modules/AdminModule.html":{},"overview.html":{}}}],["cluster_appmodule",{"_index":282,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_imports",{"_index":283,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_providers",{"_index":284,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_authmodule",{"_index":373,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_authmodule_imports",{"_index":375,"title":{},"body":{"modules/AuthModule.html":{}}}],["cluster_authmodule_providers",{"_index":374,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_dormmodule",{"_index":751,"title":{},"body":{"modules/DormModule.html":{},"overview.html":{}}}],["cluster_dormmodule_exports",{"_index":753,"title":{},"body":{"modules/DormModule.html":{},"overview.html":{}}}],["cluster_dormmodule_imports",{"_index":754,"title":{},"body":{"modules/DormModule.html":{}}}],["cluster_dormmodule_providers",{"_index":752,"title":{},"body":{"modules/DormModule.html":{},"overview.html":{}}}],["cluster_lobbymodule",{"_index":970,"title":{},"body":{"modules/LobbyModule.html":{},"overview.html":{}}}],["cluster_lobbymodule_imports",{"_index":971,"title":{},"body":{"modules/LobbyModule.html":{}}}],["cluster_lobbymodule_providers",{"_index":972,"title":{},"body":{"modules/LobbyModule.html":{},"overview.html":{}}}],["cluster_reviewmodule",{"_index":1125,"title":{},"body":{"modules/ReviewModule.html":{},"overview.html":{}}}],["cluster_reviewmodule_providers",{"_index":1126,"title":{},"body":{"modules/ReviewModule.html":{},"overview.html":{}}}],["cluster_usersmodule",{"_index":1313,"title":{},"body":{"modules/UsersModule.html":{},"overview.html":{}}}],["cluster_usersmodule_exports",{"_index":1314,"title":{},"body":{"modules/UsersModule.html":{},"overview.html":{}}}],["cluster_usersmodule_providers",{"_index":1315,"title":{},"body":{"modules/UsersModule.html":{},"overview.html":{}}}],["code",{"_index":531,"title":{},"body":{"interfaces/Dorm.html":{},"interfaces/DormAdd.html":{},"interfaces/DormQuery.html":{},"interfaces/Lobby.html":{},"injectables/LobbyService.html":{},"interfaces/RoomInterface.html":{},"interfaces/UtilityInterface.html":{},"interfaces/UtilityInterface-1.html":{},"miscellaneous/variables.html":{}}}],["comment",{"_index":1070,"title":{},"body":{"interfaces/Review.html":{},"classes/ReviewBodyDto.html":{},"classes/ReviewParamDto.html":{},"injectables/ReviewService.html":{},"classes/reviewCodeDto.html":{},"miscellaneous/variables.html":{}}}],["console.log(dorms",{"_index":834,"title":{},"body":{"injectables/DormService.html":{}}}],["console.log(file",{"_index":254,"title":{},"body":{"controllers/AppController.html":{}}}],["console.log(mysearch",{"_index":850,"title":{},"body":{"injectables/DormService.html":{}}}],["console.log(myutil",{"_index":849,"title":{},"body":{"injectables/DormService.html":{}}}],["console.log(roomid",{"_index":698,"title":{},"body":{"controllers/DormController.html":{}}}],["console.log(utilssearch",{"_index":749,"title":{},"body":{"controllers/DormController.html":{}}}],["const",{"_index":82,"title":{},"body":{"controllers/AdminController.html":{},"injectables/AdminService.html":{},"controllers/AppController.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/CreateUserDto.html":{},"interfaces/Dorm.html":{},"interfaces/DormAdd.html":{},"controllers/DormController.html":{},"interfaces/DormQuery.html":{},"injectables/DormService.html":{},"interfaces/Lobby.html":{},"controllers/LobbyController.html":{},"injectables/LobbyService.html":{},"injectables/LocalStrategy.html":{},"interfaces/PendingAction.html":{},"interfaces/Review.html":{},"controllers/ReviewController.html":{},"injectables/ReviewService.html":{},"guards/RoleGuard.html":{},"interfaces/RoomInterface.html":{},"classes/User.html":{},"injectables/UserRepository.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"interfaces/UtilityInterface.html":{},"interfaces/UtilityInterface-1.html":{},"miscellaneous/variables.html":{}}}],["constants",{"_index":386,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{}}}],["constructor",{"_index":135,"title":{},"body":{"injectables/AdminService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/DormController.html":{},"injectables/DormService.html":{},"injectables/JwtStrategy.html":{},"injectables/LobbyService.html":{},"injectables/LocalStrategy.html":{},"injectables/ReviewService.html":{},"guards/RoleGuard.html":{},"injectables/UserRepository.html":{},"injectables/UsersService.html":{}}}],["constructor(@injectmodel(user.name",{"_index":1269,"title":{},"body":{"injectables/UserRepository.html":{}}}],["constructor(authservice",{"_index":1050,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["constructor(dormmodel",{"_index":769,"title":{},"body":{"injectables/DormService.html":{}}}],["constructor(lobbymodel",{"_index":983,"title":{},"body":{"injectables/LobbyService.html":{}}}],["constructor(pendingactionmodel",{"_index":136,"title":{},"body":{"injectables/AdminService.html":{}}}],["constructor(private",{"_index":63,"title":{},"body":{"controllers/AdminController.html":{},"controllers/AppController.html":{},"controllers/LobbyController.html":{},"injectables/LocalStrategy.html":{},"controllers/ReviewController.html":{},"guards/RoleGuard.html":{},"controllers/UsersController.html":{}}}],["constructor(reflector",{"_index":1185,"title":{},"body":{"guards/RoleGuard.html":{}}}],["constructor(reviewmodel",{"_index":1137,"title":{},"body":{"injectables/ReviewService.html":{}}}],["constructor(usermodel",{"_index":1256,"title":{},"body":{"injectables/UserRepository.html":{}}}],["constructor(userrepo",{"_index":1321,"title":{},"body":{"injectables/UsersService.html":{}}}],["constructor(userserv",{"_index":401,"title":{},"body":{"injectables/AuthService.html":{}}}],["contact",{"_index":532,"title":{},"body":{"interfaces/Dorm.html":{},"interfaces/DormAdd.html":{},"interfaces/DormQuery.html":{},"interfaces/RoomInterface.html":{},"interfaces/UtilityInterface.html":{},"interfaces/UtilityInterface-1.html":{},"miscellaneous/variables.html":{}}}],["contactschema",{"_index":555,"title":{},"body":{"interfaces/Dorm.html":{},"interfaces/DormAdd.html":{},"interfaces/DormQuery.html":{},"interfaces/RoomInterface.html":{},"interfaces/UtilityInterface.html":{},"interfaces/UtilityInterface-1.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["context",{"_index":1191,"title":{},"body":{"guards/RoleGuard.html":{}}}],["context.gethandler",{"_index":1201,"title":{},"body":{"guards/RoleGuard.html":{}}}],["context.switchtohttp().getrequest",{"_index":1202,"title":{},"body":{"guards/RoleGuard.html":{}}}],["controller",{"_index":0,"title":{"controllers/AdminController.html":{},"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/DormController.html":{},"controllers/LobbyController.html":{},"controllers/ReviewController.html":{},"controllers/UsersController.html":{}},"body":{"controllers/AdminController.html":{},"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/DormController.html":{},"controllers/LobbyController.html":{},"controllers/ReviewController.html":{},"controllers/UsersController.html":{},"coverage.html":{}}}],["controller('/dorms",{"_index":670,"title":{},"body":{"controllers/DormController.html":{}}}],["controller('/lobbies",{"_index":940,"title":{},"body":{"controllers/LobbyController.html":{}}}],["controller('/reviews",{"_index":1111,"title":{},"body":{"controllers/ReviewController.html":{}}}],["controller('/tickets",{"_index":59,"title":{},"body":{"controllers/AdminController.html":{}}}],["controller('oauth",{"_index":356,"title":{},"body":{"controllers/AuthController.html":{}}}],["controller('users",{"_index":1297,"title":{},"body":{"controllers/UsersController.html":{}}}],["controllers",{"_index":2,"title":{},"body":{"controllers/AdminController.html":{},"modules/AdminModule.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"controllers/DormController.html":{},"modules/DormModule.html":{},"controllers/LobbyController.html":{},"modules/LobbyModule.html":{},"controllers/ReviewController.html":{},"modules/ReviewModule.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["conveniencestore",{"_index":616,"title":{},"body":{"classes/DormAddDto.html":{},"controllers/DormController.html":{},"interfaces/Room.html":{},"interfaces/Utility.html":{},"classes/addDorm.html":{},"classes/propsSearchDto.html":{},"classes/propsSearchDto-1.html":{}}}],["conversion",{"_index":1361,"title":{},"body":{"injectables/UsersService.html":{}}}],["cooking",{"_index":624,"title":{},"body":{"classes/DormAddDto.html":{},"controllers/DormController.html":{},"interfaces/Room.html":{},"interfaces/Utility.html":{},"classes/addDorm.html":{},"classes/propsSearchDto.html":{},"classes/propsSearchDto-1.html":{}}}],["coordinate",{"_index":561,"title":{},"body":{"interfaces/Dorm.html":{},"interfaces/DormAdd.html":{},"classes/DormAddDto.html":{},"interfaces/DormQuery.html":{},"injectables/DormService.html":{},"interfaces/Room.html":{},"interfaces/RoomInterface.html":{},"interfaces/Utility.html":{},"interfaces/UtilityInterface.html":{},"interfaces/UtilityInterface-1.html":{},"classes/addDorm.html":{},"classes/propsSearchDto.html":{},"miscellaneous/variables.html":{}}}],["coordinates",{"_index":574,"title":{},"body":{"interfaces/Dorm.html":{},"interfaces/DormAdd.html":{},"interfaces/DormQuery.html":{},"interfaces/RoomInterface.html":{},"interfaces/UtilityInterface.html":{},"interfaces/UtilityInterface-1.html":{}}}],["coverage",{"_index":1390,"title":{"coverage.html":{}},"body":{"coverage.html":{}}}],["create",{"_index":803,"title":{},"body":{"injectables/DormService.html":{},"injectables/UserRepository.html":{},"injectables/UsersService.html":{}}}],["create(createuserdto",{"_index":1258,"title":{},"body":{"injectables/UserRepository.html":{}}}],["create(dto",{"_index":1324,"title":{},"body":{"injectables/UsersService.html":{}}}],["createdby",{"_index":186,"title":{},"body":{"injectables/AdminService.html":{},"interfaces/PendingAction.html":{},"classes/TicketBodyDto.html":{},"classes/TicketIdDto.html":{},"miscellaneous/variables.html":{}}}],["createddorm",{"_index":684,"title":{},"body":{"controllers/DormController.html":{}}}],["createdon",{"_index":184,"title":{},"body":{"injectables/AdminService.html":{},"interfaces/Dorm.html":{},"interfaces/DormAdd.html":{},"interfaces/DormQuery.html":{},"interfaces/Lobby.html":{},"injectables/LobbyService.html":{},"interfaces/PendingAction.html":{},"interfaces/Review.html":{},"injectables/ReviewService.html":{},"interfaces/RoomInterface.html":{},"classes/User.html":{},"interfaces/UserParsedDto.html":{},"interfaces/UserRegisterRes.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"interfaces/UtilityInterface.html":{},"interfaces/UtilityInterface-1.html":{},"interfaces/generalUserInfo.html":{},"miscellaneous/variables.html":{}}}],["createduser",{"_index":1277,"title":{},"body":{"injectables/UserRepository.html":{}}}],["createduser.save",{"_index":1279,"title":{},"body":{"injectables/UserRepository.html":{}}}],["createlobbydto",{"_index":906,"title":{"classes/createLobbyDto.html":{},"classes/createLobbyDto-1.html":{}},"body":{"controllers/LobbyController.html":{},"classes/chatDto.html":{},"coverage.html":{},"classes/createLobbyDto.html":{},"classes/createLobbyDto-1.html":{},"classes/lobbyCodeDto.html":{},"classes/lobbyIdDto.html":{}}}],["createnewlobby",{"_index":886,"title":{},"body":{"controllers/LobbyController.html":{}}}],["createnewlobby(req",{"_index":904,"title":{},"body":{"controllers/LobbyController.html":{}}}],["createnewlobbyqueryparam",{"_index":905,"title":{},"body":{"controllers/LobbyController.html":{}}}],["createnewlobbyqueryparam.dormid",{"_index":949,"title":{},"body":{"controllers/LobbyController.html":{}}}],["createnewlobbyqueryparam.roomid",{"_index":950,"title":{},"body":{"controllers/LobbyController.html":{}}}],["createuserdto",{"_index":342,"title":{"classes/CreateUserDto.html":{}},"body":{"controllers/AuthController.html":{},"classes/CreateUserDto.html":{},"injectables/UserRepository.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["createuserdto.createdon",{"_index":1271,"title":{},"body":{"injectables/UserRepository.html":{}}}],["createuserdto.pictureprofile",{"_index":1273,"title":{},"body":{"injectables/UserRepository.html":{}}}],["crypto",{"_index":1245,"title":{},"body":{"classes/User.html":{}}}],["d",{"_index":1037,"title":{},"body":{"injectables/LobbyService.html":{}}}],["d.address.address",{"_index":809,"title":{},"body":{"injectables/DormService.html":{}}}],["d.address.coordinate",{"_index":810,"title":{},"body":{"injectables/DormService.html":{}}}],["d.allowedsex",{"_index":825,"title":{},"body":{"injectables/DormService.html":{}}}],["d.id",{"_index":807,"title":{},"body":{"injectables/DormService.html":{}}}],["d.name",{"_index":808,"title":{},"body":{"injectables/DormService.html":{}}}],["d.room.map(res",{"_index":815,"title":{},"body":{"injectables/DormService.html":{}}}],["d.sethours(d.gethours",{"_index":1038,"title":{},"body":{"injectables/LobbyService.html":{}}}],["d.utility.map(res",{"_index":811,"title":{},"body":{"injectables/DormService.html":{}}}],["data",{"_index":214,"title":{},"body":{"injectables/AdminService.html":{},"injectables/LocalStrategy.html":{},"injectables/UsersService.html":{}}}],["date",{"_index":538,"title":{},"body":{"interfaces/Dorm.html":{},"interfaces/DormAdd.html":{},"interfaces/DormQuery.html":{},"interfaces/Lobby.html":{},"injectables/LobbyService.html":{},"interfaces/PendingAction.html":{},"interfaces/Review.html":{},"interfaces/RoomInterface.html":{},"interfaces/UtilityInterface.html":{},"interfaces/UtilityInterface-1.html":{},"classes/chatDto.html":{},"classes/createLobbyDto.html":{},"classes/lobbyCodeDto.html":{},"classes/lobbyIdDto.html":{},"miscellaneous/variables.html":{}}}],["date().tostring",{"_index":1272,"title":{},"body":{"injectables/UserRepository.html":{}}}],["date.now",{"_index":202,"title":{},"body":{"injectables/AdminService.html":{},"injectables/LobbyService.html":{},"injectables/ReviewService.html":{}}}],["db",{"_index":450,"title":{},"body":{"injectables/AuthService.html":{}}}],["declarations",{"_index":105,"title":{},"body":{"modules/AdminModule.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/DormModule.html":{},"modules/LobbyModule.html":{},"modules/ReviewModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["decodedpayload",{"_index":454,"title":{},"body":{"injectables/AuthService.html":{}}}],["decorator/role.decorator",{"_index":352,"title":{},"body":{"controllers/AuthController.html":{}}}],["decorators",{"_index":19,"title":{},"body":{"controllers/AdminController.html":{},"controllers/AppController.html":{},"controllers/AuthController.html":{},"classes/CreateUserDto.html":{},"classes/DormAddDto.html":{},"controllers/DormController.html":{},"controllers/LobbyController.html":{},"classes/LoginUserDto.html":{},"classes/ReviewBodyDto.html":{},"controllers/ReviewController.html":{},"classes/ReviewParamDto.html":{},"classes/TicketBodyDto.html":{},"classes/TicketIdDto.html":{},"classes/User.html":{},"controllers/UsersController.html":{},"classes/addDorm.html":{},"classes/chatDto.html":{},"classes/createLobbyDto.html":{},"classes/createLobbyDto-1.html":{},"classes/lobbyCodeDto.html":{},"classes/lobbyIdDto.html":{},"classes/reviewCodeDto.html":{}}}],["default",{"_index":563,"title":{},"body":{"interfaces/Dorm.html":{},"interfaces/DormAdd.html":{},"interfaces/DormQuery.html":{},"injectables/LocalStrategy.html":{},"interfaces/RoomInterface.html":{},"interfaces/UtilityInterface.html":{},"interfaces/UtilityInterface-1.html":{},"miscellaneous/variables.html":{}}}],["defaultstrategy",{"_index":389,"title":{},"body":{"modules/AuthModule.html":{}}}],["defined",{"_index":22,"title":{},"body":{"controllers/AdminController.html":{},"injectables/AdminService.html":{},"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/CreateUserDto.html":{},"classes/DormAddDto.html":{},"controllers/DormController.html":{},"injectables/DormService.html":{},"injectables/JwtStrategy.html":{},"controllers/LobbyController.html":{},"injectables/LobbyService.html":{},"injectables/LocalStrategy.html":{},"classes/LoginUserDto.html":{},"classes/ReviewBodyDto.html":{},"controllers/ReviewController.html":{},"classes/ReviewParamDto.html":{},"injectables/ReviewService.html":{},"guards/RoleGuard.html":{},"classes/TicketBodyDto.html":{},"classes/TicketIdDto.html":{},"classes/User.html":{},"injectables/UserRepository.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"classes/addDorm.html":{},"classes/chatDto.html":{},"classes/createLobbyDto.html":{},"classes/createLobbyDto-1.html":{},"classes/lobbyCodeDto.html":{},"classes/lobbyIdDto.html":{},"classes/propsSearchDto.html":{},"classes/propsSearchDto-1.html":{},"classes/reviewCodeDto.html":{}}}],["delete",{"_index":49,"title":{},"body":{"controllers/AdminController.html":{},"controllers/DormController.html":{},"controllers/LobbyController.html":{},"controllers/ReviewController.html":{}}}],["delete(':id/close",{"_index":902,"title":{},"body":{"controllers/LobbyController.html":{}}}],["delete(':id/delete",{"_index":909,"title":{},"body":{"controllers/LobbyController.html":{}}}],["delete(':reviewid",{"_index":1106,"title":{},"body":{"controllers/ReviewController.html":{}}}],["delete(':ticketid",{"_index":36,"title":{},"body":{"controllers/AdminController.html":{}}}],["deletelobby",{"_index":887,"title":{},"body":{"controllers/LobbyController.html":{},"injectables/LobbyService.html":{}}}],["deletelobby(@param",{"_index":963,"title":{},"body":{"controllers/LobbyController.html":{}}}],["deletelobby(id",{"_index":908,"title":{},"body":{"controllers/LobbyController.html":{}}}],["deletelobby(lobbyid",{"_index":989,"title":{},"body":{"injectables/LobbyService.html":{}}}],["deleteone",{"_index":223,"title":{},"body":{"injectables/AdminService.html":{}}}],["deletereview",{"_index":1132,"title":{},"body":{"injectables/ReviewService.html":{}}}],["deletereview(reviewid",{"_index":1141,"title":{},"body":{"injectables/ReviewService.html":{}}}],["deleteticket",{"_index":14,"title":{},"body":{"controllers/AdminController.html":{},"injectables/AdminService.html":{}}}],["deleteticket(@param",{"_index":91,"title":{},"body":{"controllers/AdminController.html":{}}}],["deleteticket(ticketid",{"_index":35,"title":{},"body":{"controllers/AdminController.html":{},"injectables/AdminService.html":{}}}],["dependencies",{"_index":103,"title":{"dependencies.html":{}},"body":{"modules/AdminModule.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"controllers/DormController.html":{},"modules/DormModule.html":{},"modules/LobbyModule.html":{},"modules/ReviewModule.html":{},"modules/UsersModule.html":{},"dependencies.html":{},"overview.html":{}}}],["description",{"_index":545,"title":{},"body":{"interfaces/Dorm.html":{},"interfaces/DormAdd.html":{},"classes/DormAddDto.html":{},"interfaces/DormQuery.html":{},"injectables/DormService.html":{},"interfaces/Room.html":{},"interfaces/RoomInterface.html":{},"interfaces/Utility.html":{},"interfaces/UtilityInterface.html":{},"interfaces/UtilityInterface-1.html":{},"classes/addDorm.html":{},"index.html":{},"classes/propsSearchDto.html":{},"miscellaneous/variables.html":{}}}],["dest:'./uploads",{"_index":299,"title":{},"body":{"modules/AppModule.html":{}}}],["destination",{"_index":258,"title":{},"body":{"controllers/AppController.html":{}}}],["detail",{"_index":1356,"title":{},"body":{"injectables/UsersService.html":{}}}],["development",{"_index":1471,"title":{},"body":{"index.html":{}}}],["directly",{"_index":682,"title":{},"body":{"controllers/DormController.html":{}}}],["disapproved",{"_index":212,"title":{},"body":{"injectables/AdminService.html":{},"interfaces/Dorm.html":{},"interfaces/DormAdd.html":{},"interfaces/DormQuery.html":{},"interfaces/RoomInterface.html":{},"interfaces/UtilityInterface.html":{},"interfaces/UtilityInterface-1.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["diskstorage",{"_index":667,"title":{},"body":{"controllers/DormController.html":{}}}],["distance",{"_index":544,"title":{},"body":{"interfaces/Dorm.html":{},"interfaces/DormAdd.html":{},"classes/DormAddDto.html":{},"controllers/DormController.html":{},"interfaces/DormQuery.html":{},"injectables/DormService.html":{},"interfaces/Room.html":{},"interfaces/RoomInterface.html":{},"interfaces/Utility.html":{},"interfaces/UtilityInterface.html":{},"interfaces/UtilityInterface-1.html":{},"classes/addDorm.html":{},"classes/propsSearchDto.html":{},"classes/propsSearchDto-1.html":{},"miscellaneous/variables.html":{}}}],["document",{"_index":1243,"title":{},"body":{"classes/User.html":{}}}],["documentation",{"_index":1391,"title":{},"body":{"coverage.html":{}}}],["dorm",{"_index":157,"title":{"interfaces/Dorm.html":{}},"body":{"injectables/AdminService.html":{},"interfaces/Dorm.html":{},"interfaces/DormAdd.html":{},"classes/DormAddDto.html":{},"controllers/DormController.html":{},"modules/DormModule.html":{},"interfaces/DormQuery.html":{},"injectables/DormService.html":{},"interfaces/Lobby.html":{},"injectables/LobbyService.html":{},"interfaces/Review.html":{},"classes/ReviewBodyDto.html":{},"classes/ReviewParamDto.html":{},"injectables/ReviewService.html":{},"interfaces/Room.html":{},"interfaces/RoomInterface.html":{},"controllers/UsersController.html":{},"interfaces/Utility.html":{},"interfaces/UtilityInterface.html":{},"interfaces/UtilityInterface-1.html":{},"classes/addDorm.html":{},"coverage.html":{},"classes/propsSearchDto.html":{},"classes/propsSearchDto-1.html":{},"classes/reviewCodeDto.html":{},"miscellaneous/variables.html":{}}}],["dorm._id",{"_index":1155,"title":{},"body":{"injectables/ReviewService.html":{}}}],["dorm.code",{"_index":1156,"title":{},"body":{"injectables/ReviewService.html":{}}}],["dorm.controller",{"_index":756,"title":{},"body":{"modules/DormModule.html":{}}}],["dorm.dto",{"_index":663,"title":{},"body":{"controllers/DormController.html":{},"injectables/DormService.html":{}}}],["dorm.id",{"_index":1021,"title":{},"body":{"injectables/LobbyService.html":{}}}],["dorm.map(d",{"_index":806,"title":{},"body":{"injectables/DormService.html":{}}}],["dorm.model",{"_index":600,"title":{},"body":{"classes/DormAddDto.html":{},"modules/DormModule.html":{},"injectables/DormService.html":{},"interfaces/Room.html":{},"interfaces/Utility.html":{},"classes/addDorm.html":{},"classes/propsSearchDto.html":{}}}],["dorm.room",{"_index":830,"title":{},"body":{"injectables/DormService.html":{}}}],["dorm.room.id",{"_index":1022,"title":{},"body":{"injectables/LobbyService.html":{}}}],["dorm.save",{"_index":220,"title":{},"body":{"injectables/AdminService.html":{}}}],["dorm.service",{"_index":662,"title":{},"body":{"controllers/DormController.html":{},"modules/DormModule.html":{}}}],["dorm/dorm.model",{"_index":158,"title":{},"body":{"injectables/AdminService.html":{},"interfaces/Lobby.html":{},"interfaces/Review.html":{}}}],["dorm/dorm.module",{"_index":292,"title":{},"body":{"modules/AppModule.html":{}}}],["dorm/dorm.service",{"_index":1017,"title":{},"body":{"injectables/LobbyService.html":{}}}],["dormadd",{"_index":569,"title":{"interfaces/DormAdd.html":{}},"body":{"interfaces/Dorm.html":{},"interfaces/DormAdd.html":{},"interfaces/DormQuery.html":{},"interfaces/RoomInterface.html":{},"interfaces/UtilityInterface.html":{},"interfaces/UtilityInterface-1.html":{},"coverage.html":{}}}],["dormadddto",{"_index":577,"title":{"classes/DormAddDto.html":{}},"body":{"classes/DormAddDto.html":{},"controllers/DormController.html":{},"injectables/DormService.html":{},"interfaces/Room.html":{},"interfaces/Utility.html":{},"classes/addDorm.html":{},"coverage.html":{},"classes/propsSearchDto.html":{}}}],["dormcontroller",{"_index":625,"title":{"controllers/DormController.html":{}},"body":{"controllers/DormController.html":{},"modules/DormModule.html":{},"coverage.html":{}}}],["dormdto",{"_index":639,"title":{},"body":{"controllers/DormController.html":{}}}],["dormdto.owner",{"_index":679,"title":{},"body":{"controllers/DormController.html":{}}}],["dormdto:dormadddto",{"_index":676,"title":{},"body":{"controllers/DormController.html":{}}}],["dormid",{"_index":651,"title":{},"body":{"controllers/DormController.html":{},"injectables/DormService.html":{},"controllers/LobbyController.html":{},"injectables/LobbyService.html":{},"controllers/ReviewController.html":{},"injectables/ReviewService.html":{},"classes/chatDto.html":{},"classes/createLobbyDto.html":{},"classes/createLobbyDto-1.html":{},"classes/lobbyCodeDto.html":{},"classes/lobbyIdDto.html":{}}}],["dormlife",{"_index":1461,"title":{},"body":{"index.html":{}}}],["dormmodel",{"_index":138,"title":{},"body":{"injectables/AdminService.html":{},"injectables/DormService.html":{}}}],["dormmodule",{"_index":113,"title":{"modules/DormModule.html":{}},"body":{"modules/AdminModule.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/DormModule.html":{},"modules/LobbyModule.html":{},"modules/UsersModule.html":{},"modules.html":{},"overview.html":{}}}],["dormname",{"_index":605,"title":{},"body":{"classes/DormAddDto.html":{},"interfaces/Room.html":{},"interfaces/Utility.html":{},"classes/addDorm.html":{},"classes/propsSearchDto.html":{},"classes/propsSearchDto-1.html":{}}}],["dormowner",{"_index":788,"title":{},"body":{"injectables/DormService.html":{}}}],["dormowner}).exec",{"_index":827,"title":{},"body":{"injectables/DormService.html":{}}}],["dormquery",{"_index":576,"title":{"interfaces/DormQuery.html":{}},"body":{"interfaces/Dorm.html":{},"interfaces/DormAdd.html":{},"interfaces/DormQuery.html":{},"interfaces/RoomInterface.html":{},"interfaces/UtilityInterface.html":{},"interfaces/UtilityInterface-1.html":{},"coverage.html":{}}}],["dorms",{"_index":627,"title":{},"body":{"controllers/DormController.html":{},"injectables/DormService.html":{}}}],["dorms.map(res",{"_index":836,"title":{},"body":{"injectables/DormService.html":{}}}],["dormschema",{"_index":558,"title":{},"body":{"interfaces/Dorm.html":{},"interfaces/DormAdd.html":{},"modules/DormModule.html":{},"interfaces/DormQuery.html":{},"interfaces/Lobby.html":{},"interfaces/Review.html":{},"interfaces/RoomInterface.html":{},"interfaces/UtilityInterface.html":{},"interfaces/UtilityInterface-1.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["dormservice",{"_index":661,"title":{"injectables/DormService.html":{}},"body":{"controllers/DormController.html":{},"modules/DormModule.html":{},"injectables/DormService.html":{},"injectables/LobbyService.html":{},"coverage.html":{},"overview.html":{}}}],["dormtype",{"_index":611,"title":{},"body":{"classes/DormAddDto.html":{},"controllers/DormController.html":{},"interfaces/Room.html":{},"interfaces/Utility.html":{},"classes/addDorm.html":{},"classes/propsSearchDto.html":{},"classes/propsSearchDto-1.html":{}}}],["dto",{"_index":1326,"title":{},"body":{"injectables/UsersService.html":{}}}],["dto.email",{"_index":1337,"title":{},"body":{"injectables/UsersService.html":{}}}],["dto.email_verified",{"_index":1339,"title":{},"body":{"injectables/UsersService.html":{}}}],["dto.firstname",{"_index":1334,"title":{},"body":{"injectables/UsersService.html":{}}}],["dto.lastname",{"_index":1335,"title":{},"body":{"injectables/UsersService.html":{}}}],["dto.natid",{"_index":1338,"title":{},"body":{"injectables/UsersService.html":{}}}],["dto.password",{"_index":1341,"title":{},"body":{"injectables/UsersService.html":{}}}],["dto.sex",{"_index":1340,"title":{},"body":{"injectables/UsersService.html":{}}}],["dto.telephone",{"_index":1336,"title":{},"body":{"injectables/UsersService.html":{}}}],["dto.usertype",{"_index":1342,"title":{},"body":{"injectables/UsersService.html":{}}}],["dto/create",{"_index":1267,"title":{},"body":{"injectables/UserRepository.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["editfilename",{"_index":244,"title":{},"body":{"controllers/AppController.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["editreview",{"_index":1095,"title":{},"body":{"controllers/ReviewController.html":{},"injectables/ReviewService.html":{}}}],["editreview(reviewcode",{"_index":1101,"title":{},"body":{"controllers/ReviewController.html":{},"injectables/ReviewService.html":{}}}],["elem",{"_index":1217,"title":{},"body":{"classes/TicketBodyDto.html":{},"classes/TicketIdDto.html":{}}}],["email",{"_index":478,"title":{},"body":{"classes/CreateUserDto.html":{},"interfaces/Dorm.html":{},"interfaces/DormAdd.html":{},"classes/DormAddDto.html":{},"interfaces/DormQuery.html":{},"classes/LoginUserDto.html":{},"interfaces/Room.html":{},"interfaces/RoomInterface.html":{},"classes/User.html":{},"interfaces/UserParsedDto.html":{},"interfaces/UserRegisterRes.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"interfaces/Utility.html":{},"interfaces/UtilityInterface.html":{},"interfaces/UtilityInterface-1.html":{},"classes/addDorm.html":{},"interfaces/generalUserInfo.html":{},"classes/propsSearchDto.html":{},"miscellaneous/variables.html":{}}}],["email_verified",{"_index":479,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/User.html":{},"interfaces/UserParsedDto.html":{},"interfaces/UserRegisterRes.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"interfaces/generalUserInfo.html":{}}}],["emailquery",{"_index":1263,"title":{},"body":{"injectables/UserRepository.html":{}}}],["emailquery}).exec",{"_index":1282,"title":{},"body":{"injectables/UserRepository.html":{}}}],["enum",{"_index":541,"title":{},"body":{"interfaces/Dorm.html":{},"interfaces/DormAdd.html":{},"controllers/DormController.html":{},"interfaces/DormQuery.html":{},"interfaces/RoomInterface.html":{},"interfaces/UtilityInterface.html":{},"interfaces/UtilityInterface-1.html":{},"miscellaneous/variables.html":{}}}],["enumerations",{"_index":1454,"title":{"miscellaneous/enumerations.html":{}},"body":{"miscellaneous/enumerations.html":{}}}],["error",{"_index":172,"title":{},"body":{"injectables/AdminService.html":{},"injectables/DormService.html":{},"injectables/LobbyService.html":{},"injectables/ReviewService.html":{}}}],["error('only",{"_index":1560,"title":{},"body":{"miscellaneous/variables.html":{}}}],["errors",{"_index":1345,"title":{},"body":{"injectables/UsersService.html":{}}}],["errors).length",{"_index":1353,"title":{},"body":{"injectables/UsersService.html":{}}}],["exclude",{"_index":511,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["exec",{"_index":170,"title":{},"body":{"injectables/AdminService.html":{},"injectables/DormService.html":{},"injectables/LobbyService.html":{},"injectables/ReviewService.html":{}}}],["executioncontext",{"_index":1189,"title":{},"body":{"guards/RoleGuard.html":{}}}],["expireon",{"_index":874,"title":{},"body":{"interfaces/Lobby.html":{},"injectables/LobbyService.html":{},"miscellaneous/variables.html":{}}}],["expiresin",{"_index":443,"title":{},"body":{"injectables/AuthService.html":{}}}],["export",{"_index":61,"title":{},"body":{"controllers/AdminController.html":{},"modules/AdminModule.html":{},"injectables/AdminService.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreateUserDto.html":{},"interfaces/Dorm.html":{},"interfaces/DormAdd.html":{},"classes/DormAddDto.html":{},"controllers/DormController.html":{},"modules/DormModule.html":{},"interfaces/DormQuery.html":{},"injectables/DormService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"interfaces/Lobby.html":{},"controllers/LobbyController.html":{},"modules/LobbyModule.html":{},"injectables/LobbyService.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"classes/LoginUserDto.html":{},"interfaces/PendingAction.html":{},"interfaces/Review.html":{},"classes/ReviewBodyDto.html":{},"controllers/ReviewController.html":{},"modules/ReviewModule.html":{},"classes/ReviewParamDto.html":{},"injectables/ReviewService.html":{},"guards/RoleGuard.html":{},"interfaces/Room.html":{},"interfaces/RoomInterface.html":{},"classes/TicketBodyDto.html":{},"classes/TicketIdDto.html":{},"classes/User.html":{},"interfaces/UserParsedDto.html":{},"interfaces/UserRegisterRes.html":{},"injectables/UserRepository.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"interfaces/Utility.html":{},"interfaces/UtilityInterface.html":{},"interfaces/UtilityInterface-1.html":{},"classes/addDorm.html":{},"classes/chatDto.html":{},"classes/createLobbyDto.html":{},"classes/createLobbyDto-1.html":{},"interfaces/generalUserInfo.html":{},"interfaces/jwtPayload.html":{},"interfaces/jwtToken.html":{},"classes/lobbyCodeDto.html":{},"classes/lobbyIdDto.html":{},"classes/propsSearchDto.html":{},"classes/propsSearchDto-1.html":{},"classes/reviewCodeDto.html":{}}}],["exports",{"_index":108,"title":{},"body":{"modules/AdminModule.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/DormModule.html":{},"modules/LobbyModule.html":{},"modules/ReviewModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["expose",{"_index":512,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["express",{"_index":241,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"controllers/DormController.html":{},"dependencies.html":{}}}],["extends",{"_index":564,"title":{},"body":{"interfaces/Dorm.html":{},"interfaces/DormAdd.html":{},"interfaces/DormQuery.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"interfaces/Lobby.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"interfaces/PendingAction.html":{},"interfaces/Review.html":{},"interfaces/RoomInterface.html":{},"interfaces/UtilityInterface.html":{},"interfaces/UtilityInterface-1.html":{}}}],["extractjwt",{"_index":862,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["extractjwt.fromauthheaderasbearertoken",{"_index":867,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["failed",{"_index":1350,"title":{},"body":{"injectables/UsersService.html":{}}}],["false",{"_index":393,"title":{},"body":{"modules/AuthModule.html":{},"classes/CreateUserDto.html":{},"classes/DormAddDto.html":{},"injectables/JwtStrategy.html":{},"interfaces/Room.html":{},"interfaces/Utility.html":{},"classes/addDorm.html":{},"classes/propsSearchDto.html":{},"classes/propsSearchDto-1.html":{},"miscellaneous/variables.html":{}}}],["female",{"_index":516,"title":{},"body":{"classes/CreateUserDto.html":{},"interfaces/Dorm.html":{},"interfaces/DormAdd.html":{},"controllers/DormController.html":{},"interfaces/DormQuery.html":{},"interfaces/RoomInterface.html":{},"interfaces/UtilityInterface.html":{},"interfaces/UtilityInterface-1.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["file",{"_index":5,"title":{},"body":{"controllers/AdminController.html":{},"modules/AdminModule.html":{},"injectables/AdminService.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreateUserDto.html":{},"interfaces/Dorm.html":{},"interfaces/DormAdd.html":{},"classes/DormAddDto.html":{},"controllers/DormController.html":{},"modules/DormModule.html":{},"interfaces/DormQuery.html":{},"injectables/DormService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"interfaces/Lobby.html":{},"controllers/LobbyController.html":{},"modules/LobbyModule.html":{},"injectables/LobbyService.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"classes/LoginUserDto.html":{},"interfaces/PendingAction.html":{},"interfaces/Review.html":{},"classes/ReviewBodyDto.html":{},"controllers/ReviewController.html":{},"modules/ReviewModule.html":{},"classes/ReviewParamDto.html":{},"injectables/ReviewService.html":{},"guards/RoleGuard.html":{},"interfaces/Room.html":{},"interfaces/RoomInterface.html":{},"classes/TicketBodyDto.html":{},"classes/TicketIdDto.html":{},"classes/User.html":{},"interfaces/UserParsedDto.html":{},"interfaces/UserRegisterRes.html":{},"injectables/UserRepository.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"interfaces/Utility.html":{},"interfaces/UtilityInterface.html":{},"interfaces/UtilityInterface-1.html":{},"classes/addDorm.html":{},"classes/chatDto.html":{},"coverage.html":{},"classes/createLobbyDto.html":{},"classes/createLobbyDto-1.html":{},"interfaces/generalUserInfo.html":{},"interfaces/jwtPayload.html":{},"interfaces/jwtToken.html":{},"classes/lobbyCodeDto.html":{},"classes/lobbyIdDto.html":{},"classes/propsSearchDto.html":{},"classes/propsSearchDto-1.html":{},"classes/reviewCodeDto.html":{},"miscellaneous/variables.html":{}}}],["file.filename",{"_index":266,"title":{},"body":{"controllers/AppController.html":{}}}],["file.originalname",{"_index":265,"title":{},"body":{"controllers/AppController.html":{}}}],["file.originalname.match(/\\.(jpg|jpeg|png|gif",{"_index":1558,"title":{},"body":{"miscellaneous/variables.html":{}}}],["file.originalname.split('.')[0",{"_index":1546,"title":{},"body":{"miscellaneous/variables.html":{}}}],["fileextname",{"_index":1547,"title":{},"body":{"miscellaneous/variables.html":{}}}],["filefilter",{"_index":261,"title":{},"body":{"controllers/AppController.html":{}}}],["fileinterceptor",{"_index":238,"title":{},"body":{"controllers/AppController.html":{}}}],["fileinterceptor('image",{"_index":255,"title":{},"body":{"controllers/AppController.html":{}}}],["filename",{"_index":260,"title":{},"body":{"controllers/AppController.html":{}}}],["filereponse",{"_index":273,"title":{},"body":{"controllers/AppController.html":{}}}],["files",{"_index":271,"title":{},"body":{"controllers/AppController.html":{},"miscellaneous/variables.html":{}}}],["files.foreach(file",{"_index":272,"title":{},"body":{"controllers/AppController.html":{}}}],["filesinterceptor",{"_index":239,"title":{},"body":{"controllers/AppController.html":{},"controllers/DormController.html":{}}}],["filesinterceptor('image",{"_index":268,"title":{},"body":{"controllers/AppController.html":{}}}],["fill(null",{"_index":1551,"title":{},"body":{"miscellaneous/variables.html":{}}}],["find",{"_index":168,"title":{},"body":{"injectables/AdminService.html":{},"injectables/DormService.html":{},"injectables/LobbyService.html":{},"injectables/ReviewService.html":{},"injectables/UsersService.html":{}}}],["find(email",{"_index":1327,"title":{},"body":{"injectables/UsersService.html":{}}}],["findall",{"_index":1253,"title":{},"body":{"injectables/UserRepository.html":{}}}],["findalllobby",{"_index":977,"title":{},"body":{"injectables/LobbyService.html":{}}}],["findalllobby(stop",{"_index":991,"title":{},"body":{"injectables/LobbyService.html":{}}}],["findanupdatereview",{"_index":1133,"title":{},"body":{"injectables/ReviewService.html":{}}}],["findanupdatereview(reviewcode",{"_index":1144,"title":{},"body":{"injectables/ReviewService.html":{}}}],["findbyemail",{"_index":1254,"title":{},"body":{"injectables/UserRepository.html":{}}}],["findbyemail(emailquery",{"_index":1261,"title":{},"body":{"injectables/UserRepository.html":{}}}],["findbyid",{"_index":1255,"title":{},"body":{"injectables/UserRepository.html":{},"injectables/UsersService.html":{}}}],["findbyid(userid",{"_index":1264,"title":{},"body":{"injectables/UserRepository.html":{},"injectables/UsersService.html":{}}}],["finddorm",{"_index":759,"title":{},"body":{"injectables/DormService.html":{}}}],["finddorm(id",{"_index":779,"title":{},"body":{"injectables/DormService.html":{}}}],["finddormlist",{"_index":760,"title":{},"body":{"injectables/DormService.html":{}}}],["finddormlist(propssearch",{"_index":781,"title":{},"body":{"injectables/DormService.html":{}}}],["findlobbybydormid",{"_index":978,"title":{},"body":{"injectables/LobbyService.html":{}}}],["findlobbybydormid(stop",{"_index":993,"title":{},"body":{"injectables/LobbyService.html":{}}}],["findlobbybydormidandroomid",{"_index":979,"title":{},"body":{"injectables/LobbyService.html":{}}}],["findlobbybydormidandroomid(stop",{"_index":995,"title":{},"body":{"injectables/LobbyService.html":{}}}],["findlobbybyid",{"_index":980,"title":{},"body":{"injectables/LobbyService.html":{}}}],["findlobbybyid(lobbyid",{"_index":997,"title":{},"body":{"injectables/LobbyService.html":{}}}],["findone",{"_index":1044,"title":{},"body":{"injectables/LobbyService.html":{}}}],["findoneandupdate",{"_index":1158,"title":{},"body":{"injectables/ReviewService.html":{}}}],["findreviewbydormid",{"_index":1134,"title":{},"body":{"injectables/ReviewService.html":{}}}],["findreviewbydormid(dormid",{"_index":1146,"title":{},"body":{"injectables/ReviewService.html":{}}}],["findreviewbyreviewcode",{"_index":1135,"title":{},"body":{"injectables/ReviewService.html":{}}}],["findreviewbyreviewcode(reviewcode",{"_index":1148,"title":{},"body":{"injectables/ReviewService.html":{}}}],["findsingleticket",{"_index":133,"title":{},"body":{"injectables/AdminService.html":{}}}],["findsingleticket(ticketid",{"_index":145,"title":{},"body":{"injectables/AdminService.html":{}}}],["findticket",{"_index":134,"title":{},"body":{"injectables/AdminService.html":{}}}],["findticket(stop",{"_index":148,"title":{},"body":{"injectables/AdminService.html":{}}}],["firstname",{"_index":189,"title":{},"body":{"injectables/AdminService.html":{},"injectables/AuthService.html":{},"classes/CreateUserDto.html":{},"interfaces/PendingAction.html":{},"classes/TicketBodyDto.html":{},"classes/TicketIdDto.html":{},"classes/User.html":{},"interfaces/UserParsedDto.html":{},"interfaces/UserRegisterRes.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"interfaces/generalUserInfo.html":{},"interfaces/jwtPayload.html":{},"interfaces/jwtToken.html":{},"miscellaneous/variables.html":{}}}],["fitness",{"_index":622,"title":{},"body":{"classes/DormAddDto.html":{},"controllers/DormController.html":{},"interfaces/Room.html":{},"interfaces/Utility.html":{},"classes/addDorm.html":{},"classes/propsSearchDto.html":{},"classes/propsSearchDto-1.html":{}}}],["forbiddenexception",{"_index":1016,"title":{},"body":{"injectables/LobbyService.html":{}}}],["fromrole",{"_index":1195,"title":{},"body":{"guards/RoleGuard.html":{}}}],["function",{"_index":1421,"title":{},"body":{"coverage.html":{}}}],["functions",{"_index":1457,"title":{"miscellaneous/functions.html":{}},"body":{"miscellaneous/functions.html":{}}}],["gender",{"_index":609,"title":{},"body":{"classes/DormAddDto.html":{},"interfaces/Room.html":{},"interfaces/Utility.html":{},"classes/addDorm.html":{},"classes/propsSearchDto.html":{},"classes/propsSearchDto-1.html":{}}}],["general",{"_index":518,"title":{},"body":{"classes/CreateUserDto.html":{},"miscellaneous/variables.html":{}}}],["generaluserinfo",{"_index":1251,"title":{"interfaces/generalUserInfo.html":{}},"body":{"interfaces/UserParsedDto.html":{},"interfaces/UserRegisterRes.html":{},"controllers/UsersController.html":{},"coverage.html":{},"interfaces/generalUserInfo.html":{}}}],["generatedid",{"_index":83,"title":{},"body":{"controllers/AdminController.html":{},"controllers/LobbyController.html":{},"controllers/ReviewController.html":{}}}],["get('/codes",{"_index":919,"title":{},"body":{"controllers/LobbyController.html":{}}}],["get(':id",{"_index":649,"title":{},"body":{"controllers/DormController.html":{},"controllers/LobbyController.html":{}}}],["get(':id/chat",{"_index":914,"title":{},"body":{"controllers/LobbyController.html":{}}}],["get(':id/rooms",{"_index":653,"title":{},"body":{"controllers/DormController.html":{}}}],["get(':id/rooms/:roomid",{"_index":657,"title":{},"body":{"controllers/DormController.html":{}}}],["get(':imgpath",{"_index":275,"title":{},"body":{"controllers/AppController.html":{}}}],["get(':ticketid",{"_index":42,"title":{},"body":{"controllers/AdminController.html":{}}}],["get('isalive",{"_index":248,"title":{},"body":{"controllers/AppController.html":{}}}],["get('isalive')@httpcode(httpstatus.ok",{"_index":230,"title":{},"body":{"controllers/AppController.html":{}}}],["get('refresh",{"_index":371,"title":{},"body":{"controllers/AuthController.html":{}}}],["get('verify",{"_index":368,"title":{},"body":{"controllers/AuthController.html":{}}}],["get()@useguards(jwtauthguard)@apioauth2(undefined",{"_index":1290,"title":{},"body":{"controllers/UsersController.html":{}}}],["getalive",{"_index":229,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{}}}],["getall",{"_index":761,"title":{},"body":{"injectables/DormService.html":{}}}],["getalldorm",{"_index":630,"title":{},"body":{"controllers/DormController.html":{}}}],["getalldormroom",{"_index":762,"title":{},"body":{"injectables/DormService.html":{}}}],["getalldormroom(dormid",{"_index":784,"title":{},"body":{"injectables/DormService.html":{}}}],["getalllobbylist",{"_index":888,"title":{},"body":{"controllers/LobbyController.html":{},"injectables/LobbyService.html":{}}}],["getalllobbylist(offset",{"_index":911,"title":{},"body":{"controllers/LobbyController.html":{},"injectables/LobbyService.html":{}}}],["getchat",{"_index":889,"title":{},"body":{"controllers/LobbyController.html":{},"injectables/LobbyService.html":{}}}],["getchat(id",{"_index":913,"title":{},"body":{"controllers/LobbyController.html":{}}}],["getchat(lobbyid",{"_index":1000,"title":{},"body":{"injectables/LobbyService.html":{}}}],["getdorm",{"_index":631,"title":{},"body":{"controllers/DormController.html":{}}}],["getdorm(@param('id",{"_index":692,"title":{},"body":{"controllers/DormController.html":{}}}],["getdorm(dormid",{"_index":648,"title":{},"body":{"controllers/DormController.html":{}}}],["getdormbyowner",{"_index":763,"title":{},"body":{"injectables/DormService.html":{}}}],["getdormbyowner(dormowner",{"_index":786,"title":{},"body":{"injectables/DormService.html":{}}}],["getdormlist",{"_index":764,"title":{},"body":{"injectables/DormService.html":{}}}],["getdormlist(propssearch",{"_index":789,"title":{},"body":{"injectables/DormService.html":{}}}],["getdormroom",{"_index":765,"title":{},"body":{"injectables/DormService.html":{}}}],["getdormroom(dormid",{"_index":791,"title":{},"body":{"injectables/DormService.html":{}}}],["gethello",{"_index":301,"title":{},"body":{"injectables/AppService.html":{}}}],["getidbycode",{"_index":890,"title":{},"body":{"controllers/LobbyController.html":{},"injectables/LobbyService.html":{}}}],["getidbycode(@request",{"_index":953,"title":{},"body":{"controllers/LobbyController.html":{}}}],["getidbycode(lobbycode",{"_index":1002,"title":{},"body":{"injectables/LobbyService.html":{}}}],["getidbycode(req",{"_index":916,"title":{},"body":{"controllers/LobbyController.html":{}}}],["getlobbybyid",{"_index":981,"title":{},"body":{"injectables/LobbyService.html":{}}}],["getlobbybyid(lobbyid",{"_index":1004,"title":{},"body":{"injectables/LobbyService.html":{}}}],["getrefreshtoken",{"_index":397,"title":{},"body":{"injectables/AuthService.html":{}}}],["getrefreshtoken(payload",{"_index":408,"title":{},"body":{"injectables/AuthService.html":{}}}],["getreviewlist",{"_index":1096,"title":{},"body":{"controllers/ReviewController.html":{},"injectables/ReviewService.html":{}}}],["getreviewlist(dormid",{"_index":1103,"title":{},"body":{"controllers/ReviewController.html":{},"injectables/ReviewService.html":{}}}],["getroom",{"_index":632,"title":{},"body":{"controllers/DormController.html":{}}}],["getroom(@param('id",{"_index":694,"title":{},"body":{"controllers/DormController.html":{}}}],["getroom(dormid",{"_index":652,"title":{},"body":{"controllers/DormController.html":{}}}],["getsingledorm",{"_index":766,"title":{},"body":{"injectables/DormService.html":{}}}],["getsingledorm(dormid",{"_index":793,"title":{},"body":{"injectables/DormService.html":{}}}],["getsinglereviewbyreviewcode",{"_index":1136,"title":{},"body":{"injectables/ReviewService.html":{}}}],["getsinglereviewbyreviewcode(reviewcode",{"_index":1151,"title":{},"body":{"injectables/ReviewService.html":{}}}],["getsingleroom",{"_index":633,"title":{},"body":{"controllers/DormController.html":{}}}],["getsingleroom(@param('id",{"_index":696,"title":{},"body":{"controllers/DormController.html":{}}}],["getsingleroom(dormid",{"_index":655,"title":{},"body":{"controllers/DormController.html":{}}}],["getsingleticket",{"_index":15,"title":{},"body":{"controllers/AdminController.html":{},"injectables/AdminService.html":{}}}],["getsingleticket(ticketid",{"_index":38,"title":{},"body":{"controllers/AdminController.html":{},"injectables/AdminService.html":{}}}],["getspecificlobby",{"_index":891,"title":{},"body":{"controllers/LobbyController.html":{}}}],["getspecificlobby(@request",{"_index":951,"title":{},"body":{"controllers/LobbyController.html":{}}}],["getspecificlobby(req",{"_index":921,"title":{},"body":{"controllers/LobbyController.html":{}}}],["getticketslist",{"_index":16,"title":{},"body":{"controllers/AdminController.html":{},"injectables/AdminService.html":{}}}],["getticketslist(@query('offset",{"_index":65,"title":{},"body":{"controllers/AdminController.html":{}}}],["getticketslist(offset",{"_index":44,"title":{},"body":{"controllers/AdminController.html":{},"injectables/AdminService.html":{}}}],["getting",{"_index":1459,"title":{"index.html":{}},"body":{}}],["getuserinfo",{"_index":1287,"title":{},"body":{"controllers/UsersController.html":{}}}],["getuserinfo(@request",{"_index":1301,"title":{},"body":{"controllers/UsersController.html":{}}}],["getuserinfo(req",{"_index":1289,"title":{},"body":{"controllers/UsersController.html":{}}}],["git",{"_index":1466,"title":{},"body":{"index.html":{}}}],["guard",{"_index":1180,"title":{"guards/RoleGuard.html":{}},"body":{"coverage.html":{},"overview.html":{}}}],["guards",{"_index":1181,"title":{},"body":{"guards/RoleGuard.html":{}}}],["guards/jwt",{"_index":341,"title":{},"body":{"controllers/AuthController.html":{}}}],["guards/local",{"_index":336,"title":{},"body":{"controllers/AuthController.html":{}}}],["guards/role.guard",{"_index":350,"title":{},"body":{"controllers/AuthController.html":{}}}],["hallo",{"_index":305,"title":{},"body":{"injectables/AppService.html":{}}}],["hashedpassword",{"_index":1220,"title":{},"body":{"classes/User.html":{},"interfaces/UserParsedDto.html":{},"interfaces/UserRegisterRes.html":{},"injectables/UsersService.html":{},"interfaces/generalUserInfo.html":{}}}],["here",{"_index":572,"title":{},"body":{"interfaces/Dorm.html":{},"interfaces/DormAdd.html":{},"interfaces/DormQuery.html":{},"interfaces/RoomInterface.html":{},"interfaces/UtilityInterface.html":{},"interfaces/UtilityInterface-1.html":{}}}],["hexbase64binaryencoding",{"_index":1244,"title":{},"body":{"classes/User.html":{}}}],["httpcode",{"_index":234,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/UsersController.html":{}}}],["httpcode(httpstatus.ok",{"_index":249,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{}}}],["httpexception",{"_index":1332,"title":{},"body":{"injectables/UsersService.html":{}}}],["httpexception({message",{"_index":1347,"title":{},"body":{"injectables/UsersService.html":{}}}],["https://github.com/dormlife",{"_index":1468,"title":{},"body":{"index.html":{}}}],["httpstatus",{"_index":232,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/DormController.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["httpstatus.bad_request",{"_index":1351,"title":{},"body":{"injectables/UsersService.html":{}}}],["id",{"_index":86,"title":{},"body":{"controllers/AdminController.html":{},"injectables/AdminService.html":{},"interfaces/Dorm.html":{},"interfaces/DormAdd.html":{},"interfaces/DormQuery.html":{},"injectables/DormService.html":{},"controllers/LobbyController.html":{},"injectables/LobbyService.html":{},"interfaces/Review.html":{},"controllers/ReviewController.html":{},"injectables/ReviewService.html":{},"interfaces/RoomInterface.html":{},"interfaces/UtilityInterface.html":{},"interfaces/UtilityInterface-1.html":{}}}],["identifier",{"_index":1392,"title":{},"body":{"coverage.html":{}}}],["if(!result",{"_index":367,"title":{},"body":{"controllers/AuthController.html":{}}}],["ignoreexpiration",{"_index":868,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["image",{"_index":277,"title":{},"body":{"controllers/AppController.html":{},"interfaces/Dorm.html":{},"interfaces/DormAdd.html":{},"classes/DormAddDto.html":{},"interfaces/DormQuery.html":{},"injectables/DormService.html":{},"interfaces/Review.html":{},"classes/ReviewBodyDto.html":{},"classes/ReviewParamDto.html":{},"injectables/ReviewService.html":{},"interfaces/Room.html":{},"interfaces/RoomInterface.html":{},"interfaces/Utility.html":{},"interfaces/UtilityInterface.html":{},"interfaces/UtilityInterface-1.html":{},"classes/addDorm.html":{},"classes/propsSearchDto.html":{},"classes/reviewCodeDto.html":{},"miscellaneous/variables.html":{}}}],["image:string",{"_index":568,"title":{},"body":{"interfaces/Dorm.html":{},"interfaces/DormAdd.html":{},"interfaces/DormQuery.html":{},"interfaces/RoomInterface.html":{},"interfaces/UtilityInterface.html":{},"interfaces/UtilityInterface-1.html":{}}}],["imagefilefilter",{"_index":245,"title":{},"body":{"controllers/AppController.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["implements",{"_index":1197,"title":{},"body":{"guards/RoleGuard.html":{}}}],["import",{"_index":46,"title":{},"body":{"controllers/AdminController.html":{},"modules/AdminModule.html":{},"injectables/AdminService.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreateUserDto.html":{},"interfaces/Dorm.html":{},"interfaces/DormAdd.html":{},"classes/DormAddDto.html":{},"controllers/DormController.html":{},"modules/DormModule.html":{},"interfaces/DormQuery.html":{},"injectables/DormService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"interfaces/Lobby.html":{},"controllers/LobbyController.html":{},"modules/LobbyModule.html":{},"injectables/LobbyService.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"classes/LoginUserDto.html":{},"interfaces/PendingAction.html":{},"interfaces/Review.html":{},"classes/ReviewBodyDto.html":{},"controllers/ReviewController.html":{},"modules/ReviewModule.html":{},"classes/ReviewParamDto.html":{},"injectables/ReviewService.html":{},"guards/RoleGuard.html":{},"interfaces/Room.html":{},"interfaces/RoomInterface.html":{},"classes/TicketBodyDto.html":{},"classes/TicketIdDto.html":{},"classes/User.html":{},"injectables/UserRepository.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"interfaces/Utility.html":{},"interfaces/UtilityInterface.html":{},"interfaces/UtilityInterface-1.html":{},"classes/addDorm.html":{},"classes/chatDto.html":{},"classes/createLobbyDto.html":{},"classes/createLobbyDto-1.html":{},"classes/lobbyCodeDto.html":{},"classes/lobbyIdDto.html":{},"classes/propsSearchDto.html":{},"classes/propsSearchDto-1.html":{},"classes/reviewCodeDto.html":{}}}],["imports",{"_index":119,"title":{},"body":{"modules/AdminModule.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/DormModule.html":{},"modules/LobbyModule.html":{},"modules/ReviewModule.html":{},"modules/UsersModule.html":{}}}],["index",{"_index":9,"title":{"index.html":{}},"body":{"controllers/AdminController.html":{},"injectables/AdminService.html":{},"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/CreateUserDto.html":{},"interfaces/Dorm.html":{},"interfaces/DormAdd.html":{},"classes/DormAddDto.html":{},"controllers/DormController.html":{},"interfaces/DormQuery.html":{},"injectables/DormService.html":{},"injectables/JwtStrategy.html":{},"interfaces/Lobby.html":{},"controllers/LobbyController.html":{},"injectables/LobbyService.html":{},"injectables/LocalStrategy.html":{},"classes/LoginUserDto.html":{},"interfaces/PendingAction.html":{},"interfaces/Review.html":{},"classes/ReviewBodyDto.html":{},"controllers/ReviewController.html":{},"classes/ReviewParamDto.html":{},"injectables/ReviewService.html":{},"guards/RoleGuard.html":{},"interfaces/Room.html":{},"interfaces/RoomInterface.html":{},"classes/TicketBodyDto.html":{},"classes/TicketIdDto.html":{},"classes/User.html":{},"interfaces/UserParsedDto.html":{},"interfaces/UserRegisterRes.html":{},"injectables/UserRepository.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"interfaces/Utility.html":{},"interfaces/UtilityInterface.html":{},"interfaces/UtilityInterface-1.html":{},"classes/addDorm.html":{},"classes/chatDto.html":{},"classes/createLobbyDto.html":{},"classes/createLobbyDto-1.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"interfaces/generalUserInfo.html":{},"interfaces/jwtPayload.html":{},"interfaces/jwtToken.html":{},"classes/lobbyCodeDto.html":{},"classes/lobbyIdDto.html":{},"classes/propsSearchDto.html":{},"classes/propsSearchDto-1.html":{},"classes/reviewCodeDto.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["info",{"_index":3,"title":{},"body":{"controllers/AdminController.html":{},"modules/AdminModule.html":{},"injectables/AdminService.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreateUserDto.html":{},"interfaces/Dorm.html":{},"interfaces/DormAdd.html":{},"classes/DormAddDto.html":{},"controllers/DormController.html":{},"modules/DormModule.html":{},"interfaces/DormQuery.html":{},"injectables/DormService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"interfaces/Lobby.html":{},"controllers/LobbyController.html":{},"modules/LobbyModule.html":{},"injectables/LobbyService.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"classes/LoginUserDto.html":{},"interfaces/PendingAction.html":{},"interfaces/Review.html":{},"classes/ReviewBodyDto.html":{},"controllers/ReviewController.html":{},"modules/ReviewModule.html":{},"classes/ReviewParamDto.html":{},"injectables/ReviewService.html":{},"guards/RoleGuard.html":{},"interfaces/Room.html":{},"interfaces/RoomInterface.html":{},"classes/TicketBodyDto.html":{},"classes/TicketIdDto.html":{},"classes/User.html":{},"interfaces/UserParsedDto.html":{},"interfaces/UserRegisterRes.html":{},"injectables/UserRepository.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"interfaces/Utility.html":{},"interfaces/UtilityInterface.html":{},"interfaces/UtilityInterface-1.html":{},"classes/addDorm.html":{},"classes/chatDto.html":{},"classes/createLobbyDto.html":{},"classes/createLobbyDto-1.html":{},"interfaces/generalUserInfo.html":{},"interfaces/jwtPayload.html":{},"interfaces/jwtToken.html":{},"classes/lobbyCodeDto.html":{},"classes/lobbyIdDto.html":{},"classes/propsSearchDto.html":{},"classes/propsSearchDto-1.html":{},"classes/reviewCodeDto.html":{}}}],["inject",{"_index":154,"title":{},"body":{"injectables/AdminService.html":{},"injectables/AuthService.html":{},"controllers/DormController.html":{}}}],["injectable",{"_index":130,"title":{"injectables/AdminService.html":{},"injectables/AppService.html":{},"injectables/AuthService.html":{},"injectables/DormService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LobbyService.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"injectables/ReviewService.html":{},"injectables/UserRepository.html":{},"injectables/UsersService.html":{}},"body":{"injectables/AdminService.html":{},"injectables/AppService.html":{},"injectables/AuthService.html":{},"injectables/DormService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LobbyService.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"injectables/ReviewService.html":{},"guards/RoleGuard.html":{},"injectables/UserRepository.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["injectables",{"_index":131,"title":{},"body":{"injectables/AdminService.html":{},"injectables/AppService.html":{},"injectables/AuthService.html":{},"injectables/DormService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LobbyService.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"injectables/ReviewService.html":{},"injectables/UserRepository.html":{},"injectables/UsersService.html":{},"overview.html":{}}}],["injectmodel",{"_index":155,"title":{},"body":{"injectables/AdminService.html":{},"injectables/DormService.html":{},"injectables/LobbyService.html":{},"injectables/ReviewService.html":{},"injectables/UserRepository.html":{}}}],["injectmodel('dorm",{"_index":163,"title":{},"body":{"injectables/AdminService.html":{},"injectables/DormService.html":{}}}],["injectmodel('lobby",{"_index":1019,"title":{},"body":{"injectables/LobbyService.html":{}}}],["injectmodel('pendingaction",{"_index":161,"title":{},"body":{"injectables/AdminService.html":{}}}],["injectmodel('review",{"_index":1153,"title":{},"body":{"injectables/ReviewService.html":{}}}],["injectmodel('room",{"_index":802,"title":{},"body":{"injectables/DormService.html":{}}}],["injectmodel('user",{"_index":164,"title":{},"body":{"injectables/AdminService.html":{}}}],["injectmodel('utility",{"_index":801,"title":{},"body":{"injectables/DormService.html":{}}}],["input",{"_index":1348,"title":{},"body":{"injectables/UsersService.html":{}}}],["insert",{"_index":680,"title":{},"body":{"controllers/DormController.html":{}}}],["insertdorm",{"_index":767,"title":{},"body":{"injectables/DormService.html":{}}}],["insertdorm(dorm",{"_index":795,"title":{},"body":{"injectables/DormService.html":{}}}],["installation",{"_index":1465,"title":{},"body":{"index.html":{}}}],["instead",{"_index":683,"title":{},"body":{"controllers/DormController.html":{}}}],["integer",{"_index":73,"title":{},"body":{"controllers/AdminController.html":{},"controllers/DormController.html":{},"injectables/LobbyService.html":{},"controllers/ReviewController.html":{}}}],["interface",{"_index":524,"title":{"interfaces/Dorm.html":{},"interfaces/DormAdd.html":{},"interfaces/DormQuery.html":{},"interfaces/Lobby.html":{},"interfaces/PendingAction.html":{},"interfaces/Review.html":{},"interfaces/Room.html":{},"interfaces/RoomInterface.html":{},"interfaces/UserParsedDto.html":{},"interfaces/UserRegisterRes.html":{},"interfaces/Utility.html":{},"interfaces/UtilityInterface.html":{},"interfaces/UtilityInterface-1.html":{},"interfaces/generalUserInfo.html":{},"interfaces/jwtPayload.html":{},"interfaces/jwtToken.html":{}},"body":{"interfaces/Dorm.html":{},"interfaces/DormAdd.html":{},"classes/DormAddDto.html":{},"interfaces/DormQuery.html":{},"interfaces/Lobby.html":{},"interfaces/PendingAction.html":{},"interfaces/Review.html":{},"interfaces/Room.html":{},"interfaces/RoomInterface.html":{},"interfaces/UserParsedDto.html":{},"interfaces/UserRegisterRes.html":{},"interfaces/Utility.html":{},"interfaces/UtilityInterface.html":{},"interfaces/UtilityInterface-1.html":{},"classes/addDorm.html":{},"coverage.html":{},"interfaces/generalUserInfo.html":{},"interfaces/jwtPayload.html":{},"interfaces/jwtToken.html":{},"classes/propsSearchDto.html":{}}}],["interfaces",{"_index":525,"title":{},"body":{"interfaces/Dorm.html":{},"interfaces/DormAdd.html":{},"interfaces/DormQuery.html":{},"interfaces/Lobby.html":{},"interfaces/PendingAction.html":{},"interfaces/Review.html":{},"interfaces/Room.html":{},"interfaces/RoomInterface.html":{},"interfaces/UserParsedDto.html":{},"interfaces/UserRegisterRes.html":{},"interfaces/Utility.html":{},"interfaces/UtilityInterface.html":{},"interfaces/UtilityInterface-1.html":{},"interfaces/generalUserInfo.html":{},"interfaces/jwtPayload.html":{},"interfaces/jwtToken.html":{},"overview.html":{}}}],["internalservererrorexception",{"_index":1333,"title":{},"body":{"injectables/UsersService.html":{}}}],["internet",{"_index":620,"title":{},"body":{"classes/DormAddDto.html":{},"controllers/DormController.html":{},"interfaces/Room.html":{},"interfaces/Utility.html":{},"classes/addDorm.html":{},"classes/propsSearchDto.html":{},"classes/propsSearchDto-1.html":{}}}],["invalid",{"_index":1355,"title":{},"body":{"injectables/UsersService.html":{}}}],["invalidatetoken",{"_index":398,"title":{},"body":{"injectables/AuthService.html":{}}}],["invalidatetoken(userid",{"_index":410,"title":{},"body":{"injectables/AuthService.html":{}}}],["isalive",{"_index":307,"title":{},"body":{"injectables/AppService.html":{}}}],["isarray",{"_index":1084,"title":{},"body":{"classes/ReviewBodyDto.html":{},"classes/ReviewParamDto.html":{},"classes/TicketBodyDto.html":{},"classes/TicketIdDto.html":{},"classes/reviewCodeDto.html":{}}}],["isboolean",{"_index":506,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["isdate",{"_index":1388,"title":{},"body":{"classes/chatDto.html":{},"classes/createLobbyDto.html":{},"classes/lobbyCodeDto.html":{},"classes/lobbyIdDto.html":{}}}],["isemail",{"_index":503,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/DormAddDto.html":{},"classes/LoginUserDto.html":{},"interfaces/Room.html":{},"interfaces/Utility.html":{},"classes/addDorm.html":{},"classes/propsSearchDto.html":{}}}],["isin",{"_index":505,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["isin([\"true",{"_index":521,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["isin(allowedusertype",{"_index":523,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["isin(sex",{"_index":522,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["isint",{"_index":1085,"title":{},"body":{"classes/ReviewBodyDto.html":{},"classes/ReviewParamDto.html":{},"classes/reviewCodeDto.html":{}}}],["isnotempty",{"_index":502,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/DormAddDto.html":{},"classes/LoginUserDto.html":{},"classes/ReviewBodyDto.html":{},"classes/ReviewParamDto.html":{},"interfaces/Room.html":{},"classes/TicketBodyDto.html":{},"classes/TicketIdDto.html":{},"interfaces/Utility.html":{},"classes/addDorm.html":{},"classes/chatDto.html":{},"classes/createLobbyDto.html":{},"classes/createLobbyDto-1.html":{},"classes/lobbyCodeDto.html":{},"classes/lobbyIdDto.html":{},"classes/propsSearchDto.html":{},"classes/reviewCodeDto.html":{}}}],["isnotempty()@apiproperty",{"_index":1065,"title":{},"body":{"classes/LoginUserDto.html":{},"classes/ReviewBodyDto.html":{}}}],["isnotempty()@isarray()@apiproperty",{"_index":1079,"title":{},"body":{"classes/ReviewBodyDto.html":{}}}],["isnotempty()@isdate",{"_index":1384,"title":{},"body":{"classes/chatDto.html":{}}}],["isnotempty()@isemail()@apiproperty",{"_index":1063,"title":{},"body":{"classes/LoginUserDto.html":{}}}],["isnotempty()@isint()@apiproperty",{"_index":1081,"title":{},"body":{"classes/ReviewBodyDto.html":{}}}],["isnotempty()@isobject",{"_index":1386,"title":{},"body":{"classes/chatDto.html":{}}}],["isnotempty()@isstring",{"_index":1213,"title":{},"body":{"classes/TicketBodyDto.html":{},"classes/chatDto.html":{},"classes/lobbyCodeDto.html":{},"classes/lobbyIdDto.html":{}}}],["isnotempty()@isstring()@apiproperty",{"_index":1076,"title":{},"body":{"classes/ReviewBodyDto.html":{},"classes/ReviewParamDto.html":{},"classes/TicketBodyDto.html":{},"classes/TicketIdDto.html":{}}}],["isnotemptyobject",{"_index":1215,"title":{},"body":{"classes/TicketBodyDto.html":{},"classes/TicketIdDto.html":{}}}],["isnotemptyobject()@apiproperty",{"_index":1209,"title":{},"body":{"classes/TicketBodyDto.html":{}}}],["isnotemptyobject()@apiproperty()@validateif(undefined",{"_index":1207,"title":{},"body":{"classes/TicketBodyDto.html":{}}}],["isnumber",{"_index":1087,"title":{},"body":{"classes/ReviewBodyDto.html":{},"classes/ReviewParamDto.html":{},"classes/reviewCodeDto.html":{}}}],["isnumberstring",{"_index":598,"title":{},"body":{"classes/DormAddDto.html":{},"classes/ReviewBodyDto.html":{},"classes/ReviewParamDto.html":{},"interfaces/Room.html":{},"interfaces/Utility.html":{},"classes/addDorm.html":{},"classes/propsSearchDto.html":{},"classes/reviewCodeDto.html":{}}}],["isobject",{"_index":1389,"title":{},"body":{"classes/chatDto.html":{},"classes/createLobbyDto.html":{},"classes/lobbyCodeDto.html":{},"classes/lobbyIdDto.html":{}}}],["isstring",{"_index":507,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/DormAddDto.html":{},"classes/ReviewBodyDto.html":{},"classes/ReviewParamDto.html":{},"interfaces/Room.html":{},"classes/TicketBodyDto.html":{},"classes/TicketIdDto.html":{},"interfaces/Utility.html":{},"classes/addDorm.html":{},"classes/chatDto.html":{},"classes/createLobbyDto.html":{},"classes/createLobbyDto-1.html":{},"classes/lobbyCodeDto.html":{},"classes/lobbyIdDto.html":{},"classes/propsSearchDto.html":{},"classes/reviewCodeDto.html":{}}}],["isstring()@isnotempty",{"_index":581,"title":{},"body":{"classes/DormAddDto.html":{},"classes/createLobbyDto.html":{},"classes/createLobbyDto-1.html":{}}}],["isstring()@isnotempty()@apiproperty",{"_index":1530,"title":{},"body":{"classes/reviewCodeDto.html":{}}}],["isstring()@isnotempty()@isemail",{"_index":586,"title":{},"body":{"classes/DormAddDto.html":{}}}],["isurl",{"_index":599,"title":{},"body":{"classes/DormAddDto.html":{},"interfaces/Room.html":{},"interfaces/Utility.html":{},"classes/addDorm.html":{},"classes/propsSearchDto.html":{}}}],["join",{"_index":1555,"title":{},"body":{"miscellaneous/variables.html":{}}}],["joinlobbyid",{"_index":892,"title":{},"body":{"controllers/LobbyController.html":{},"injectables/LobbyService.html":{}}}],["joinlobbyid(req",{"_index":923,"title":{},"body":{"controllers/LobbyController.html":{}}}],["joinlobbyid(user",{"_index":1006,"title":{},"body":{"injectables/LobbyService.html":{}}}],["jwt",{"_index":390,"title":{},"body":{"modules/AuthModule.html":{},"injectables/JwtStrategy.html":{},"dependencies.html":{}}}],["jwtauthguard",{"_index":340,"title":{"injectables/JwtAuthGuard.html":{}},"body":{"controllers/AuthController.html":{},"controllers/DormController.html":{},"injectables/JwtAuthGuard.html":{},"controllers/LobbyController.html":{},"controllers/UsersController.html":{},"coverage.html":{}}}],["jwtconstants",{"_index":385,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["jwtconstants.refreshsecret",{"_index":452,"title":{},"body":{"injectables/AuthService.html":{}}}],["jwtconstants.secret",{"_index":442,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{}}}],["jwtfromrequest",{"_index":866,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["jwtmodule",{"_index":383,"title":{},"body":{"modules/AuthModule.html":{}}}],["jwtmodule.register",{"_index":394,"title":{},"body":{"modules/AuthModule.html":{}}}],["jwtpayload",{"_index":422,"title":{"interfaces/jwtPayload.html":{}},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"coverage.html":{},"interfaces/jwtPayload.html":{},"interfaces/jwtToken.html":{}}}],["jwtserv",{"_index":402,"title":{},"body":{"injectables/AuthService.html":{}}}],["jwtservice",{"_index":403,"title":{},"body":{"injectables/AuthService.html":{}}}],["jwtstrategy",{"_index":376,"title":{"injectables/JwtStrategy.html":{}},"body":{"modules/AuthModule.html":{},"injectables/JwtStrategy.html":{},"coverage.html":{},"overview.html":{}}}],["jwttoken",{"_index":347,"title":{"interfaces/jwtToken.html":{}},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"coverage.html":{},"interfaces/jwtPayload.html":{},"interfaces/jwtToken.html":{}}}],["kaset.coord",{"_index":607,"title":{},"body":{"classes/DormAddDto.html":{},"interfaces/Room.html":{},"interfaces/Utility.html":{},"classes/addDorm.html":{},"classes/propsSearchDto.html":{},"classes/propsSearchDto-1.html":{}}}],["kickmember",{"_index":893,"title":{},"body":{"controllers/LobbyController.html":{},"injectables/LobbyService.html":{}}}],["kickmember(req",{"_index":926,"title":{},"body":{"controllers/LobbyController.html":{}}}],["kickmember(user",{"_index":1008,"title":{},"body":{"injectables/LobbyService.html":{}}}],["kitchen",{"_index":550,"title":{},"body":{"interfaces/Dorm.html":{},"interfaces/DormAdd.html":{},"classes/DormAddDto.html":{},"controllers/DormController.html":{},"interfaces/DormQuery.html":{},"injectables/DormService.html":{},"interfaces/Room.html":{},"interfaces/RoomInterface.html":{},"interfaces/Utility.html":{},"interfaces/UtilityInterface.html":{},"interfaces/UtilityInterface-1.html":{},"classes/addDorm.html":{},"classes/propsSearchDto.html":{},"classes/propsSearchDto-1.html":{},"miscellaneous/variables.html":{}}}],["kuy",{"_index":1508,"title":{},"body":{"classes/propsSearchDto-1.html":{}}}],["lastname",{"_index":191,"title":{},"body":{"injectables/AdminService.html":{},"injectables/AuthService.html":{},"classes/CreateUserDto.html":{},"interfaces/PendingAction.html":{},"classes/TicketBodyDto.html":{},"classes/TicketIdDto.html":{},"classes/User.html":{},"interfaces/UserParsedDto.html":{},"interfaces/UserRegisterRes.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"interfaces/generalUserInfo.html":{},"interfaces/jwtPayload.html":{},"interfaces/jwtToken.html":{},"miscellaneous/variables.html":{}}}],["laundry",{"_index":617,"title":{},"body":{"classes/DormAddDto.html":{},"controllers/DormController.html":{},"injectables/DormService.html":{},"interfaces/Room.html":{},"interfaces/Utility.html":{},"classes/addDorm.html":{},"classes/propsSearchDto.html":{},"classes/propsSearchDto-1.html":{}}}],["leavelobby",{"_index":894,"title":{},"body":{"controllers/LobbyController.html":{},"injectables/LobbyService.html":{}}}],["leavelobby(@request",{"_index":958,"title":{},"body":{"controllers/LobbyController.html":{}}}],["leavelobby(req",{"_index":929,"title":{},"body":{"controllers/LobbyController.html":{}}}],["leavelobby(user",{"_index":1010,"title":{},"body":{"injectables/LobbyService.html":{}}}],["legend",{"_index":104,"title":{},"body":{"modules/AdminModule.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/DormModule.html":{},"modules/LobbyModule.html":{},"modules/ReviewModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["license",{"_index":533,"title":{},"body":{"interfaces/Dorm.html":{},"interfaces/DormAdd.html":{},"classes/DormAddDto.html":{},"interfaces/DormQuery.html":{},"interfaces/Room.html":{},"interfaces/RoomInterface.html":{},"interfaces/Utility.html":{},"interfaces/UtilityInterface.html":{},"interfaces/UtilityInterface-1.html":{},"classes/addDorm.html":{},"classes/propsSearchDto.html":{},"miscellaneous/variables.html":{}}}],["limit(stop",{"_index":169,"title":{},"body":{"injectables/AdminService.html":{},"injectables/DormService.html":{},"injectables/LobbyService.html":{},"injectables/ReviewService.html":{}}}],["lineid",{"_index":556,"title":{},"body":{"interfaces/Dorm.html":{},"interfaces/DormAdd.html":{},"classes/DormAddDto.html":{},"interfaces/DormQuery.html":{},"interfaces/Room.html":{},"interfaces/RoomInterface.html":{},"interfaces/Utility.html":{},"interfaces/UtilityInterface.html":{},"interfaces/UtilityInterface-1.html":{},"classes/addDorm.html":{},"classes/propsSearchDto.html":{},"miscellaneous/variables.html":{}}}],["lineod",{"_index":567,"title":{},"body":{"interfaces/Dorm.html":{},"interfaces/DormAdd.html":{},"interfaces/DormQuery.html":{},"interfaces/RoomInterface.html":{},"interfaces/UtilityInterface.html":{},"interfaces/UtilityInterface-1.html":{}}}],["literal",{"_index":303,"title":{},"body":{"injectables/AppService.html":{},"interfaces/Dorm.html":{},"interfaces/DormAdd.html":{},"interfaces/DormQuery.html":{},"interfaces/Lobby.html":{},"interfaces/PendingAction.html":{},"interfaces/Review.html":{},"interfaces/Room.html":{},"interfaces/RoomInterface.html":{},"classes/TicketBodyDto.html":{},"interfaces/UserParsedDto.html":{},"interfaces/generalUserInfo.html":{},"interfaces/jwtPayload.html":{}}}],["lobbies",{"_index":883,"title":{},"body":{"controllers/LobbyController.html":{},"injectables/LobbyService.html":{}}}],["lobbies.slice(_offset).map(lobby",{"_index":1025,"title":{},"body":{"injectables/LobbyService.html":{}}}],["lobbieslist",{"_index":946,"title":{},"body":{"controllers/LobbyController.html":{}}}],["lobby",{"_index":870,"title":{"interfaces/Lobby.html":{}},"body":{"interfaces/Lobby.html":{},"controllers/LobbyController.html":{},"modules/LobbyModule.html":{},"injectables/LobbyService.html":{},"coverage.html":{}}}],["lobby.code",{"_index":1029,"title":{},"body":{"injectables/LobbyService.html":{}}}],["lobby.controller",{"_index":974,"title":{},"body":{"modules/LobbyModule.html":{}}}],["lobby.createdon",{"_index":1032,"title":{},"body":{"injectables/LobbyService.html":{}}}],["lobby.dto",{"_index":939,"title":{},"body":{"controllers/LobbyController.html":{},"injectables/LobbyService.html":{}}}],["lobby.expireon",{"_index":1027,"title":{},"body":{"injectables/LobbyService.html":{}}}],["lobby.lobbyid",{"_index":1026,"title":{},"body":{"injectables/LobbyService.html":{}}}],["lobby.maxmember",{"_index":1031,"title":{},"body":{"injectables/LobbyService.html":{}}}],["lobby.member",{"_index":1030,"title":{},"body":{"injectables/LobbyService.html":{}}}],["lobby.model",{"_index":975,"title":{},"body":{"modules/LobbyModule.html":{},"injectables/LobbyService.html":{}}}],["lobby.modifiedon",{"_index":1033,"title":{},"body":{"injectables/LobbyService.html":{}}}],["lobby.owner",{"_index":1028,"title":{},"body":{"injectables/LobbyService.html":{}}}],["lobby.service",{"_index":938,"title":{},"body":{"controllers/LobbyController.html":{},"modules/LobbyModule.html":{}}}],["lobby/lobby.module",{"_index":295,"title":{},"body":{"modules/AppModule.html":{}}}],["lobbycode",{"_index":917,"title":{},"body":{"controllers/LobbyController.html":{},"injectables/LobbyService.html":{},"classes/chatDto.html":{},"classes/createLobbyDto.html":{},"classes/lobbyCodeDto.html":{},"classes/lobbyIdDto.html":{}}}],["lobbycode.lobbycode",{"_index":1045,"title":{},"body":{"injectables/LobbyService.html":{}}}],["lobbycodedto",{"_index":918,"title":{"classes/lobbyCodeDto.html":{}},"body":{"controllers/LobbyController.html":{},"injectables/LobbyService.html":{},"classes/chatDto.html":{},"coverage.html":{},"classes/createLobbyDto.html":{},"classes/lobbyCodeDto.html":{},"classes/lobbyIdDto.html":{}}}],["lobbycontroller",{"_index":881,"title":{"controllers/LobbyController.html":{}},"body":{"controllers/LobbyController.html":{},"modules/LobbyModule.html":{},"coverage.html":{}}}],["lobbyid",{"_index":875,"title":{},"body":{"interfaces/Lobby.html":{},"controllers/LobbyController.html":{},"injectables/LobbyService.html":{},"classes/chatDto.html":{},"classes/createLobbyDto.html":{},"classes/lobbyCodeDto.html":{},"classes/lobbyIdDto.html":{}}}],["lobbyiddto",{"_index":897,"title":{"classes/lobbyIdDto.html":{}},"body":{"controllers/LobbyController.html":{},"injectables/LobbyService.html":{},"classes/chatDto.html":{},"coverage.html":{},"classes/createLobbyDto.html":{},"classes/lobbyCodeDto.html":{},"classes/lobbyIdDto.html":{}}}],["lobbymodel",{"_index":986,"title":{},"body":{"injectables/LobbyService.html":{}}}],["lobbymodule",{"_index":286,"title":{"modules/LobbyModule.html":{}},"body":{"modules/AppModule.html":{},"modules/LobbyModule.html":{},"modules.html":{},"overview.html":{}}}],["lobbyschema",{"_index":878,"title":{},"body":{"interfaces/Lobby.html":{},"modules/LobbyModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["lobbyservice",{"_index":937,"title":{"injectables/LobbyService.html":{}},"body":{"controllers/LobbyController.html":{},"modules/LobbyModule.html":{},"injectables/LobbyService.html":{},"coverage.html":{},"overview.html":{}}}],["local",{"_index":1057,"title":{},"body":{"injectables/LocalStrategy.html":{},"dependencies.html":{}}}],["localauthguard",{"_index":335,"title":{"injectables/LocalAuthGuard.html":{}},"body":{"controllers/AuthController.html":{},"injectables/LocalAuthGuard.html":{},"coverage.html":{}}}],["localstrategy",{"_index":377,"title":{"injectables/LocalStrategy.html":{}},"body":{"modules/AuthModule.html":{},"injectables/LocalStrategy.html":{},"coverage.html":{},"overview.html":{}}}],["logger",{"_index":1049,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["logger(localstrategy.name",{"_index":1055,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["login",{"_index":313,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["login(@request",{"_index":361,"title":{},"body":{"controllers/AuthController.html":{}}}],["login(req",{"_index":317,"title":{},"body":{"controllers/AuthController.html":{}}}],["login(user",{"_index":412,"title":{},"body":{"injectables/AuthService.html":{}}}],["loginuserdto",{"_index":1058,"title":{"classes/LoginUserDto.html":{}},"body":{"injectables/LocalStrategy.html":{},"classes/LoginUserDto.html":{},"coverage.html":{}}}],["logout",{"_index":314,"title":{},"body":{"controllers/AuthController.html":{}}}],["logout(@request",{"_index":365,"title":{},"body":{"controllers/AuthController.html":{}}}],["logout(req",{"_index":321,"title":{},"body":{"controllers/AuthController.html":{}}}],["male",{"_index":515,"title":{},"body":{"classes/CreateUserDto.html":{},"interfaces/Dorm.html":{},"interfaces/DormAdd.html":{},"controllers/DormController.html":{},"interfaces/DormQuery.html":{},"interfaces/RoomInterface.html":{},"interfaces/UtilityInterface.html":{},"interfaces/UtilityInterface-1.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["map",{"_index":1552,"title":{},"body":{"miscellaneous/variables.html":{}}}],["map(review",{"_index":1161,"title":{},"body":{"injectables/ReviewService.html":{}}}],["map(ticket",{"_index":178,"title":{},"body":{"injectables/AdminService.html":{}}}],["matches",{"_index":504,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/DormAddDto.html":{},"interfaces/Room.html":{},"interfaces/Utility.html":{},"classes/addDorm.html":{},"classes/propsSearchDto.html":{}}}],["matches(/[0",{"_index":602,"title":{},"body":{"classes/DormAddDto.html":{},"interfaces/Room.html":{},"interfaces/Utility.html":{},"classes/addDorm.html":{},"classes/propsSearchDto.html":{}}}],["matches(/[a",{"_index":520,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/DormAddDto.html":{},"interfaces/Room.html":{},"interfaces/Utility.html":{},"classes/addDorm.html":{},"classes/propsSearchDto.html":{}}}],["matching",{"_index":98,"title":{},"body":{"controllers/AdminController.html":{},"modules/AdminModule.html":{},"injectables/AdminService.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreateUserDto.html":{},"interfaces/Dorm.html":{},"interfaces/DormAdd.html":{},"classes/DormAddDto.html":{},"controllers/DormController.html":{},"modules/DormModule.html":{},"interfaces/DormQuery.html":{},"injectables/DormService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"interfaces/Lobby.html":{},"controllers/LobbyController.html":{},"modules/LobbyModule.html":{},"injectables/LobbyService.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"classes/LoginUserDto.html":{},"interfaces/PendingAction.html":{},"interfaces/Review.html":{},"classes/ReviewBodyDto.html":{},"controllers/ReviewController.html":{},"modules/ReviewModule.html":{},"classes/ReviewParamDto.html":{},"injectables/ReviewService.html":{},"guards/RoleGuard.html":{},"interfaces/Room.html":{},"interfaces/RoomInterface.html":{},"classes/TicketBodyDto.html":{},"classes/TicketIdDto.html":{},"classes/User.html":{},"interfaces/UserParsedDto.html":{},"interfaces/UserRegisterRes.html":{},"injectables/UserRepository.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"interfaces/Utility.html":{},"interfaces/UtilityInterface.html":{},"interfaces/UtilityInterface-1.html":{},"classes/addDorm.html":{},"classes/chatDto.html":{},"coverage.html":{},"classes/createLobbyDto.html":{},"classes/createLobbyDto-1.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"interfaces/generalUserInfo.html":{},"index.html":{},"interfaces/jwtPayload.html":{},"interfaces/jwtToken.html":{},"classes/lobbyCodeDto.html":{},"classes/lobbyIdDto.html":{},"modules.html":{},"overview.html":{},"classes/propsSearchDto.html":{},"classes/propsSearchDto-1.html":{},"classes/reviewCodeDto.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["matchrole",{"_index":1184,"title":{},"body":{"guards/RoleGuard.html":{}}}],["matchrole(fromrole",{"_index":1192,"title":{},"body":{"guards/RoleGuard.html":{}}}],["matchrole(fromrole:string",{"_index":1198,"title":{},"body":{"guards/RoleGuard.html":{}}}],["math.floor",{"_index":1274,"title":{},"body":{"injectables/UserRepository.html":{}}}],["math.random",{"_index":1275,"title":{},"body":{"injectables/UserRepository.html":{}}}],["math.round(math.random",{"_index":1553,"title":{},"body":{"miscellaneous/variables.html":{}}}],["maxlength",{"_index":509,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["maxmember",{"_index":876,"title":{},"body":{"interfaces/Lobby.html":{},"injectables/LobbyService.html":{},"miscellaneous/variables.html":{}}}],["maxperson",{"_index":610,"title":{},"body":{"classes/DormAddDto.html":{},"controllers/DormController.html":{},"interfaces/Room.html":{},"interfaces/Utility.html":{},"classes/addDorm.html":{},"classes/propsSearchDto.html":{},"classes/propsSearchDto-1.html":{}}}],["member",{"_index":877,"title":{},"body":{"interfaces/Lobby.html":{},"injectables/LobbyService.html":{},"miscellaneous/variables.html":{}}}],["message",{"_index":95,"title":{},"body":{"controllers/AdminController.html":{},"interfaces/Lobby.html":{},"controllers/LobbyController.html":{},"injectables/LobbyService.html":{},"controllers/ReviewController.html":{},"classes/chatDto.html":{},"classes/createLobbyDto.html":{},"classes/lobbyCodeDto.html":{},"classes/lobbyIdDto.html":{},"miscellaneous/variables.html":{}}}],["metadata",{"_index":1444,"title":{},"body":{"dependencies.html":{}}}],["methods",{"_index":10,"title":{},"body":{"controllers/AdminController.html":{},"injectables/AdminService.html":{},"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/DormController.html":{},"injectables/DormService.html":{},"injectables/JwtStrategy.html":{},"controllers/LobbyController.html":{},"injectables/LobbyService.html":{},"injectables/LocalStrategy.html":{},"controllers/ReviewController.html":{},"injectables/ReviewService.html":{},"guards/RoleGuard.html":{},"injectables/UserRepository.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["minlength",{"_index":508,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["miscellaneous",{"_index":1453,"title":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["mocked",{"_index":1114,"title":{},"body":{"controllers/ReviewController.html":{}}}],["model",{"_index":137,"title":{},"body":{"injectables/AdminService.html":{},"injectables/DormService.html":{},"injectables/LobbyService.html":{},"injectables/ReviewService.html":{},"injectables/UserRepository.html":{}}}],["modifiedon",{"_index":534,"title":{},"body":{"interfaces/Dorm.html":{},"interfaces/DormAdd.html":{},"interfaces/DormQuery.html":{},"interfaces/Lobby.html":{},"injectables/LobbyService.html":{},"interfaces/RoomInterface.html":{},"classes/User.html":{},"interfaces/UserParsedDto.html":{},"interfaces/UserRegisterRes.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"interfaces/UtilityInterface.html":{},"interfaces/UtilityInterface-1.html":{},"interfaces/generalUserInfo.html":{},"miscellaneous/variables.html":{}}}],["module",{"_index":100,"title":{"modules/AdminModule.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/DormModule.html":{},"modules/LobbyModule.html":{},"modules/ReviewModule.html":{},"modules/UsersModule.html":{}},"body":{"modules/AdminModule.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/DormModule.html":{},"modules/LobbyModule.html":{},"modules/ReviewModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["modules",{"_index":102,"title":{"modules.html":{}},"body":{"modules/AdminModule.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/DormModule.html":{},"modules/LobbyModule.html":{},"modules/ReviewModule.html":{},"modules/UsersModule.html":{},"modules.html":{},"overview.html":{}}}],["mongodb",{"_index":1464,"title":{},"body":{"index.html":{}}}],["mongoose",{"_index":156,"title":{},"body":{"injectables/AdminService.html":{},"interfaces/Dorm.html":{},"interfaces/DormAdd.html":{},"interfaces/DormQuery.html":{},"injectables/DormService.html":{},"interfaces/Lobby.html":{},"injectables/LobbyService.html":{},"interfaces/PendingAction.html":{},"interfaces/Review.html":{},"injectables/ReviewService.html":{},"interfaces/RoomInterface.html":{},"classes/User.html":{},"injectables/UserRepository.html":{},"interfaces/UtilityInterface.html":{},"interfaces/UtilityInterface-1.html":{},"dependencies.html":{}}}],["mongoose.document",{"_index":565,"title":{},"body":{"interfaces/Dorm.html":{},"interfaces/DormAdd.html":{},"interfaces/DormQuery.html":{},"interfaces/Lobby.html":{},"interfaces/PendingAction.html":{},"interfaces/Review.html":{},"interfaces/RoomInterface.html":{},"interfaces/UtilityInterface.html":{},"interfaces/UtilityInterface-1.html":{}}}],["mongoose.schema",{"_index":543,"title":{},"body":{"interfaces/Dorm.html":{},"interfaces/DormAdd.html":{},"interfaces/DormQuery.html":{},"interfaces/Lobby.html":{},"interfaces/PendingAction.html":{},"interfaces/Review.html":{},"interfaces/RoomInterface.html":{},"interfaces/UtilityInterface.html":{},"interfaces/UtilityInterface-1.html":{},"miscellaneous/variables.html":{}}}],["mongoose.schema.types.objectid",{"_index":559,"title":{},"body":{"interfaces/Dorm.html":{},"interfaces/DormAdd.html":{},"interfaces/DormQuery.html":{},"interfaces/RoomInterface.html":{},"interfaces/UtilityInterface.html":{},"interfaces/UtilityInterface-1.html":{},"miscellaneous/variables.html":{}}}],["mongoosemodule",{"_index":120,"title":{},"body":{"modules/AdminModule.html":{},"modules/AppModule.html":{},"modules/DormModule.html":{},"modules/LobbyModule.html":{},"modules/ReviewModule.html":{},"modules/UsersModule.html":{}}}],["mongoosemodule.forfeature",{"_index":127,"title":{},"body":{"modules/AdminModule.html":{},"modules/DormModule.html":{},"modules/LobbyModule.html":{},"modules/ReviewModule.html":{},"modules/UsersModule.html":{}}}],["mongoosemodule.forroot('mongodb://mongol:27017/dormlife",{"_index":297,"title":{},"body":{"modules/AppModule.html":{}}}],["multer",{"_index":247,"title":{},"body":{"controllers/AppController.html":{},"controllers/DormController.html":{}}}],["multer.diskstorage",{"_index":257,"title":{},"body":{"controllers/AppController.html":{}}}],["multermodule",{"_index":296,"title":{},"body":{"modules/AppModule.html":{}}}],["multermodule.register",{"_index":298,"title":{},"body":{"modules/AppModule.html":{}}}],["mysearch",{"_index":839,"title":{},"body":{"injectables/DormService.html":{}}}],["myutil",{"_index":835,"title":{},"body":{"injectables/DormService.html":{}}}],["name",{"_index":25,"title":{},"body":{"controllers/AdminController.html":{},"modules/AdminModule.html":{},"injectables/AdminService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"interfaces/Dorm.html":{},"interfaces/DormAdd.html":{},"classes/DormAddDto.html":{},"controllers/DormController.html":{},"modules/DormModule.html":{},"interfaces/DormQuery.html":{},"injectables/DormService.html":{},"injectables/JwtStrategy.html":{},"controllers/LobbyController.html":{},"modules/LobbyModule.html":{},"injectables/LobbyService.html":{},"injectables/LocalStrategy.html":{},"interfaces/PendingAction.html":{},"controllers/ReviewController.html":{},"modules/ReviewModule.html":{},"injectables/ReviewService.html":{},"guards/RoleGuard.html":{},"interfaces/Room.html":{},"interfaces/RoomInterface.html":{},"classes/TicketBodyDto.html":{},"classes/TicketIdDto.html":{},"classes/User.html":{},"interfaces/UserParsedDto.html":{},"interfaces/UserRegisterRes.html":{},"injectables/UserRepository.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"interfaces/Utility.html":{},"interfaces/UtilityInterface.html":{},"interfaces/UtilityInterface-1.html":{},"classes/addDorm.html":{},"interfaces/generalUserInfo.html":{},"interfaces/jwtPayload.html":{},"interfaces/jwtToken.html":{},"classes/propsSearchDto.html":{},"miscellaneous/variables.html":{}}}],["natid",{"_index":480,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/User.html":{},"interfaces/UserParsedDto.html":{},"interfaces/UserRegisterRes.html":{},"injectables/UsersService.html":{},"interfaces/generalUserInfo.html":{}}}],["nest.js",{"_index":1463,"title":{},"body":{"index.html":{}}}],["nestjs/common",{"_index":53,"title":{},"body":{"controllers/AdminController.html":{},"modules/AdminModule.html":{},"injectables/AdminService.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"controllers/DormController.html":{},"modules/DormModule.html":{},"injectables/DormService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"controllers/LobbyController.html":{},"modules/LobbyModule.html":{},"injectables/LobbyService.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"controllers/ReviewController.html":{},"modules/ReviewModule.html":{},"injectables/ReviewService.html":{},"guards/RoleGuard.html":{},"injectables/UserRepository.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"dependencies.html":{}}}],["nestjs/core",{"_index":1196,"title":{},"body":{"guards/RoleGuard.html":{},"dependencies.html":{}}}],["nestjs/jwt",{"_index":384,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{},"dependencies.html":{}}}],["nestjs/mongoose",{"_index":121,"title":{},"body":{"modules/AdminModule.html":{},"injectables/AdminService.html":{},"modules/AppModule.html":{},"modules/DormModule.html":{},"injectables/DormService.html":{},"modules/LobbyModule.html":{},"injectables/LobbyService.html":{},"modules/ReviewModule.html":{},"injectables/ReviewService.html":{},"classes/User.html":{},"injectables/UserRepository.html":{},"modules/UsersModule.html":{},"dependencies.html":{}}}],["nestjs/passport",{"_index":380,"title":{},"body":{"modules/AuthModule.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"dependencies.html":{}}}],["nestjs/platform",{"_index":240,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"controllers/DormController.html":{},"dependencies.html":{}}}],["nestjs/swagger",{"_index":58,"title":{},"body":{"controllers/AdminController.html":{},"controllers/AuthController.html":{},"classes/CreateUserDto.html":{},"classes/DormAddDto.html":{},"controllers/DormController.html":{},"controllers/LobbyController.html":{},"classes/LoginUserDto.html":{},"classes/ReviewBodyDto.html":{},"controllers/ReviewController.html":{},"classes/ReviewParamDto.html":{},"interfaces/Room.html":{},"classes/TicketBodyDto.html":{},"classes/TicketIdDto.html":{},"controllers/UsersController.html":{},"interfaces/Utility.html":{},"classes/addDorm.html":{},"dependencies.html":{},"classes/propsSearchDto.html":{},"classes/reviewCodeDto.html":{}}}],["nestjs/websockets",{"_index":1433,"title":{},"body":{"dependencies.html":{}}}],["new",{"_index":71,"title":{},"body":{"controllers/AdminController.html":{},"injectables/AdminService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"interfaces/Dorm.html":{},"interfaces/DormAdd.html":{},"controllers/DormController.html":{},"interfaces/DormQuery.html":{},"injectables/DormService.html":{},"interfaces/Lobby.html":{},"controllers/LobbyController.html":{},"injectables/LobbyService.html":{},"injectables/LocalStrategy.html":{},"interfaces/PendingAction.html":{},"interfaces/Review.html":{},"controllers/ReviewController.html":{},"injectables/ReviewService.html":{},"interfaces/RoomInterface.html":{},"injectables/UserRepository.html":{},"injectables/UsersService.html":{},"interfaces/UtilityInterface.html":{},"interfaces/UtilityInterface-1.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["newdata",{"_index":182,"title":{},"body":{"injectables/AdminService.html":{},"interfaces/PendingAction.html":{},"classes/TicketBodyDto.html":{},"classes/TicketIdDto.html":{},"miscellaneous/variables.html":{}}}],["newdto",{"_index":1362,"title":{},"body":{"injectables/UsersService.html":{}}}],["newlobby",{"_index":1041,"title":{},"body":{"injectables/LobbyService.html":{}}}],["newlobby.save",{"_index":1042,"title":{},"body":{"injectables/LobbyService.html":{}}}],["newreview",{"_index":1170,"title":{},"body":{"injectables/ReviewService.html":{}}}],["newreview.save",{"_index":1176,"title":{},"body":{"injectables/ReviewService.html":{}}}],["newroomarray",{"_index":804,"title":{},"body":{"injectables/DormService.html":{}}}],["newticket",{"_index":198,"title":{},"body":{"injectables/AdminService.html":{}}}],["newticket.save",{"_index":208,"title":{},"body":{"injectables/AdminService.html":{}}}],["newunsignedpayload",{"_index":468,"title":{},"body":{"injectables/AuthService.html":{}}}],["notfoundexception",{"_index":153,"title":{},"body":{"injectables/AdminService.html":{},"injectables/DormService.html":{},"injectables/LobbyService.html":{},"injectables/ReviewService.html":{}}}],["notfoundexception('could",{"_index":173,"title":{},"body":{"injectables/AdminService.html":{},"injectables/DormService.html":{},"injectables/LobbyService.html":{},"injectables/ReviewService.html":{}}}],["null",{"_index":429,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UsersService.html":{}}}],["number",{"_index":149,"title":{},"body":{"injectables/AdminService.html":{},"interfaces/Dorm.html":{},"interfaces/DormAdd.html":{},"classes/DormAddDto.html":{},"interfaces/DormQuery.html":{},"interfaces/Lobby.html":{},"injectables/LobbyService.html":{},"interfaces/Review.html":{},"classes/ReviewBodyDto.html":{},"classes/ReviewParamDto.html":{},"injectables/ReviewService.html":{},"interfaces/Room.html":{},"interfaces/RoomInterface.html":{},"classes/User.html":{},"interfaces/UserParsedDto.html":{},"interfaces/UserRegisterRes.html":{},"interfaces/Utility.html":{},"interfaces/UtilityInterface.html":{},"interfaces/UtilityInterface-1.html":{},"classes/addDorm.html":{},"interfaces/generalUserInfo.html":{},"interfaces/jwtPayload.html":{},"interfaces/jwtToken.html":{},"classes/propsSearchDto.html":{},"classes/propsSearchDto-1.html":{},"classes/reviewCodeDto.html":{},"miscellaneous/variables.html":{}}}],["oauth",{"_index":312,"title":{},"body":{"controllers/AuthController.html":{}}}],["object",{"_index":848,"title":{},"body":{"injectables/DormService.html":{},"miscellaneous/variables.html":{}}}],["offset",{"_index":39,"title":{},"body":{"controllers/AdminController.html":{},"injectables/AdminService.html":{},"controllers/DormController.html":{},"injectables/DormService.html":{},"controllers/LobbyController.html":{},"injectables/LobbyService.html":{},"controllers/ReviewController.html":{},"injectables/ReviewService.html":{}}}],["ok",{"_index":96,"title":{},"body":{"controllers/AdminController.html":{},"controllers/LobbyController.html":{},"controllers/ReviewController.html":{}}}],["oldsingedpayload",{"_index":465,"title":{},"body":{"injectables/AuthService.html":{}}}],["oldsingedpayload.avatar",{"_index":472,"title":{},"body":{"injectables/AuthService.html":{}}}],["oldsingedpayload.name.firstname",{"_index":470,"title":{},"body":{"injectables/AuthService.html":{}}}],["oldsingedpayload.name.lastname",{"_index":471,"title":{},"body":{"injectables/AuthService.html":{}}}],["oldsingedpayload.role",{"_index":473,"title":{},"body":{"injectables/AuthService.html":{}}}],["oldsingedpayload.userid",{"_index":469,"title":{},"body":{"injectables/AuthService.html":{}}}],["one",{"_index":956,"title":{},"body":{"controllers/LobbyController.html":{},"controllers/ReviewController.html":{}}}],["optional",{"_index":27,"title":{},"body":{"controllers/AdminController.html":{},"injectables/AdminService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/DormController.html":{},"injectables/DormService.html":{},"injectables/JwtStrategy.html":{},"controllers/LobbyController.html":{},"injectables/LobbyService.html":{},"injectables/LocalStrategy.html":{},"controllers/ReviewController.html":{},"injectables/ReviewService.html":{},"guards/RoleGuard.html":{},"injectables/UserRepository.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["options",{"_index":451,"title":{},"body":{"injectables/AuthService.html":{}}}],["originalname",{"_index":264,"title":{},"body":{"controllers/AppController.html":{}}}],["out",{"_index":117,"title":{},"body":{"modules/AdminModule.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"modules/DormModule.html":{},"modules/LobbyModule.html":{},"modules/ReviewModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["out')@httpcode(httpstatus.ok",{"_index":323,"title":{},"body":{"controllers/AuthController.html":{}}}],["overview",{"_index":1483,"title":{"overview.html":{}},"body":{"overview.html":{}}}],["owner",{"_index":519,"title":{},"body":{"classes/CreateUserDto.html":{},"interfaces/Dorm.html":{},"interfaces/DormAdd.html":{},"classes/DormAddDto.html":{},"interfaces/DormQuery.html":{},"interfaces/Lobby.html":{},"injectables/LobbyService.html":{},"interfaces/Room.html":{},"interfaces/RoomInterface.html":{},"interfaces/Utility.html":{},"interfaces/UtilityInterface.html":{},"interfaces/UtilityInterface-1.html":{},"classes/addDorm.html":{},"classes/propsSearchDto.html":{},"miscellaneous/variables.html":{}}}],["package",{"_index":1428,"title":{"dependencies.html":{}},"body":{}}],["param",{"_index":50,"title":{},"body":{"controllers/AdminController.html":{},"controllers/AppController.html":{},"controllers/DormController.html":{},"controllers/LobbyController.html":{},"controllers/ReviewController.html":{}}}],["param('roomid",{"_index":697,"title":{},"body":{"controllers/DormController.html":{}}}],["parameters",{"_index":24,"title":{},"body":{"controllers/AdminController.html":{},"injectables/AdminService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/DormController.html":{},"injectables/DormService.html":{},"injectables/JwtStrategy.html":{},"controllers/LobbyController.html":{},"injectables/LobbyService.html":{},"injectables/LocalStrategy.html":{},"controllers/ReviewController.html":{},"injectables/ReviewService.html":{},"guards/RoleGuard.html":{},"injectables/UserRepository.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["parking",{"_index":618,"title":{},"body":{"classes/DormAddDto.html":{},"controllers/DormController.html":{},"interfaces/Room.html":{},"interfaces/Utility.html":{},"classes/addDorm.html":{},"classes/propsSearchDto.html":{},"classes/propsSearchDto-1.html":{}}}],["parsefloat(offset",{"_index":68,"title":{},"body":{"controllers/AdminController.html":{},"controllers/DormController.html":{},"injectables/LobbyService.html":{},"controllers/ReviewController.html":{}}}],["parsefloat(stop",{"_index":75,"title":{},"body":{"controllers/AdminController.html":{},"controllers/DormController.html":{},"injectables/LobbyService.html":{},"controllers/ReviewController.html":{}}}],["parseint(aircond",{"_index":730,"title":{},"body":{"controllers/DormController.html":{}}}],["parseint(bathroom",{"_index":732,"title":{},"body":{"controllers/DormController.html":{}}}],["parseint(bedroom",{"_index":734,"title":{},"body":{"controllers/DormController.html":{}}}],["parseint(distance",{"_index":721,"title":{},"body":{"controllers/DormController.html":{}}}],["parseint(kitchen",{"_index":728,"title":{},"body":{"controllers/DormController.html":{}}}],["parseint(maxperson",{"_index":726,"title":{},"body":{"controllers/DormController.html":{}}}],["parseint(offset",{"_index":67,"title":{},"body":{"controllers/AdminController.html":{},"injectables/AdminService.html":{},"controllers/DormController.html":{},"injectables/LobbyService.html":{},"controllers/ReviewController.html":{},"injectables/ReviewService.html":{}}}],["parseint(price",{"_index":724,"title":{},"body":{"controllers/DormController.html":{}}}],["parseint(rating",{"_index":722,"title":{},"body":{"controllers/DormController.html":{}}}],["parseint(stop",{"_index":74,"title":{},"body":{"controllers/AdminController.html":{},"injectables/AdminService.html":{},"controllers/DormController.html":{},"injectables/DormService.html":{},"injectables/LobbyService.html":{},"controllers/ReviewController.html":{},"injectables/ReviewService.html":{}}}],["parsing",{"_index":1270,"title":{},"body":{"injectables/UserRepository.html":{}}}],["passport",{"_index":863,"title":{},"body":{"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"dependencies.html":{}}}],["passportmodule",{"_index":379,"title":{},"body":{"modules/AuthModule.html":{}}}],["passportmodule.register",{"_index":388,"title":{},"body":{"modules/AuthModule.html":{}}}],["passportstrategy",{"_index":860,"title":{},"body":{"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{}}}],["passportstrategy(strategy",{"_index":864,"title":{},"body":{"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{}}}],["password",{"_index":418,"title":{},"body":{"injectables/AuthService.html":{},"classes/CreateUserDto.html":{},"injectables/LocalStrategy.html":{},"classes/LoginUserDto.html":{},"injectables/UsersService.html":{}}}],["patch",{"_index":51,"title":{},"body":{"controllers/AdminController.html":{},"controllers/LobbyController.html":{},"controllers/ReviewController.html":{}}}],["patch(':id/ready",{"_index":933,"title":{},"body":{"controllers/LobbyController.html":{}}}],["patch(':ticketid",{"_index":32,"title":{},"body":{"controllers/AdminController.html":{}}}],["path.extname(file.originalname",{"_index":1548,"title":{},"body":{"miscellaneous/variables.html":{}}}],["payload",{"_index":362,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{}}}],["pending",{"_index":211,"title":{},"body":{"injectables/AdminService.html":{},"interfaces/Dorm.html":{},"interfaces/DormAdd.html":{},"controllers/DormController.html":{},"interfaces/DormQuery.html":{},"interfaces/RoomInterface.html":{},"interfaces/UtilityInterface.html":{},"interfaces/UtilityInterface-1.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["pendingaction",{"_index":128,"title":{"interfaces/PendingAction.html":{}},"body":{"modules/AdminModule.html":{},"injectables/AdminService.html":{},"interfaces/PendingAction.html":{},"coverage.html":{}}}],["pendingactionmodel",{"_index":141,"title":{},"body":{"injectables/AdminService.html":{}}}],["pendingactionschema",{"_index":123,"title":{},"body":{"modules/AdminModule.html":{},"interfaces/PendingAction.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["pet",{"_index":619,"title":{},"body":{"classes/DormAddDto.html":{},"controllers/DormController.html":{},"injectables/DormService.html":{},"interfaces/Room.html":{},"interfaces/Utility.html":{},"classes/addDorm.html":{},"classes/propsSearchDto.html":{},"classes/propsSearchDto-1.html":{}}}],["pictureprofile",{"_index":1221,"title":{},"body":{"classes/User.html":{},"interfaces/UserParsedDto.html":{},"interfaces/UserRegisterRes.html":{},"injectables/UsersService.html":{},"interfaces/generalUserInfo.html":{}}}],["point",{"_index":573,"title":{},"body":{"interfaces/Dorm.html":{},"interfaces/DormAdd.html":{},"interfaces/DormQuery.html":{},"interfaces/RoomInterface.html":{},"interfaces/UtilityInterface.html":{},"interfaces/UtilityInterface-1.html":{}}}],["pool",{"_index":623,"title":{},"body":{"classes/DormAddDto.html":{},"controllers/DormController.html":{},"interfaces/Room.html":{},"interfaces/Utility.html":{},"classes/addDorm.html":{},"classes/propsSearchDto.html":{},"classes/propsSearchDto-1.html":{}}}],["post",{"_index":21,"title":{},"body":{"controllers/AdminController.html":{},"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/DormController.html":{},"controllers/LobbyController.html":{},"controllers/ReviewController.html":{},"controllers/UsersController.html":{}}}],["post('/room",{"_index":641,"title":{},"body":{"controllers/DormController.html":{}}}],["post(':id/chat",{"_index":899,"title":{},"body":{"controllers/LobbyController.html":{}}}],["post('multiple",{"_index":267,"title":{},"body":{"controllers/AppController.html":{}}}],["post('newdorm",{"_index":673,"title":{},"body":{"controllers/DormController.html":{}}}],["post('newdorm')@useguards(jwtauthguard",{"_index":636,"title":{},"body":{"controllers/DormController.html":{}}}],["post('sign",{"_index":360,"title":{},"body":{"controllers/AuthController.html":{},"controllers/UsersController.html":{}}}],["post('upload",{"_index":251,"title":{},"body":{"controllers/AppController.html":{}}}],["post('util",{"_index":645,"title":{},"body":{"controllers/DormController.html":{}}}],["postnewlobby",{"_index":982,"title":{},"body":{"injectables/LobbyService.html":{}}}],["postnewlobby(dormid",{"_index":1012,"title":{},"body":{"injectables/LobbyService.html":{}}}],["preconditionfailedexception",{"_index":936,"title":{},"body":{"controllers/LobbyController.html":{}}}],["prefix",{"_index":7,"title":{},"body":{"controllers/AdminController.html":{},"controllers/AuthController.html":{},"controllers/DormController.html":{},"controllers/LobbyController.html":{},"controllers/ReviewController.html":{},"controllers/UsersController.html":{}}}],["price",{"_index":552,"title":{},"body":{"interfaces/Dorm.html":{},"interfaces/DormAdd.html":{},"classes/DormAddDto.html":{},"controllers/DormController.html":{},"interfaces/DormQuery.html":{},"injectables/DormService.html":{},"interfaces/Room.html":{},"interfaces/RoomInterface.html":{},"interfaces/Utility.html":{},"interfaces/UtilityInterface.html":{},"interfaces/UtilityInterface-1.html":{},"classes/addDorm.html":{},"classes/propsSearchDto.html":{},"classes/propsSearchDto-1.html":{},"miscellaneous/variables.html":{}}}],["priceper",{"_index":554,"title":{},"body":{"interfaces/Dorm.html":{},"interfaces/DormAdd.html":{},"classes/DormAddDto.html":{},"interfaces/DormQuery.html":{},"interfaces/Room.html":{},"interfaces/RoomInterface.html":{},"interfaces/Utility.html":{},"interfaces/UtilityInterface.html":{},"interfaces/UtilityInterface-1.html":{},"classes/addDorm.html":{},"classes/propsSearchDto.html":{},"miscellaneous/variables.html":{}}}],["private",{"_index":162,"title":{},"body":{"injectables/AdminService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/DormController.html":{},"injectables/DormService.html":{},"injectables/LobbyService.html":{},"injectables/LocalStrategy.html":{},"injectables/ReviewService.html":{},"guards/RoleGuard.html":{},"injectables/UserRepository.html":{},"injectables/UsersService.html":{}}}],["profilepic",{"_index":193,"title":{},"body":{"injectables/AdminService.html":{},"interfaces/PendingAction.html":{},"classes/TicketBodyDto.html":{},"classes/TicketIdDto.html":{},"interfaces/UserParsedDto.html":{},"interfaces/UserRegisterRes.html":{},"controllers/UsersController.html":{},"interfaces/generalUserInfo.html":{},"miscellaneous/variables.html":{}}}],["promise",{"_index":147,"title":{},"body":{"injectables/AdminService.html":{},"injectables/AuthService.html":{},"injectables/DormService.html":{},"injectables/JwtStrategy.html":{},"injectables/LobbyService.html":{},"injectables/LocalStrategy.html":{},"injectables/ReviewService.html":{},"injectables/UserRepository.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["prop",{"_index":1234,"title":{},"body":{"classes/User.html":{}}}],["prop(undefined",{"_index":1232,"title":{},"body":{"classes/User.html":{}}}],["prop({required",{"_index":1225,"title":{},"body":{"classes/User.html":{}}}],["prop({timestamps",{"_index":1222,"title":{},"body":{"classes/User.html":{}}}],["properties",{"_index":477,"title":{},"body":{"classes/CreateUserDto.html":{},"interfaces/Dorm.html":{},"interfaces/DormAdd.html":{},"classes/DormAddDto.html":{},"interfaces/DormQuery.html":{},"interfaces/Lobby.html":{},"injectables/LocalStrategy.html":{},"classes/LoginUserDto.html":{},"interfaces/PendingAction.html":{},"interfaces/Review.html":{},"classes/ReviewBodyDto.html":{},"classes/ReviewParamDto.html":{},"interfaces/Room.html":{},"interfaces/RoomInterface.html":{},"classes/TicketBodyDto.html":{},"classes/TicketIdDto.html":{},"classes/User.html":{},"interfaces/UserParsedDto.html":{},"interfaces/UserRegisterRes.html":{},"interfaces/Utility.html":{},"interfaces/UtilityInterface.html":{},"interfaces/UtilityInterface-1.html":{},"classes/addDorm.html":{},"classes/chatDto.html":{},"classes/createLobbyDto.html":{},"classes/createLobbyDto-1.html":{},"interfaces/generalUserInfo.html":{},"interfaces/jwtPayload.html":{},"interfaces/jwtToken.html":{},"classes/lobbyCodeDto.html":{},"classes/lobbyIdDto.html":{},"classes/propsSearchDto.html":{},"classes/propsSearchDto-1.html":{},"classes/reviewCodeDto.html":{}}}],["property",{"_index":391,"title":{},"body":{"modules/AuthModule.html":{}}}],["propssearch",{"_index":700,"title":{},"body":{"controllers/DormController.html":{},"injectables/DormService.html":{}}}],["propssearch.allowedsex",{"_index":740,"title":{},"body":{"controllers/DormController.html":{}}}],["propssearch.distance",{"_index":737,"title":{},"body":{"controllers/DormController.html":{}}}],["propssearch.name",{"_index":736,"title":{},"body":{"controllers/DormController.html":{}}}],["propssearch.rating",{"_index":739,"title":{},"body":{"controllers/DormController.html":{}}}],["propssearch.type",{"_index":741,"title":{},"body":{"controllers/DormController.html":{}}}],["propssearch['room.aircond",{"_index":746,"title":{},"body":{"controllers/DormController.html":{}}}],["propssearch['room.bathroom",{"_index":747,"title":{},"body":{"controllers/DormController.html":{}}}],["propssearch['room.bedroom",{"_index":748,"title":{},"body":{"controllers/DormController.html":{}}}],["propssearch['room.capacity",{"_index":744,"title":{},"body":{"controllers/DormController.html":{}}}],["propssearch['room.kitchen",{"_index":745,"title":{},"body":{"controllers/DormController.html":{}}}],["propssearch['room.price.amount",{"_index":742,"title":{},"body":{"controllers/DormController.html":{}}}],["propssearchdto",{"_index":604,"title":{"classes/propsSearchDto.html":{},"classes/propsSearchDto-1.html":{}},"body":{"classes/DormAddDto.html":{},"controllers/DormController.html":{},"interfaces/Room.html":{},"interfaces/Utility.html":{},"classes/addDorm.html":{},"coverage.html":{},"classes/propsSearchDto.html":{},"classes/propsSearchDto-1.html":{}}}],["providers",{"_index":107,"title":{},"body":{"modules/AdminModule.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/DormModule.html":{},"modules/LobbyModule.html":{},"modules/ReviewModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["put",{"_index":935,"title":{},"body":{"controllers/LobbyController.html":{}}}],["put('/join",{"_index":924,"title":{},"body":{"controllers/LobbyController.html":{}}}],["put(':id/kick",{"_index":927,"title":{},"body":{"controllers/LobbyController.html":{}}}],["put(':id/leave",{"_index":930,"title":{},"body":{"controllers/LobbyController.html":{}}}],["query",{"_index":52,"title":{},"body":{"controllers/AdminController.html":{},"controllers/DormController.html":{},"controllers/LobbyController.html":{},"controllers/ReviewController.html":{},"injectables/UsersService.html":{}}}],["query('aircond",{"_index":709,"title":{},"body":{"controllers/DormController.html":{}}}],["query('allowedsex",{"_index":704,"title":{},"body":{"controllers/DormController.html":{}}}],["query('bathroom",{"_index":710,"title":{},"body":{"controllers/DormController.html":{}}}],["query('bedroom",{"_index":711,"title":{},"body":{"controllers/DormController.html":{}}}],["query('conveniencestore",{"_index":712,"title":{},"body":{"controllers/DormController.html":{}}}],["query('cooking",{"_index":720,"title":{},"body":{"controllers/DormController.html":{}}}],["query('distance",{"_index":702,"title":{},"body":{"controllers/DormController.html":{}}}],["query('dormid",{"_index":943,"title":{},"body":{"controllers/LobbyController.html":{},"controllers/ReviewController.html":{}}}],["query('fitness",{"_index":718,"title":{},"body":{"controllers/DormController.html":{}}}],["query('internet",{"_index":716,"title":{},"body":{"controllers/DormController.html":{}}}],["query('kitchen",{"_index":707,"title":{},"body":{"controllers/DormController.html":{}}}],["query('laundry",{"_index":713,"title":{},"body":{"controllers/DormController.html":{}}}],["query('maxperson",{"_index":706,"title":{},"body":{"controllers/DormController.html":{}}}],["query('name",{"_index":701,"title":{},"body":{"controllers/DormController.html":{}}}],["query('offset",{"_index":87,"title":{},"body":{"controllers/AdminController.html":{},"controllers/DormController.html":{},"controllers/LobbyController.html":{},"controllers/ReviewController.html":{}}}],["query('parking",{"_index":714,"title":{},"body":{"controllers/DormController.html":{}}}],["query('pet",{"_index":715,"title":{},"body":{"controllers/DormController.html":{}}}],["query('pool",{"_index":719,"title":{},"body":{"controllers/DormController.html":{}}}],["query('price",{"_index":705,"title":{},"body":{"controllers/DormController.html":{}}}],["query('rating",{"_index":703,"title":{},"body":{"controllers/DormController.html":{}}}],["query('reviewcode",{"_index":1113,"title":{},"body":{"controllers/ReviewController.html":{}}}],["query('roomid",{"_index":944,"title":{},"body":{"controllers/LobbyController.html":{}}}],["query('smoking",{"_index":717,"title":{},"body":{"controllers/DormController.html":{}}}],["query('stop",{"_index":66,"title":{},"body":{"controllers/AdminController.html":{},"controllers/DormController.html":{},"controllers/LobbyController.html":{},"controllers/ReviewController.html":{}}}],["query('type",{"_index":708,"title":{},"body":{"controllers/DormController.html":{}}}],["query('userid",{"_index":960,"title":{},"body":{"controllers/LobbyController.html":{},"controllers/ReviewController.html":{}}}],["querydorm",{"_index":634,"title":{},"body":{"controllers/DormController.html":{}}}],["querydorm(name",{"_index":659,"title":{},"body":{"controllers/DormController.html":{}}}],["r.type",{"_index":838,"title":{},"body":{"injectables/DormService.html":{}}}],["randomname",{"_index":1549,"title":{},"body":{"miscellaneous/variables.html":{}}}],["randomname}${fileextname",{"_index":1557,"title":{},"body":{"miscellaneous/variables.html":{}}}],["rating",{"_index":608,"title":{},"body":{"classes/DormAddDto.html":{},"controllers/DormController.html":{},"interfaces/Room.html":{},"interfaces/Utility.html":{},"classes/addDorm.html":{},"classes/propsSearchDto.html":{},"classes/propsSearchDto-1.html":{}}}],["raw",{"_index":1242,"title":{},"body":{"classes/User.html":{}}}],["readonly",{"_index":64,"title":{},"body":{"controllers/AdminController.html":{},"injectables/AdminService.html":{},"controllers/AppController.html":{},"classes/CreateUserDto.html":{},"classes/DormAddDto.html":{},"controllers/DormController.html":{},"injectables/DormService.html":{},"controllers/LobbyController.html":{},"injectables/LobbyService.html":{},"injectables/LocalStrategy.html":{},"classes/LoginUserDto.html":{},"controllers/ReviewController.html":{},"injectables/ReviewService.html":{},"interfaces/Room.html":{},"interfaces/Utility.html":{},"classes/addDorm.html":{},"classes/propsSearchDto.html":{}}}],["ready",{"_index":879,"title":{},"body":{"interfaces/Lobby.html":{},"miscellaneous/variables.html":{}}}],["record",{"_index":1231,"title":{},"body":{"classes/User.html":{}}}],["ref",{"_index":560,"title":{},"body":{"interfaces/Dorm.html":{},"interfaces/DormAdd.html":{},"interfaces/DormQuery.html":{},"interfaces/RoomInterface.html":{},"interfaces/UtilityInterface.html":{},"interfaces/UtilityInterface-1.html":{},"miscellaneous/variables.html":{}}}],["reflect",{"_index":1443,"title":{},"body":{"dependencies.html":{}}}],["reflector",{"_index":1186,"title":{},"body":{"guards/RoleGuard.html":{}}}],["refresh",{"_index":416,"title":{},"body":{"injectables/AuthService.html":{}}}],["refresh.refresh_token",{"_index":467,"title":{},"body":{"injectables/AuthService.html":{}}}],["refresh_token",{"_index":315,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"interfaces/jwtPayload.html":{},"interfaces/jwtToken.html":{}}}],["refresh_token(@request",{"_index":372,"title":{},"body":{"controllers/AuthController.html":{}}}],["refresh_token(req",{"_index":325,"title":{},"body":{"controllers/AuthController.html":{}}}],["refreshsecret",{"_index":1563,"title":{},"body":{"miscellaneous/variables.html":{}}}],["refreshtoken",{"_index":407,"title":{},"body":{"injectables/AuthService.html":{},"classes/User.html":{},"interfaces/UserParsedDto.html":{},"interfaces/UserRegisterRes.html":{},"injectables/UsersService.html":{},"interfaces/generalUserInfo.html":{}}}],["regenerate",{"_index":461,"title":{},"body":{"injectables/AuthService.html":{}}}],["regeneratetoken",{"_index":399,"title":{},"body":{"injectables/AuthService.html":{}}}],["regeneratetoken(refresh",{"_index":414,"title":{},"body":{"injectables/AuthService.html":{}}}],["registered",{"_index":1346,"title":{},"body":{"injectables/UsersService.html":{}}}],["repositories/user.repository",{"_index":1317,"title":{},"body":{"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["req",{"_index":320,"title":{},"body":{"controllers/AuthController.html":{},"controllers/DormController.html":{},"controllers/LobbyController.html":{},"controllers/UsersController.html":{},"miscellaneous/variables.html":{}}}],["req.user",{"_index":370,"title":{},"body":{"controllers/AuthController.html":{},"controllers/LobbyController.html":{}}}],["req.user.userid",{"_index":967,"title":{},"body":{"controllers/LobbyController.html":{}}}],["request",{"_index":333,"title":{},"body":{"controllers/AuthController.html":{},"controllers/DormController.html":{},"controllers/LobbyController.html":{},"guards/RoleGuard.html":{},"controllers/UsersController.html":{}}}],["request.user",{"_index":1203,"title":{},"body":{"guards/RoleGuard.html":{}}}],["require('bcryptjs",{"_index":426,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UsersService.html":{},"miscellaneous/variables.html":{}}}],["required",{"_index":1223,"title":{},"body":{"classes/User.html":{}}}],["res",{"_index":278,"title":{},"body":{"controllers/AppController.html":{},"controllers/DormController.html":{},"injectables/DormService.html":{}}}],["res,req",{"_index":233,"title":{},"body":{"controllers/AppController.html":{}}}],["res.aircond",{"_index":821,"title":{},"body":{"injectables/DormService.html":{}}}],["res.allowedsex",{"_index":824,"title":{},"body":{"injectables/DormService.html":{}}}],["res.bathroom",{"_index":820,"title":{},"body":{"injectables/DormService.html":{}}}],["res.bedroom",{"_index":823,"title":{},"body":{"injectables/DormService.html":{}}}],["res.capacity",{"_index":819,"title":{},"body":{"injectables/DormService.html":{}}}],["res.description",{"_index":814,"title":{},"body":{"injectables/DormService.html":{}}}],["res.distance",{"_index":813,"title":{},"body":{"injectables/DormService.html":{}}}],["res.image",{"_index":817,"title":{},"body":{"injectables/DormService.html":{}}}],["res.kitchen",{"_index":822,"title":{},"body":{"injectables/DormService.html":{}}}],["res.name",{"_index":818,"title":{},"body":{"injectables/DormService.html":{}}}],["res.price",{"_index":816,"title":{},"body":{"injectables/DormService.html":{}}}],["res.sendfile(image",{"_index":279,"title":{},"body":{"controllers/AppController.html":{}}}],["res.type",{"_index":812,"title":{},"body":{"injectables/DormService.html":{}}}],["res.utility.map(r",{"_index":837,"title":{},"body":{"injectables/DormService.html":{}}}],["reset",{"_index":116,"title":{},"body":{"modules/AdminModule.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/DormModule.html":{},"modules/LobbyModule.html":{},"modules/ReviewModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["resolve",{"_index":677,"title":{},"body":{"controllers/DormController.html":{},"injectables/UsersService.html":{}}}],["response",{"_index":263,"title":{},"body":{"controllers/AppController.html":{}}}],["response.push(filereponse",{"_index":274,"title":{},"body":{"controllers/AppController.html":{}}}],["result",{"_index":97,"title":{},"body":{"controllers/AdminController.html":{},"modules/AdminModule.html":{},"injectables/AdminService.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreateUserDto.html":{},"interfaces/Dorm.html":{},"interfaces/DormAdd.html":{},"classes/DormAddDto.html":{},"controllers/DormController.html":{},"modules/DormModule.html":{},"interfaces/DormQuery.html":{},"injectables/DormService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"interfaces/Lobby.html":{},"controllers/LobbyController.html":{},"modules/LobbyModule.html":{},"injectables/LobbyService.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"classes/LoginUserDto.html":{},"interfaces/PendingAction.html":{},"interfaces/Review.html":{},"classes/ReviewBodyDto.html":{},"controllers/ReviewController.html":{},"modules/ReviewModule.html":{},"classes/ReviewParamDto.html":{},"injectables/ReviewService.html":{},"guards/RoleGuard.html":{},"interfaces/Room.html":{},"interfaces/RoomInterface.html":{},"classes/TicketBodyDto.html":{},"classes/TicketIdDto.html":{},"classes/User.html":{},"interfaces/UserParsedDto.html":{},"interfaces/UserRegisterRes.html":{},"injectables/UserRepository.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"interfaces/Utility.html":{},"interfaces/UtilityInterface.html":{},"interfaces/UtilityInterface-1.html":{},"classes/addDorm.html":{},"classes/chatDto.html":{},"coverage.html":{},"classes/createLobbyDto.html":{},"classes/createLobbyDto-1.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"interfaces/generalUserInfo.html":{},"index.html":{},"interfaces/jwtPayload.html":{},"interfaces/jwtToken.html":{},"classes/lobbyCodeDto.html":{},"classes/lobbyIdDto.html":{},"modules.html":{},"overview.html":{},"classes/propsSearchDto.html":{},"classes/propsSearchDto-1.html":{},"classes/reviewCodeDto.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["result.id",{"_index":209,"title":{},"body":{"injectables/AdminService.html":{},"injectables/LobbyService.html":{},"injectables/ReviewService.html":{}}}],["result.n",{"_index":226,"title":{},"body":{"injectables/AdminService.html":{},"injectables/ReviewService.html":{}}}],["results",{"_index":99,"title":{},"body":{"controllers/AdminController.html":{},"modules/AdminModule.html":{},"injectables/AdminService.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreateUserDto.html":{},"interfaces/Dorm.html":{},"interfaces/DormAdd.html":{},"classes/DormAddDto.html":{},"controllers/DormController.html":{},"modules/DormModule.html":{},"interfaces/DormQuery.html":{},"injectables/DormService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"interfaces/Lobby.html":{},"controllers/LobbyController.html":{},"modules/LobbyModule.html":{},"injectables/LobbyService.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"classes/LoginUserDto.html":{},"interfaces/PendingAction.html":{},"interfaces/Review.html":{},"classes/ReviewBodyDto.html":{},"controllers/ReviewController.html":{},"modules/ReviewModule.html":{},"classes/ReviewParamDto.html":{},"injectables/ReviewService.html":{},"guards/RoleGuard.html":{},"interfaces/Room.html":{},"interfaces/RoomInterface.html":{},"classes/TicketBodyDto.html":{},"classes/TicketIdDto.html":{},"classes/User.html":{},"interfaces/UserParsedDto.html":{},"interfaces/UserRegisterRes.html":{},"injectables/UserRepository.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"interfaces/Utility.html":{},"interfaces/UtilityInterface.html":{},"interfaces/UtilityInterface-1.html":{},"classes/addDorm.html":{},"classes/chatDto.html":{},"coverage.html":{},"classes/createLobbyDto.html":{},"classes/createLobbyDto-1.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"interfaces/generalUserInfo.html":{},"index.html":{},"interfaces/jwtPayload.html":{},"interfaces/jwtToken.html":{},"classes/lobbyCodeDto.html":{},"classes/lobbyIdDto.html":{},"modules.html":{},"overview.html":{},"classes/propsSearchDto.html":{},"classes/propsSearchDto-1.html":{},"classes/reviewCodeDto.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["return",{"_index":79,"title":{},"body":{"controllers/AdminController.html":{},"injectables/AdminService.html":{},"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/DormController.html":{},"injectables/DormService.html":{},"injectables/JwtStrategy.html":{},"controllers/LobbyController.html":{},"injectables/LobbyService.html":{},"injectables/LocalStrategy.html":{},"controllers/ReviewController.html":{},"injectables/ReviewService.html":{},"guards/RoleGuard.html":{},"injectables/UserRepository.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"miscellaneous/variables.html":{}}}],["returns",{"_index":29,"title":{},"body":{"controllers/AdminController.html":{},"injectables/AdminService.html":{},"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/DormController.html":{},"injectables/DormService.html":{},"injectables/JwtStrategy.html":{},"controllers/LobbyController.html":{},"injectables/LobbyService.html":{},"injectables/LocalStrategy.html":{},"controllers/ReviewController.html":{},"injectables/ReviewService.html":{},"guards/RoleGuard.html":{},"injectables/UserRepository.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["review",{"_index":1068,"title":{"interfaces/Review.html":{}},"body":{"interfaces/Review.html":{},"controllers/ReviewController.html":{},"modules/ReviewModule.html":{},"injectables/ReviewService.html":{},"coverage.html":{}}}],["review.comment",{"_index":1166,"title":{},"body":{"injectables/ReviewService.html":{}}}],["review.controller",{"_index":1128,"title":{},"body":{"modules/ReviewModule.html":{}}}],["review.createdon",{"_index":1168,"title":{},"body":{"injectables/ReviewService.html":{}}}],["review.dorm",{"_index":1163,"title":{},"body":{"injectables/ReviewService.html":{}}}],["review.id",{"_index":1162,"title":{},"body":{"injectables/ReviewService.html":{}}}],["review.image",{"_index":1167,"title":{},"body":{"injectables/ReviewService.html":{}}}],["review.service",{"_index":1109,"title":{},"body":{"controllers/ReviewController.html":{},"modules/ReviewModule.html":{}}}],["review.star",{"_index":1165,"title":{},"body":{"injectables/ReviewService.html":{}}}],["review.user",{"_index":1164,"title":{},"body":{"injectables/ReviewService.html":{}}}],["review.validation",{"_index":1110,"title":{},"body":{"controllers/ReviewController.html":{},"injectables/ReviewService.html":{}}}],["review/review.model",{"_index":1129,"title":{},"body":{"modules/ReviewModule.html":{},"injectables/ReviewService.html":{}}}],["review/review.module",{"_index":293,"title":{},"body":{"modules/AppModule.html":{}}}],["reviewbody",{"_index":1100,"title":{},"body":{"controllers/ReviewController.html":{},"injectables/ReviewService.html":{}}}],["reviewbody.comment",{"_index":1174,"title":{},"body":{"injectables/ReviewService.html":{}}}],["reviewbody.dorm",{"_index":1171,"title":{},"body":{"injectables/ReviewService.html":{}}}],["reviewbody.image",{"_index":1175,"title":{},"body":{"injectables/ReviewService.html":{}}}],["reviewbody.star",{"_index":1173,"title":{},"body":{"injectables/ReviewService.html":{}}}],["reviewbody.user",{"_index":1172,"title":{},"body":{"injectables/ReviewService.html":{}}}],["reviewbodydto",{"_index":1074,"title":{"classes/ReviewBodyDto.html":{}},"body":{"classes/ReviewBodyDto.html":{},"controllers/ReviewController.html":{},"classes/ReviewParamDto.html":{},"injectables/ReviewService.html":{},"coverage.html":{},"classes/reviewCodeDto.html":{}}}],["reviewcode",{"_index":1089,"title":{},"body":{"classes/ReviewBodyDto.html":{},"controllers/ReviewController.html":{},"classes/ReviewParamDto.html":{},"injectables/ReviewService.html":{},"classes/reviewCodeDto.html":{}}}],["reviewcode.reviewcode",{"_index":1159,"title":{},"body":{"injectables/ReviewService.html":{}}}],["reviewcodedto",{"_index":1088,"title":{"classes/reviewCodeDto.html":{}},"body":{"classes/ReviewBodyDto.html":{},"controllers/ReviewController.html":{},"classes/ReviewParamDto.html":{},"injectables/ReviewService.html":{},"coverage.html":{},"classes/reviewCodeDto.html":{}}}],["reviewcontroller",{"_index":1091,"title":{"controllers/ReviewController.html":{}},"body":{"controllers/ReviewController.html":{},"modules/ReviewModule.html":{},"coverage.html":{}}}],["reviewid",{"_index":1073,"title":{},"body":{"interfaces/Review.html":{},"classes/ReviewBodyDto.html":{},"controllers/ReviewController.html":{},"classes/ReviewParamDto.html":{},"injectables/ReviewService.html":{},"classes/reviewCodeDto.html":{},"miscellaneous/variables.html":{}}}],["reviewid.reviewid",{"_index":1179,"title":{},"body":{"injectables/ReviewService.html":{}}}],["reviewmodel",{"_index":1139,"title":{},"body":{"injectables/ReviewService.html":{}}}],["reviewmodule",{"_index":287,"title":{"modules/ReviewModule.html":{}},"body":{"modules/AppModule.html":{},"modules/ReviewModule.html":{},"modules.html":{},"overview.html":{}}}],["reviewparamdto",{"_index":1090,"title":{"classes/ReviewParamDto.html":{}},"body":{"classes/ReviewBodyDto.html":{},"controllers/ReviewController.html":{},"classes/ReviewParamDto.html":{},"injectables/ReviewService.html":{},"coverage.html":{},"classes/reviewCodeDto.html":{}}}],["reviews",{"_index":1093,"title":{},"body":{"controllers/ReviewController.html":{}}}],["reviewschema",{"_index":1072,"title":{},"body":{"interfaces/Review.html":{},"modules/ReviewModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["reviewservice",{"_index":1108,"title":{"injectables/ReviewService.html":{}},"body":{"controllers/ReviewController.html":{},"modules/ReviewModule.html":{},"injectables/ReviewService.html":{},"coverage.html":{},"overview.html":{}}}],["revoke",{"_index":457,"title":{},"body":{"injectables/AuthService.html":{}}}],["rimraf",{"_index":1446,"title":{},"body":{"dependencies.html":{}}}],["role",{"_index":351,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/DormController.html":{},"controllers/LobbyController.html":{},"guards/RoleGuard.html":{},"coverage.html":{},"interfaces/jwtPayload.html":{},"interfaces/jwtToken.html":{},"miscellaneous/variables.html":{}}}],["role('general",{"_index":942,"title":{},"body":{"controllers/LobbyController.html":{}}}],["role('owner",{"_index":674,"title":{},"body":{"controllers/DormController.html":{}}}],["roleguard",{"_index":349,"title":{"guards/RoleGuard.html":{}},"body":{"controllers/AuthController.html":{},"controllers/DormController.html":{},"controllers/LobbyController.html":{},"guards/RoleGuard.html":{},"coverage.html":{}}}],["roleguard)@role('owner",{"_index":637,"title":{},"body":{"controllers/DormController.html":{}}}],["room",{"_index":535,"title":{"interfaces/Room.html":{}},"body":{"interfaces/Dorm.html":{},"interfaces/DormAdd.html":{},"classes/DormAddDto.html":{},"modules/DormModule.html":{},"interfaces/DormQuery.html":{},"injectables/DormService.html":{},"injectables/LobbyService.html":{},"interfaces/Room.html":{},"interfaces/RoomInterface.html":{},"interfaces/Utility.html":{},"interfaces/UtilityInterface.html":{},"interfaces/UtilityInterface-1.html":{},"classes/addDorm.html":{},"coverage.html":{},"classes/propsSearchDto.html":{},"classes/propsSearchDto-1.html":{},"miscellaneous/variables.html":{}}}],["room.aircond",{"_index":729,"title":{},"body":{"controllers/DormController.html":{}}}],["room.bathroom",{"_index":731,"title":{},"body":{"controllers/DormController.html":{}}}],["room.bedroom",{"_index":733,"title":{},"body":{"controllers/DormController.html":{}}}],["room.capacity",{"_index":725,"title":{},"body":{"controllers/DormController.html":{},"injectables/LobbyService.html":{}}}],["room.kitchen",{"_index":727,"title":{},"body":{"controllers/DormController.html":{}}}],["room.price.amount",{"_index":723,"title":{},"body":{"controllers/DormController.html":{}}}],["room2",{"_index":612,"title":{},"body":{"classes/DormAddDto.html":{},"interfaces/Room.html":{},"interfaces/Utility.html":{},"classes/addDorm.html":{},"classes/propsSearchDto.html":{},"classes/propsSearchDto-1.html":{}}}],["roomarray",{"_index":775,"title":{},"body":{"injectables/DormService.html":{}}}],["roomid",{"_index":656,"title":{},"body":{"controllers/DormController.html":{},"injectables/DormService.html":{},"controllers/LobbyController.html":{},"injectables/LobbyService.html":{},"classes/chatDto.html":{},"classes/createLobbyDto.html":{},"classes/createLobbyDto-1.html":{},"classes/lobbyCodeDto.html":{},"classes/lobbyIdDto.html":{}}}],["roominterface",{"_index":539,"title":{"interfaces/RoomInterface.html":{}},"body":{"interfaces/Dorm.html":{},"interfaces/DormAdd.html":{},"classes/DormAddDto.html":{},"interfaces/DormQuery.html":{},"injectables/DormService.html":{},"interfaces/Room.html":{},"interfaces/RoomInterface.html":{},"interfaces/Utility.html":{},"interfaces/UtilityInterface.html":{},"interfaces/UtilityInterface-1.html":{},"classes/addDorm.html":{},"coverage.html":{},"classes/propsSearchDto.html":{}}}],["roomlist",{"_index":643,"title":{},"body":{"controllers/DormController.html":{}}}],["roommodel",{"_index":771,"title":{},"body":{"injectables/DormService.html":{}}}],["rooms",{"_index":579,"title":{},"body":{"classes/DormAddDto.html":{},"controllers/DormController.html":{},"interfaces/Room.html":{},"interfaces/Utility.html":{},"classes/addDorm.html":{},"classes/propsSearchDto.html":{}}}],["roomschema",{"_index":546,"title":{},"body":{"interfaces/Dorm.html":{},"interfaces/DormAdd.html":{},"modules/DormModule.html":{},"interfaces/DormQuery.html":{},"interfaces/RoomInterface.html":{},"interfaces/UtilityInterface.html":{},"interfaces/UtilityInterface-1.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["root",{"_index":280,"title":{},"body":{"controllers/AppController.html":{}}}],["run_dev.sh",{"_index":1474,"title":{},"body":{"index.html":{}}}],["run_test.sh",{"_index":1476,"title":{},"body":{"index.html":{}}}],["running",{"_index":1470,"title":{},"body":{"index.html":{}}}],["rxjs",{"_index":1448,"title":{},"body":{"dependencies.html":{}}}],["save",{"_index":449,"title":{},"body":{"injectables/AuthService.html":{}}}],["saveduser",{"_index":1364,"title":{},"body":{"injectables/UsersService.html":{}}}],["saveduser._id",{"_index":1366,"title":{},"body":{"injectables/UsersService.html":{}}}],["saving",{"_index":1358,"title":{},"body":{"injectables/UsersService.html":{}}}],["schema",{"_index":129,"title":{},"body":{"modules/AdminModule.html":{},"modules/DormModule.html":{},"modules/LobbyModule.html":{},"modules/ReviewModule.html":{},"classes/User.html":{},"modules/UsersModule.html":{}}}],["schemafactory",{"_index":1241,"title":{},"body":{"classes/User.html":{}}}],["schemafactory.createforclass(user",{"_index":1247,"title":{},"body":{"classes/User.html":{},"miscellaneous/variables.html":{}}}],["schemas/users.schemas",{"_index":1266,"title":{},"body":{"injectables/UserRepository.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["secret",{"_index":441,"title":{},"body":{"injectables/AuthService.html":{},"miscellaneous/variables.html":{}}}],["secretkey",{"_index":1562,"title":{},"body":{"miscellaneous/variables.html":{}}}],["secretorkey",{"_index":869,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["seeuploadedfile(@param('imgpath",{"_index":276,"title":{},"body":{"controllers/AppController.html":{}}}],["seletereview",{"_index":1097,"title":{},"body":{"controllers/ReviewController.html":{}}}],["seletereview(@param",{"_index":1123,"title":{},"body":{"controllers/ReviewController.html":{}}}],["seletereview(reviewid",{"_index":1105,"title":{},"body":{"controllers/ReviewController.html":{}}}],["server",{"_index":1472,"title":{},"body":{"index.html":{}}}],["session",{"_index":392,"title":{},"body":{"modules/AuthModule.html":{}}}],["setmetadata('role",{"_index":1564,"title":{},"body":{"miscellaneous/variables.html":{}}}],["setready",{"_index":895,"title":{},"body":{"controllers/LobbyController.html":{},"injectables/LobbyService.html":{}}}],["setready(@param",{"_index":965,"title":{},"body":{"controllers/LobbyController.html":{}}}],["setready(id",{"_index":932,"title":{},"body":{"controllers/LobbyController.html":{}}}],["setready(lobbyid",{"_index":1014,"title":{},"body":{"injectables/LobbyService.html":{}}}],["sex",{"_index":481,"title":{},"body":{"classes/CreateUserDto.html":{},"controllers/DormController.html":{},"classes/User.html":{},"interfaces/UserParsedDto.html":{},"interfaces/UserRegisterRes.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{},"interfaces/generalUserInfo.html":{},"miscellaneous/variables.html":{}}}],["slice(_offset",{"_index":197,"title":{},"body":{"injectables/AdminService.html":{},"injectables/ReviewService.html":{}}}],["slice(offset",{"_index":851,"title":{},"body":{"injectables/DormService.html":{}}}],["smoking",{"_index":621,"title":{},"body":{"classes/DormAddDto.html":{},"controllers/DormController.html":{},"interfaces/Room.html":{},"interfaces/Utility.html":{},"classes/addDorm.html":{},"classes/propsSearchDto.html":{},"classes/propsSearchDto-1.html":{}}}],["softeng/backend.git",{"_index":1469,"title":{},"body":{"index.html":{}}}],["source",{"_index":4,"title":{},"body":{"controllers/AdminController.html":{},"modules/AdminModule.html":{},"injectables/AdminService.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreateUserDto.html":{},"interfaces/Dorm.html":{},"interfaces/DormAdd.html":{},"classes/DormAddDto.html":{},"controllers/DormController.html":{},"modules/DormModule.html":{},"interfaces/DormQuery.html":{},"injectables/DormService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"interfaces/Lobby.html":{},"controllers/LobbyController.html":{},"modules/LobbyModule.html":{},"injectables/LobbyService.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"classes/LoginUserDto.html":{},"interfaces/PendingAction.html":{},"interfaces/Review.html":{},"classes/ReviewBodyDto.html":{},"controllers/ReviewController.html":{},"modules/ReviewModule.html":{},"classes/ReviewParamDto.html":{},"injectables/ReviewService.html":{},"guards/RoleGuard.html":{},"interfaces/Room.html":{},"interfaces/RoomInterface.html":{},"classes/TicketBodyDto.html":{},"classes/TicketIdDto.html":{},"classes/User.html":{},"interfaces/UserParsedDto.html":{},"interfaces/UserRegisterRes.html":{},"injectables/UserRepository.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"interfaces/Utility.html":{},"interfaces/UtilityInterface.html":{},"interfaces/UtilityInterface-1.html":{},"classes/addDorm.html":{},"classes/chatDto.html":{},"classes/createLobbyDto.html":{},"classes/createLobbyDto-1.html":{},"interfaces/generalUserInfo.html":{},"interfaces/jwtPayload.html":{},"interfaces/jwtToken.html":{},"classes/lobbyCodeDto.html":{},"classes/lobbyIdDto.html":{},"classes/propsSearchDto.html":{},"classes/propsSearchDto-1.html":{},"classes/reviewCodeDto.html":{}}}],["specific",{"_index":828,"title":{},"body":{"injectables/DormService.html":{}}}],["specified",{"_index":1116,"title":{},"body":{"controllers/ReviewController.html":{}}}],["src/.../admin.model.ts",{"_index":1542,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../auth.service.ts",{"_index":1537,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../constants.ts",{"_index":1540,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../create",{"_index":1536,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../dorm.controller.ts",{"_index":1456,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/.../dorm.model.ts",{"_index":1455,"title":{},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["src/.../file",{"_index":1539,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../lobby.model.ts",{"_index":1541,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../main.ts",{"_index":1458,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../review.model.ts",{"_index":1543,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../role.decorator.ts",{"_index":1544,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../users.schemas.ts",{"_index":1534,"title":{},"body":{"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["src/.../users.service.ts",{"_index":1538,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/admin/admin.controller.ts",{"_index":6,"title":{},"body":{"controllers/AdminController.html":{},"coverage.html":{}}}],["src/admin/admin.controller.ts:22",{"_index":45,"title":{},"body":{"controllers/AdminController.html":{}}}],["src/admin/admin.controller.ts:42",{"_index":23,"title":{},"body":{"controllers/AdminController.html":{}}}],["src/admin/admin.controller.ts:48",{"_index":43,"title":{},"body":{"controllers/AdminController.html":{}}}],["src/admin/admin.controller.ts:72",{"_index":33,"title":{},"body":{"controllers/AdminController.html":{}}}],["src/admin/admin.controller.ts:78",{"_index":37,"title":{},"body":{"controllers/AdminController.html":{}}}],["src/admin/admin.dto.ts",{"_index":1206,"title":{},"body":{"classes/TicketBodyDto.html":{},"classes/TicketIdDto.html":{},"coverage.html":{}}}],["src/admin/admin.dto.ts:11",{"_index":1212,"title":{},"body":{"classes/TicketBodyDto.html":{}}}],["src/admin/admin.dto.ts:15",{"_index":1210,"title":{},"body":{"classes/TicketBodyDto.html":{}}}],["src/admin/admin.dto.ts:20",{"_index":1208,"title":{},"body":{"classes/TicketBodyDto.html":{}}}],["src/admin/admin.dto.ts:32",{"_index":1211,"title":{},"body":{"classes/TicketBodyDto.html":{}}}],["src/admin/admin.dto.ts:39",{"_index":1218,"title":{},"body":{"classes/TicketIdDto.html":{}}}],["src/admin/admin.dto.ts:7",{"_index":1214,"title":{},"body":{"classes/TicketBodyDto.html":{}}}],["src/admin/admin.model.ts",{"_index":1067,"title":{},"body":{"interfaces/PendingAction.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/admin/admin.module.ts",{"_index":118,"title":{},"body":{"modules/AdminModule.html":{}}}],["src/admin/admin.service.ts",{"_index":132,"title":{},"body":{"injectables/AdminService.html":{},"coverage.html":{}}}],["src/admin/admin.service.ts:116",{"_index":143,"title":{},"body":{"injectables/AdminService.html":{}}}],["src/admin/admin.service.ts:145",{"_index":144,"title":{},"body":{"injectables/AdminService.html":{}}}],["src/admin/admin.service.ts:15",{"_index":140,"title":{},"body":{"injectables/AdminService.html":{}}}],["src/admin/admin.service.ts:25",{"_index":150,"title":{},"body":{"injectables/AdminService.html":{}}}],["src/admin/admin.service.ts:41",{"_index":146,"title":{},"body":{"injectables/AdminService.html":{}}}],["src/admin/admin.service.ts:54",{"_index":152,"title":{},"body":{"injectables/AdminService.html":{}}}],["src/admin/admin.service.ts:77",{"_index":142,"title":{},"body":{"injectables/AdminService.html":{}}}],["src/admin/admin.service.ts:97",{"_index":151,"title":{},"body":{"injectables/AdminService.html":{}}}],["src/app.controller.ts",{"_index":228,"title":{},"body":{"controllers/AppController.html":{},"coverage.html":{}}}],["src/app.controller.ts:13",{"_index":231,"title":{},"body":{"controllers/AppController.html":{}}}],["src/app.module.ts",{"_index":288,"title":{},"body":{"modules/AppModule.html":{}}}],["src/app.service.ts",{"_index":300,"title":{},"body":{"injectables/AppService.html":{},"coverage.html":{}}}],["src/app.service.ts:10",{"_index":302,"title":{},"body":{"injectables/AppService.html":{}}}],["src/app.service.ts:6",{"_index":304,"title":{},"body":{"injectables/AppService.html":{}}}],["src/auth/auth.controller.ts",{"_index":311,"title":{},"body":{"controllers/AuthController.html":{},"coverage.html":{}}}],["src/auth/auth.controller.ts:23",{"_index":319,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.controller.ts:32",{"_index":324,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.controller.ts:43",{"_index":331,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.controller.ts:50",{"_index":328,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.interface.ts",{"_index":1402,"title":{},"body":{"coverage.html":{},"interfaces/jwtPayload.html":{},"interfaces/jwtToken.html":{}}}],["src/auth/auth.module.ts",{"_index":378,"title":{},"body":{"modules/AuthModule.html":{}}}],["src/auth/auth.service.ts",{"_index":395,"title":{},"body":{"injectables/AuthService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/auth/auth.service.ts:13",{"_index":404,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:19",{"_index":419,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:34",{"_index":413,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:57",{"_index":409,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:62",{"_index":406,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:73",{"_index":411,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:83",{"_index":415,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/constants.ts",{"_index":1404,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/auth/decorator/role.decorator",{"_index":666,"title":{},"body":{"controllers/DormController.html":{},"controllers/LobbyController.html":{}}}],["src/auth/decorator/role.decorator.ts",{"_index":1405,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/auth/guards/jwt",{"_index":664,"title":{},"body":{"controllers/DormController.html":{},"injectables/JwtAuthGuard.html":{},"controllers/LobbyController.html":{},"controllers/UsersController.html":{},"coverage.html":{}}}],["src/auth/guards/local",{"_index":1046,"title":{},"body":{"injectables/LocalAuthGuard.html":{},"coverage.html":{}}}],["src/auth/guards/role.guard",{"_index":665,"title":{},"body":{"controllers/DormController.html":{},"controllers/LobbyController.html":{}}}],["src/auth/guards/role.guard.ts",{"_index":1182,"title":{},"body":{"guards/RoleGuard.html":{},"coverage.html":{}}}],["src/auth/guards/role.guard.ts:12",{"_index":1190,"title":{},"body":{"guards/RoleGuard.html":{}}}],["src/auth/guards/role.guard.ts:5",{"_index":1187,"title":{},"body":{"guards/RoleGuard.html":{}}}],["src/auth/guards/role.guard.ts:8",{"_index":1194,"title":{},"body":{"guards/RoleGuard.html":{}}}],["src/auth/strategies/jwt.strategy.ts",{"_index":855,"title":{},"body":{"injectables/JwtStrategy.html":{},"coverage.html":{}}}],["src/auth/strategies/jwt.strategy.ts:17",{"_index":859,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["src/auth/strategies/jwt.strategy.ts:8",{"_index":857,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["src/auth/strategies/local.strategy.ts",{"_index":1048,"title":{},"body":{"injectables/LocalStrategy.html":{},"coverage.html":{}}}],["src/auth/strategies/local.strategy.ts:12",{"_index":1056,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["src/auth/strategies/local.strategy.ts:13",{"_index":1053,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["src/auth/strategies/local.strategy.ts:8",{"_index":1051,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["src/dorm/dorm.controller.ts",{"_index":626,"title":{},"body":{"controllers/DormController.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{}}}],["src/dorm/dorm.controller.ts:49",{"_index":638,"title":{},"body":{"controllers/DormController.html":{}}}],["src/dorm/dorm.controller.ts:60",{"_index":647,"title":{},"body":{"controllers/DormController.html":{}}}],["src/dorm/dorm.controller.ts:66",{"_index":642,"title":{},"body":{"controllers/DormController.html":{}}}],["src/dorm/dorm.controller.ts:72",{"_index":646,"title":{},"body":{"controllers/DormController.html":{}}}],["src/dorm/dorm.controller.ts:78",{"_index":650,"title":{},"body":{"controllers/DormController.html":{}}}],["src/dorm/dorm.controller.ts:83",{"_index":654,"title":{},"body":{"controllers/DormController.html":{}}}],["src/dorm/dorm.controller.ts:88",{"_index":658,"title":{},"body":{"controllers/DormController.html":{}}}],["src/dorm/dorm.controller.ts:94",{"_index":660,"title":{},"body":{"controllers/DormController.html":{}}}],["src/dorm/dorm.dto.ts",{"_index":578,"title":{},"body":{"classes/DormAddDto.html":{},"interfaces/Room.html":{},"interfaces/Utility.html":{},"classes/addDorm.html":{},"coverage.html":{},"classes/propsSearchDto.html":{}}}],["src/dorm/dorm.dto.ts:10",{"_index":1376,"title":{},"body":{"classes/addDorm.html":{}}}],["src/dorm/dorm.dto.ts:103",{"_index":592,"title":{},"body":{"classes/DormAddDto.html":{}}}],["src/dorm/dorm.dto.ts:107",{"_index":594,"title":{},"body":{"classes/DormAddDto.html":{}}}],["src/dorm/dorm.dto.ts:112",{"_index":587,"title":{},"body":{"classes/DormAddDto.html":{}}}],["src/dorm/dorm.dto.ts:116",{"_index":590,"title":{},"body":{"classes/DormAddDto.html":{}}}],["src/dorm/dorm.dto.ts:120",{"_index":597,"title":{},"body":{"classes/DormAddDto.html":{}}}],["src/dorm/dorm.dto.ts:124",{"_index":582,"title":{},"body":{"classes/DormAddDto.html":{}}}],["src/dorm/dorm.dto.ts:127",{"_index":584,"title":{},"body":{"classes/DormAddDto.html":{}}}],["src/dorm/dorm.dto.ts:130",{"_index":596,"title":{},"body":{"classes/DormAddDto.html":{}}}],["src/dorm/dorm.dto.ts:134",{"_index":595,"title":{},"body":{"classes/DormAddDto.html":{}}}],["src/dorm/dorm.dto.ts:138",{"_index":585,"title":{},"body":{"classes/DormAddDto.html":{}}}],["src/dorm/dorm.dto.ts:141",{"_index":593,"title":{},"body":{"classes/DormAddDto.html":{}}}],["src/dorm/dorm.dto.ts:145",{"_index":583,"title":{},"body":{"classes/DormAddDto.html":{}}}],["src/dorm/dorm.dto.ts:148",{"_index":588,"title":{},"body":{"classes/DormAddDto.html":{}}}],["src/dorm/dorm.dto.ts:151",{"_index":589,"title":{},"body":{"classes/DormAddDto.html":{}}}],["src/dorm/dorm.dto.ts:16",{"_index":1378,"title":{},"body":{"classes/addDorm.html":{}}}],["src/dorm/dorm.dto.ts:20",{"_index":1372,"title":{},"body":{"classes/addDorm.html":{}}}],["src/dorm/dorm.dto.ts:24",{"_index":1374,"title":{},"body":{"classes/addDorm.html":{}}}],["src/dorm/dorm.dto.ts:28",{"_index":1381,"title":{},"body":{"classes/addDorm.html":{}}}],["src/dorm/dorm.dto.ts:32",{"_index":1369,"title":{},"body":{"classes/addDorm.html":{}}}],["src/dorm/dorm.dto.ts:35",{"_index":1379,"title":{},"body":{"classes/addDorm.html":{}}}],["src/dorm/dorm.dto.ts:38",{"_index":1370,"title":{},"body":{"classes/addDorm.html":{}}}],["src/dorm/dorm.dto.ts:41",{"_index":1367,"title":{},"body":{"classes/addDorm.html":{}}}],["src/dorm/dorm.dto.ts:47",{"_index":1494,"title":{},"body":{"classes/propsSearchDto.html":{}}}],["src/dorm/dorm.dto.ts:48",{"_index":1493,"title":{},"body":{"classes/propsSearchDto.html":{}}}],["src/dorm/dorm.dto.ts:49",{"_index":1506,"title":{},"body":{"classes/propsSearchDto.html":{}}}],["src/dorm/dorm.dto.ts:50",{"_index":1497,"title":{},"body":{"classes/propsSearchDto.html":{}}}],["src/dorm/dorm.dto.ts:52",{"_index":1505,"title":{},"body":{"classes/propsSearchDto.html":{}}}],["src/dorm/dorm.dto.ts:53",{"_index":1501,"title":{},"body":{"classes/propsSearchDto.html":{}}}],["src/dorm/dorm.dto.ts:54",{"_index":1495,"title":{},"body":{"classes/propsSearchDto.html":{}}}],["src/dorm/dorm.dto.ts:56",{"_index":1499,"title":{},"body":{"classes/propsSearchDto.html":{}}}],["src/dorm/dorm.dto.ts:57",{"_index":1488,"title":{},"body":{"classes/propsSearchDto.html":{}}}],["src/dorm/dorm.dto.ts:58",{"_index":1489,"title":{},"body":{"classes/propsSearchDto.html":{}}}],["src/dorm/dorm.dto.ts:59",{"_index":1490,"title":{},"body":{"classes/propsSearchDto.html":{}}}],["src/dorm/dorm.dto.ts:63",{"_index":1491,"title":{},"body":{"classes/propsSearchDto.html":{}}}],["src/dorm/dorm.dto.ts:64",{"_index":1500,"title":{},"body":{"classes/propsSearchDto.html":{}}}],["src/dorm/dorm.dto.ts:65",{"_index":1502,"title":{},"body":{"classes/propsSearchDto.html":{}}}],["src/dorm/dorm.dto.ts:66",{"_index":1503,"title":{},"body":{"classes/propsSearchDto.html":{}}}],["src/dorm/dorm.dto.ts:67",{"_index":1498,"title":{},"body":{"classes/propsSearchDto.html":{}}}],["src/dorm/dorm.dto.ts:68",{"_index":1507,"title":{},"body":{"classes/propsSearchDto.html":{}}}],["src/dorm/dorm.dto.ts:69",{"_index":1496,"title":{},"body":{"classes/propsSearchDto.html":{}}}],["src/dorm/dorm.dto.ts:70",{"_index":1504,"title":{},"body":{"classes/propsSearchDto.html":{}}}],["src/dorm/dorm.dto.ts:71",{"_index":1492,"title":{},"body":{"classes/propsSearchDto.html":{}}}],["src/dorm/dorm.dto.ts:99",{"_index":591,"title":{},"body":{"classes/DormAddDto.html":{}}}],["src/dorm/dorm.model",{"_index":1296,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/dorm/dorm.model.ts",{"_index":526,"title":{},"body":{"interfaces/Dorm.html":{},"interfaces/DormAdd.html":{},"interfaces/DormQuery.html":{},"interfaces/RoomInterface.html":{},"interfaces/UtilityInterface.html":{},"interfaces/UtilityInterface-1.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["src/dorm/dorm.module",{"_index":125,"title":{},"body":{"modules/AdminModule.html":{},"modules/AuthModule.html":{},"modules/LobbyModule.html":{},"modules/UsersModule.html":{}}}],["src/dorm/dorm.module.ts",{"_index":755,"title":{},"body":{"modules/DormModule.html":{}}}],["src/dorm/dorm.service.ts",{"_index":757,"title":{},"body":{"injectables/DormService.html":{},"coverage.html":{}}}],["src/dorm/dorm.service.ts:100",{"_index":783,"title":{},"body":{"injectables/DormService.html":{}}}],["src/dorm/dorm.service.ts:12",{"_index":772,"title":{},"body":{"injectables/DormService.html":{}}}],["src/dorm/dorm.service.ts:131",{"_index":787,"title":{},"body":{"injectables/DormService.html":{}}}],["src/dorm/dorm.service.ts:137",{"_index":794,"title":{},"body":{"injectables/DormService.html":{}}}],["src/dorm/dorm.service.ts:143",{"_index":785,"title":{},"body":{"injectables/DormService.html":{}}}],["src/dorm/dorm.service.ts:151",{"_index":792,"title":{},"body":{"injectables/DormService.html":{}}}],["src/dorm/dorm.service.ts:162",{"_index":780,"title":{},"body":{"injectables/DormService.html":{}}}],["src/dorm/dorm.service.ts:175",{"_index":799,"title":{},"body":{"injectables/DormService.html":{}}}],["src/dorm/dorm.service.ts:182",{"_index":782,"title":{},"body":{"injectables/DormService.html":{}}}],["src/dorm/dorm.service.ts:23",{"_index":774,"title":{},"body":{"injectables/DormService.html":{}}}],["src/dorm/dorm.service.ts:245",{"_index":790,"title":{},"body":{"injectables/DormService.html":{}}}],["src/dorm/dorm.service.ts:48",{"_index":777,"title":{},"body":{"injectables/DormService.html":{}}}],["src/dorm/dorm.service.ts:62",{"_index":796,"title":{},"body":{"injectables/DormService.html":{}}}],["src/dorm/dorm.validation.ts",{"_index":1414,"title":{},"body":{"coverage.html":{},"classes/propsSearchDto-1.html":{}}}],["src/dorm/dorm.validation.ts:10",{"_index":1527,"title":{},"body":{"classes/propsSearchDto-1.html":{}}}],["src/dorm/dorm.validation.ts:11",{"_index":1523,"title":{},"body":{"classes/propsSearchDto-1.html":{}}}],["src/dorm/dorm.validation.ts:12",{"_index":1516,"title":{},"body":{"classes/propsSearchDto-1.html":{}}}],["src/dorm/dorm.validation.ts:14",{"_index":1520,"title":{},"body":{"classes/propsSearchDto-1.html":{}}}],["src/dorm/dorm.validation.ts:15",{"_index":1509,"title":{},"body":{"classes/propsSearchDto-1.html":{}}}],["src/dorm/dorm.validation.ts:16",{"_index":1510,"title":{},"body":{"classes/propsSearchDto-1.html":{}}}],["src/dorm/dorm.validation.ts:17",{"_index":1511,"title":{},"body":{"classes/propsSearchDto-1.html":{}}}],["src/dorm/dorm.validation.ts:21",{"_index":1512,"title":{},"body":{"classes/propsSearchDto-1.html":{}}}],["src/dorm/dorm.validation.ts:22",{"_index":1522,"title":{},"body":{"classes/propsSearchDto-1.html":{}}}],["src/dorm/dorm.validation.ts:23",{"_index":1524,"title":{},"body":{"classes/propsSearchDto-1.html":{}}}],["src/dorm/dorm.validation.ts:24",{"_index":1525,"title":{},"body":{"classes/propsSearchDto-1.html":{}}}],["src/dorm/dorm.validation.ts:25",{"_index":1519,"title":{},"body":{"classes/propsSearchDto-1.html":{}}}],["src/dorm/dorm.validation.ts:26",{"_index":1529,"title":{},"body":{"classes/propsSearchDto-1.html":{}}}],["src/dorm/dorm.validation.ts:27",{"_index":1517,"title":{},"body":{"classes/propsSearchDto-1.html":{}}}],["src/dorm/dorm.validation.ts:28",{"_index":1526,"title":{},"body":{"classes/propsSearchDto-1.html":{}}}],["src/dorm/dorm.validation.ts:29",{"_index":1513,"title":{},"body":{"classes/propsSearchDto-1.html":{}}}],["src/dorm/dorm.validation.ts:30",{"_index":1521,"title":{},"body":{"classes/propsSearchDto-1.html":{}}}],["src/dorm/dorm.validation.ts:5",{"_index":1515,"title":{},"body":{"classes/propsSearchDto-1.html":{}}}],["src/dorm/dorm.validation.ts:6",{"_index":1514,"title":{},"body":{"classes/propsSearchDto-1.html":{}}}],["src/dorm/dorm.validation.ts:7",{"_index":1528,"title":{},"body":{"classes/propsSearchDto-1.html":{}}}],["src/dorm/dorm.validation.ts:8",{"_index":1518,"title":{},"body":{"classes/propsSearchDto-1.html":{}}}],["src/file",{"_index":1416,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/lobby/lobby.controller.ts",{"_index":882,"title":{},"body":{"controllers/LobbyController.html":{},"coverage.html":{}}}],["src/lobby/lobby.controller.ts:101",{"_index":928,"title":{},"body":{"controllers/LobbyController.html":{}}}],["src/lobby/lobby.controller.ts:117",{"_index":910,"title":{},"body":{"controllers/LobbyController.html":{}}}],["src/lobby/lobby.controller.ts:126",{"_index":934,"title":{},"body":{"controllers/LobbyController.html":{}}}],["src/lobby/lobby.controller.ts:135",{"_index":903,"title":{},"body":{"controllers/LobbyController.html":{}}}],["src/lobby/lobby.controller.ts:150",{"_index":915,"title":{},"body":{"controllers/LobbyController.html":{}}}],["src/lobby/lobby.controller.ts:157",{"_index":900,"title":{},"body":{"controllers/LobbyController.html":{}}}],["src/lobby/lobby.controller.ts:31",{"_index":912,"title":{},"body":{"controllers/LobbyController.html":{}}}],["src/lobby/lobby.controller.ts:51",{"_index":907,"title":{},"body":{"controllers/LobbyController.html":{}}}],["src/lobby/lobby.controller.ts:63",{"_index":922,"title":{},"body":{"controllers/LobbyController.html":{}}}],["src/lobby/lobby.controller.ts:69",{"_index":920,"title":{},"body":{"controllers/LobbyController.html":{}}}],["src/lobby/lobby.controller.ts:75",{"_index":925,"title":{},"body":{"controllers/LobbyController.html":{}}}],["src/lobby/lobby.controller.ts:95",{"_index":931,"title":{},"body":{"controllers/LobbyController.html":{}}}],["src/lobby/lobby.dto.ts",{"_index":1382,"title":{},"body":{"classes/chatDto.html":{},"coverage.html":{},"classes/createLobbyDto.html":{},"classes/lobbyCodeDto.html":{},"classes/lobbyIdDto.html":{}}}],["src/lobby/lobby.dto.ts:11",{"_index":1425,"title":{},"body":{"classes/createLobbyDto.html":{}}}],["src/lobby/lobby.dto.ts:17",{"_index":1478,"title":{},"body":{"classes/lobbyIdDto.html":{}}}],["src/lobby/lobby.dto.ts:23",{"_index":1477,"title":{},"body":{"classes/lobbyCodeDto.html":{}}}],["src/lobby/lobby.dto.ts:29",{"_index":1387,"title":{},"body":{"classes/chatDto.html":{}}}],["src/lobby/lobby.dto.ts:33",{"_index":1383,"title":{},"body":{"classes/chatDto.html":{}}}],["src/lobby/lobby.dto.ts:37",{"_index":1385,"title":{},"body":{"classes/chatDto.html":{}}}],["src/lobby/lobby.dto.ts:7",{"_index":1424,"title":{},"body":{"classes/createLobbyDto.html":{}}}],["src/lobby/lobby.model.ts",{"_index":871,"title":{},"body":{"interfaces/Lobby.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/lobby/lobby.module.ts",{"_index":973,"title":{},"body":{"modules/LobbyModule.html":{}}}],["src/lobby/lobby.service.ts",{"_index":976,"title":{},"body":{"injectables/LobbyService.html":{},"coverage.html":{}}}],["src/lobby/lobby.service.ts:159",{"_index":1013,"title":{},"body":{"injectables/LobbyService.html":{}}}],["src/lobby/lobby.service.ts:178",{"_index":1005,"title":{},"body":{"injectables/LobbyService.html":{}}}],["src/lobby/lobby.service.ts:18",{"_index":985,"title":{},"body":{"injectables/LobbyService.html":{}}}],["src/lobby/lobby.service.ts:192",{"_index":1003,"title":{},"body":{"injectables/LobbyService.html":{}}}],["src/lobby/lobby.service.ts:199",{"_index":1007,"title":{},"body":{"injectables/LobbyService.html":{}}}],["src/lobby/lobby.service.ts:215",{"_index":1011,"title":{},"body":{"injectables/LobbyService.html":{}}}],["src/lobby/lobby.service.ts:234",{"_index":1009,"title":{},"body":{"injectables/LobbyService.html":{}}}],["src/lobby/lobby.service.ts:26",{"_index":992,"title":{},"body":{"injectables/LobbyService.html":{}}}],["src/lobby/lobby.service.ts:266",{"_index":990,"title":{},"body":{"injectables/LobbyService.html":{}}}],["src/lobby/lobby.service.ts:275",{"_index":1015,"title":{},"body":{"injectables/LobbyService.html":{}}}],["src/lobby/lobby.service.ts:285",{"_index":1001,"title":{},"body":{"injectables/LobbyService.html":{}}}],["src/lobby/lobby.service.ts:291",{"_index":988,"title":{},"body":{"injectables/LobbyService.html":{}}}],["src/lobby/lobby.service.ts:42",{"_index":994,"title":{},"body":{"injectables/LobbyService.html":{}}}],["src/lobby/lobby.service.ts:58",{"_index":996,"title":{},"body":{"injectables/LobbyService.html":{}}}],["src/lobby/lobby.service.ts:78",{"_index":998,"title":{},"body":{"injectables/LobbyService.html":{}}}],["src/lobby/lobby.service.ts:91",{"_index":999,"title":{},"body":{"injectables/LobbyService.html":{}}}],["src/lobby/lobby.validation.ts",{"_index":1419,"title":{},"body":{"coverage.html":{},"classes/createLobbyDto-1.html":{}}}],["src/lobby/lobby.validation.ts:10",{"_index":1427,"title":{},"body":{"classes/createLobbyDto-1.html":{}}}],["src/lobby/lobby.validation.ts:6",{"_index":1426,"title":{},"body":{"classes/createLobbyDto-1.html":{}}}],["src/main.ts",{"_index":1420,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/review/review.controller.ts",{"_index":1092,"title":{},"body":{"controllers/ReviewController.html":{},"coverage.html":{}}}],["src/review/review.controller.ts:26",{"_index":1104,"title":{},"body":{"controllers/ReviewController.html":{}}}],["src/review/review.controller.ts:78",{"_index":1099,"title":{},"body":{"controllers/ReviewController.html":{}}}],["src/review/review.controller.ts:84",{"_index":1102,"title":{},"body":{"controllers/ReviewController.html":{}}}],["src/review/review.controller.ts:98",{"_index":1107,"title":{},"body":{"controllers/ReviewController.html":{}}}],["src/review/review.model.ts",{"_index":1069,"title":{},"body":{"interfaces/Review.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/review/review.module.ts",{"_index":1127,"title":{},"body":{"modules/ReviewModule.html":{}}}],["src/review/review.service.ts",{"_index":1131,"title":{},"body":{"injectables/ReviewService.html":{},"coverage.html":{}}}],["src/review/review.service.ts:116",{"_index":1140,"title":{},"body":{"injectables/ReviewService.html":{}}}],["src/review/review.service.ts:12",{"_index":1138,"title":{},"body":{"injectables/ReviewService.html":{}}}],["src/review/review.service.ts:129",{"_index":1143,"title":{},"body":{"injectables/ReviewService.html":{}}}],["src/review/review.service.ts:142",{"_index":1142,"title":{},"body":{"injectables/ReviewService.html":{}}}],["src/review/review.service.ts:17",{"_index":1147,"title":{},"body":{"injectables/ReviewService.html":{}}}],["src/review/review.service.ts:36",{"_index":1149,"title":{},"body":{"injectables/ReviewService.html":{}}}],["src/review/review.service.ts:54",{"_index":1145,"title":{},"body":{"injectables/ReviewService.html":{}}}],["src/review/review.service.ts:82",{"_index":1150,"title":{},"body":{"injectables/ReviewService.html":{}}}],["src/review/review.service.ts:99",{"_index":1152,"title":{},"body":{"injectables/ReviewService.html":{}}}],["src/review/review.validation.ts",{"_index":1075,"title":{},"body":{"classes/ReviewBodyDto.html":{},"classes/ReviewParamDto.html":{},"coverage.html":{},"classes/reviewCodeDto.html":{}}}],["src/review/review.validation.ts:15",{"_index":1078,"title":{},"body":{"classes/ReviewBodyDto.html":{}}}],["src/review/review.validation.ts:19",{"_index":1083,"title":{},"body":{"classes/ReviewBodyDto.html":{}}}],["src/review/review.validation.ts:24",{"_index":1082,"title":{},"body":{"classes/ReviewBodyDto.html":{}}}],["src/review/review.validation.ts:29",{"_index":1077,"title":{},"body":{"classes/ReviewBodyDto.html":{}}}],["src/review/review.validation.ts:34",{"_index":1080,"title":{},"body":{"classes/ReviewBodyDto.html":{}}}],["src/review/review.validation.ts:41",{"_index":1130,"title":{},"body":{"classes/ReviewParamDto.html":{}}}],["src/review/review.validation.ts:9",{"_index":1531,"title":{},"body":{"classes/reviewCodeDto.html":{}}}],["src/users/dto/create",{"_index":343,"title":{},"body":{"controllers/AuthController.html":{},"classes/CreateUserDto.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/users/dto/login",{"_index":1059,"title":{},"body":{"injectables/LocalStrategy.html":{},"classes/LoginUserDto.html":{},"coverage.html":{}}}],["src/users/repositories/user.repository",{"_index":669,"title":{},"body":{"controllers/DormController.html":{},"modules/DormModule.html":{}}}],["src/users/repositories/user.repository.ts",{"_index":1252,"title":{},"body":{"injectables/UserRepository.html":{},"coverage.html":{}}}],["src/users/repositories/user.repository.ts:13",{"_index":1259,"title":{},"body":{"injectables/UserRepository.html":{}}}],["src/users/repositories/user.repository.ts:21",{"_index":1260,"title":{},"body":{"injectables/UserRepository.html":{}}}],["src/users/repositories/user.repository.ts:25",{"_index":1262,"title":{},"body":{"injectables/UserRepository.html":{}}}],["src/users/repositories/user.repository.ts:29",{"_index":1265,"title":{},"body":{"injectables/UserRepository.html":{}}}],["src/users/repositories/user.repository.ts:9",{"_index":1257,"title":{},"body":{"injectables/UserRepository.html":{}}}],["src/users/schemas/users.schemas",{"_index":421,"title":{},"body":{"injectables/AuthService.html":{},"classes/DormAddDto.html":{},"interfaces/Room.html":{},"interfaces/Utility.html":{},"classes/addDorm.html":{},"classes/chatDto.html":{},"classes/createLobbyDto.html":{},"classes/lobbyCodeDto.html":{},"classes/lobbyIdDto.html":{},"classes/propsSearchDto.html":{}}}],["src/users/schemas/users.schemas.ts",{"_index":1219,"title":{},"body":{"classes/User.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["src/users/schemas/users.schemas.ts:14",{"_index":1233,"title":{},"body":{"classes/User.html":{}}}],["src/users/schemas/users.schemas.ts:17",{"_index":1239,"title":{},"body":{"classes/User.html":{}}}],["src/users/schemas/users.schemas.ts:20",{"_index":1235,"title":{},"body":{"classes/User.html":{}}}],["src/users/schemas/users.schemas.ts:23",{"_index":1227,"title":{},"body":{"classes/User.html":{}}}],["src/users/schemas/users.schemas.ts:26",{"_index":1228,"title":{},"body":{"classes/User.html":{}}}],["src/users/schemas/users.schemas.ts:29",{"_index":1238,"title":{},"body":{"classes/User.html":{}}}],["src/users/schemas/users.schemas.ts:32",{"_index":1229,"title":{},"body":{"classes/User.html":{}}}],["src/users/schemas/users.schemas.ts:35",{"_index":1240,"title":{},"body":{"classes/User.html":{}}}],["src/users/schemas/users.schemas.ts:38",{"_index":1236,"title":{},"body":{"classes/User.html":{}}}],["src/users/schemas/users.schemas.ts:41",{"_index":1237,"title":{},"body":{"classes/User.html":{}}}],["src/users/schemas/users.schemas.ts:44",{"_index":1224,"title":{},"body":{"classes/User.html":{}}}],["src/users/schemas/users.schemas.ts:47",{"_index":1230,"title":{},"body":{"classes/User.html":{}}}],["src/users/users.controller.ts",{"_index":1285,"title":{},"body":{"controllers/UsersController.html":{},"coverage.html":{}}}],["src/users/users.controller.ts:16",{"_index":1294,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/users/users.controller.ts:26",{"_index":1291,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/users/users.interface.ts",{"_index":1249,"title":{},"body":{"interfaces/UserParsedDto.html":{},"interfaces/UserRegisterRes.html":{},"coverage.html":{},"interfaces/generalUserInfo.html":{}}}],["src/users/users.module",{"_index":126,"title":{},"body":{"modules/AdminModule.html":{},"modules/AuthModule.html":{},"modules/DormModule.html":{},"modules/LobbyModule.html":{}}}],["src/users/users.module.ts",{"_index":1316,"title":{},"body":{"modules/UsersModule.html":{}}}],["src/users/users.service",{"_index":346,"title":{},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"controllers/DormController.html":{},"modules/DormModule.html":{}}}],["src/users/users.service.ts",{"_index":1319,"title":{},"body":{"injectables/UsersService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/users/users.service.ts:11",{"_index":1322,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:16",{"_index":1331,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:37",{"_index":1328,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:45",{"_index":1329,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:53",{"_index":1325,"title":{},"body":{"injectables/UsersService.html":{}}}],["star",{"_index":1071,"title":{},"body":{"interfaces/Review.html":{},"classes/ReviewBodyDto.html":{},"classes/ReviewParamDto.html":{},"injectables/ReviewService.html":{},"classes/reviewCodeDto.html":{},"miscellaneous/variables.html":{}}}],["started",{"_index":1460,"title":{"index.html":{}},"body":{}}],["statements",{"_index":1393,"title":{},"body":{"coverage.html":{}}}],["status",{"_index":195,"title":{},"body":{"injectables/AdminService.html":{},"interfaces/PendingAction.html":{},"classes/TicketBodyDto.html":{},"classes/TicketIdDto.html":{},"miscellaneous/variables.html":{}}}],["statuscode",{"_index":93,"title":{},"body":{"controllers/AdminController.html":{},"controllers/LobbyController.html":{},"controllers/ReviewController.html":{}}}],["stop",{"_index":41,"title":{},"body":{"controllers/AdminController.html":{},"injectables/AdminService.html":{},"controllers/DormController.html":{},"injectables/DormService.html":{},"controllers/LobbyController.html":{},"injectables/LobbyService.html":{},"controllers/ReviewController.html":{},"injectables/ReviewService.html":{}}}],["storage",{"_index":256,"title":{},"body":{"controllers/AppController.html":{}}}],["strategies/jwt.strategy",{"_index":387,"title":{},"body":{"modules/AuthModule.html":{}}}],["strategies/local.strategy",{"_index":381,"title":{},"body":{"modules/AuthModule.html":{}}}],["strategy",{"_index":861,"title":{},"body":{"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{}}}],["string",{"_index":40,"title":{},"body":{"controllers/AdminController.html":{},"injectables/AdminService.html":{},"injectables/AppService.html":{},"injectables/AuthService.html":{},"classes/CreateUserDto.html":{},"interfaces/Dorm.html":{},"interfaces/DormAdd.html":{},"classes/DormAddDto.html":{},"controllers/DormController.html":{},"interfaces/DormQuery.html":{},"injectables/DormService.html":{},"interfaces/Lobby.html":{},"controllers/LobbyController.html":{},"injectables/LobbyService.html":{},"injectables/LocalStrategy.html":{},"classes/LoginUserDto.html":{},"interfaces/PendingAction.html":{},"interfaces/Review.html":{},"classes/ReviewBodyDto.html":{},"controllers/ReviewController.html":{},"classes/ReviewParamDto.html":{},"injectables/ReviewService.html":{},"guards/RoleGuard.html":{},"interfaces/Room.html":{},"interfaces/RoomInterface.html":{},"classes/TicketBodyDto.html":{},"classes/TicketIdDto.html":{},"classes/User.html":{},"interfaces/UserParsedDto.html":{},"interfaces/UserRegisterRes.html":{},"injectables/UserRepository.html":{},"injectables/UsersService.html":{},"interfaces/Utility.html":{},"interfaces/UtilityInterface.html":{},"interfaces/UtilityInterface-1.html":{},"classes/addDorm.html":{},"classes/chatDto.html":{},"classes/createLobbyDto.html":{},"classes/createLobbyDto-1.html":{},"interfaces/generalUserInfo.html":{},"interfaces/jwtPayload.html":{},"interfaces/jwtToken.html":{},"classes/lobbyCodeDto.html":{},"classes/lobbyIdDto.html":{},"classes/propsSearchDto.html":{},"classes/propsSearchDto-1.html":{},"classes/reviewCodeDto.html":{},"miscellaneous/variables.html":{}}}],["super",{"_index":865,"title":{},"body":{"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{}}}],["support",{"_index":1480,"title":{},"body":{"modules.html":{}}}],["svg",{"_index":1481,"title":{},"body":{"modules.html":{}}}],["swagger",{"_index":1450,"title":{},"body":{"dependencies.html":{}}}],["table",{"_index":1423,"title":{},"body":{"coverage.html":{}}}],["tablesort(document.getelementbyid('coverage",{"_index":1422,"title":{},"body":{"coverage.html":{}}}],["target",{"_index":180,"title":{},"body":{"injectables/AdminService.html":{},"interfaces/PendingAction.html":{},"classes/TicketBodyDto.html":{},"classes/TicketIdDto.html":{},"miscellaneous/variables.html":{}}}],["telelphone",{"_index":566,"title":{},"body":{"interfaces/Dorm.html":{},"interfaces/DormAdd.html":{},"interfaces/DormQuery.html":{},"interfaces/RoomInterface.html":{},"interfaces/UtilityInterface.html":{},"interfaces/UtilityInterface-1.html":{}}}],["telephone",{"_index":482,"title":{},"body":{"classes/CreateUserDto.html":{},"interfaces/Dorm.html":{},"interfaces/DormAdd.html":{},"classes/DormAddDto.html":{},"interfaces/DormQuery.html":{},"interfaces/Room.html":{},"interfaces/RoomInterface.html":{},"classes/User.html":{},"interfaces/UserParsedDto.html":{},"interfaces/UserRegisterRes.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"interfaces/Utility.html":{},"interfaces/UtilityInterface.html":{},"interfaces/UtilityInterface-1.html":{},"classes/addDorm.html":{},"interfaces/generalUserInfo.html":{},"classes/propsSearchDto.html":{},"miscellaneous/variables.html":{}}}],["test",{"_index":1475,"title":{},"body":{"index.html":{}}}],["this.adminservice.addticket(ticketbody",{"_index":85,"title":{},"body":{"controllers/AdminController.html":{}}}],["this.adminservice.changestatus(ticketid",{"_index":90,"title":{},"body":{"controllers/AdminController.html":{}}}],["this.adminservice.deleteticket(ticketid",{"_index":92,"title":{},"body":{"controllers/AdminController.html":{}}}],["this.adminservice.getsingleticket(ticketid",{"_index":88,"title":{},"body":{"controllers/AdminController.html":{}}}],["this.adminservice.getticketslist(offset",{"_index":80,"title":{},"body":{"controllers/AdminController.html":{}}}],["this.appservice.getalive",{"_index":250,"title":{},"body":{"controllers/AppController.html":{}}}],["this.authserv.invalidatetoken(req.user.userid",{"_index":366,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.authserv.login(req.user",{"_index":363,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.authservice.validateuser(username",{"_index":1060,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["this.checkvalidtoken",{"_index":466,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.dormmodel.find().exec",{"_index":805,"title":{},"body":{"injectables/DormService.html":{}}}],["this.dormmodel.find(propssearch",{"_index":833,"title":{},"body":{"injectables/DormService.html":{}}}],["this.dormmodel.find({owner",{"_index":826,"title":{},"body":{"injectables/DormService.html":{}}}],["this.dormmodel.findbyid(id).exec",{"_index":831,"title":{},"body":{"injectables/DormService.html":{}}}],["this.dormmodel.findbyid(target._id",{"_index":219,"title":{},"body":{"injectables/AdminService.html":{}}}],["this.dormservice.addroom(roomlist",{"_index":688,"title":{},"body":{"controllers/DormController.html":{}}}],["this.dormservice.addutility(util",{"_index":691,"title":{},"body":{"controllers/DormController.html":{}}}],["this.dormservice.getall",{"_index":686,"title":{},"body":{"controllers/DormController.html":{}}}],["this.dormservice.getalldormroom(dormid",{"_index":695,"title":{},"body":{"controllers/DormController.html":{}}}],["this.dormservice.getdormlist(propssearch",{"_index":750,"title":{},"body":{"controllers/DormController.html":{}}}],["this.dormservice.getdormroom(dormid",{"_index":699,"title":{},"body":{"controllers/DormController.html":{},"injectables/LobbyService.html":{}}}],["this.dormservice.getsingledorm(dormid",{"_index":693,"title":{},"body":{"controllers/DormController.html":{},"injectables/LobbyService.html":{}}}],["this.dormservice.insertdorm(dormdto",{"_index":685,"title":{},"body":{"controllers/DormController.html":{}}}],["this.findalllobby(_stop",{"_index":1024,"title":{},"body":{"injectables/LobbyService.html":{}}}],["this.findanupdatereview",{"_index":1177,"title":{},"body":{"injectables/ReviewService.html":{}}}],["this.finddorm(dormid",{"_index":829,"title":{},"body":{"injectables/DormService.html":{}}}],["this.findlobbybydormid(_stop",{"_index":1034,"title":{},"body":{"injectables/LobbyService.html":{}}}],["this.findlobbybydormidandroomid",{"_index":1035,"title":{},"body":{"injectables/LobbyService.html":{}}}],["this.findlobbybyid(lobbyid.lobbyid",{"_index":1043,"title":{},"body":{"injectables/LobbyService.html":{}}}],["this.findreviewbydormid(dormid",{"_index":1160,"title":{},"body":{"injectables/ReviewService.html":{}}}],["this.findreviewbyreviewcode(reviewcode",{"_index":1169,"title":{},"body":{"injectables/ReviewService.html":{}}}],["this.findsingleticket(ticketid",{"_index":210,"title":{},"body":{"injectables/AdminService.html":{}}}],["this.findticket(_stop",{"_index":177,"title":{},"body":{"injectables/AdminService.html":{}}}],["this.getrefreshtoken(payload",{"_index":447,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.jwtserv.decode(refreshtoken",{"_index":455,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.jwtserv.sign(newunsignedpayload",{"_index":474,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.jwtserv.sign(payload",{"_index":446,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.jwtserv.verify(refresh.refresh_token",{"_index":463,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.lobbymodel",{"_index":1020,"title":{},"body":{"injectables/LobbyService.html":{}}}],["this.lobbymodel.find",{"_index":1023,"title":{},"body":{"injectables/LobbyService.html":{}}}],["this.lobbyservice.deletelobby(id",{"_index":964,"title":{},"body":{"controllers/LobbyController.html":{}}}],["this.lobbyservice.getalllobbylist",{"_index":947,"title":{},"body":{"controllers/LobbyController.html":{}}}],["this.lobbyservice.getidbycode(lobbycode",{"_index":954,"title":{},"body":{"controllers/LobbyController.html":{}}}],["this.lobbyservice.getlobbybyid(id",{"_index":969,"title":{},"body":{"controllers/LobbyController.html":{}}}],["this.lobbyservice.getlobbybyid(lobbyid",{"_index":952,"title":{},"body":{"controllers/LobbyController.html":{}}}],["this.lobbyservice.joinlobbyid(req.user",{"_index":957,"title":{},"body":{"controllers/LobbyController.html":{}}}],["this.lobbyservice.kickmember",{"_index":962,"title":{},"body":{"controllers/LobbyController.html":{}}}],["this.lobbyservice.leavelobby(req.user",{"_index":959,"title":{},"body":{"controllers/LobbyController.html":{}}}],["this.lobbyservice.postnewlobby",{"_index":948,"title":{},"body":{"controllers/LobbyController.html":{}}}],["this.lobbyservice.setready(id",{"_index":966,"title":{},"body":{"controllers/LobbyController.html":{}}}],["this.logger.log('local",{"_index":1061,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["this.matchrole(role",{"_index":1204,"title":{},"body":{"guards/RoleGuard.html":{}}}],["this.pendingactionmodel",{"_index":167,"title":{},"body":{"injectables/AdminService.html":{}}}],["this.pendingactionmodel.findbyid(ticketid.ticketid).exec",{"_index":174,"title":{},"body":{"injectables/AdminService.html":{}}}],["this.reflector.get('role",{"_index":1200,"title":{},"body":{"guards/RoleGuard.html":{}}}],["this.reviewmodel",{"_index":1154,"title":{},"body":{"injectables/ReviewService.html":{}}}],["this.reviewmodel.deleteone",{"_index":1178,"title":{},"body":{"injectables/ReviewService.html":{}}}],["this.reviewservice.addreview(reviewbody",{"_index":1121,"title":{},"body":{"controllers/ReviewController.html":{}}}],["this.reviewservice.deletereview(reviewid",{"_index":1124,"title":{},"body":{"controllers/ReviewController.html":{}}}],["this.reviewservice.editreview",{"_index":1122,"title":{},"body":{"controllers/ReviewController.html":{}}}],["this.reviewservice.getreviewlist",{"_index":1117,"title":{},"body":{"controllers/ReviewController.html":{}}}],["this.reviewservice.getsinglereviewbyreviewcode",{"_index":1119,"title":{},"body":{"controllers/ReviewController.html":{}}}],["this.userdtoconversion(dto",{"_index":1363,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.usermodel",{"_index":1278,"title":{},"body":{"injectables/UserRepository.html":{}}}],["this.usermodel.find().exec",{"_index":1280,"title":{},"body":{"injectables/UserRepository.html":{}}}],["this.usermodel.findbyid(target._id",{"_index":217,"title":{},"body":{"injectables/AdminService.html":{}}}],["this.usermodel.findbyid(userid).exec",{"_index":1283,"title":{},"body":{"injectables/UserRepository.html":{}}}],["this.usermodel.findone({email",{"_index":1281,"title":{},"body":{"injectables/UserRepository.html":{}}}],["this.userrepo.create(newdto",{"_index":1365,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.userrepo.findbyemail(email",{"_index":1343,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.userrepo.findbyid(userid",{"_index":1344,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.userserv.create(createuserdto",{"_index":1300,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.userserv.find(username",{"_index":428,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.userserv.findbyid(decodedpayload.userid",{"_index":456,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.userserv.findbyid(req.user.userid",{"_index":1302,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.userserv.findbyid(userid",{"_index":459,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.userservice.findbyid(req.user.userid",{"_index":678,"title":{},"body":{"controllers/DormController.html":{}}}],["this.usersservice",{"_index":1036,"title":{},"body":{"injectables/LobbyService.html":{}}}],["this.utilchk(utilssearch.conveniencestore",{"_index":840,"title":{},"body":{"injectables/DormService.html":{}}}],["this.utilchk(utilssearch.cooking",{"_index":847,"title":{},"body":{"injectables/DormService.html":{}}}],["this.utilchk(utilssearch.fitness",{"_index":845,"title":{},"body":{"injectables/DormService.html":{}}}],["this.utilchk(utilssearch.internet",{"_index":844,"title":{},"body":{"injectables/DormService.html":{}}}],["this.utilchk(utilssearch.laundry",{"_index":841,"title":{},"body":{"injectables/DormService.html":{}}}],["this.utilchk(utilssearch.parking",{"_index":842,"title":{},"body":{"injectables/DormService.html":{}}}],["this.utilchk(utilssearch.pet",{"_index":843,"title":{},"body":{"injectables/DormService.html":{}}}],["this.utilchk(utilssearch.pool",{"_index":846,"title":{},"body":{"injectables/DormService.html":{}}}],["throw",{"_index":70,"title":{},"body":{"controllers/AdminController.html":{},"injectables/AdminService.html":{},"controllers/AuthController.html":{},"controllers/DormController.html":{},"injectables/DormService.html":{},"controllers/LobbyController.html":{},"injectables/LobbyService.html":{},"injectables/LocalStrategy.html":{},"controllers/ReviewController.html":{},"injectables/ReviewService.html":{},"injectables/UsersService.html":{}}}],["ticket",{"_index":165,"title":{},"body":{"injectables/AdminService.html":{}}}],["ticket.createdby.name.firstname",{"_index":190,"title":{},"body":{"injectables/AdminService.html":{}}}],["ticket.createdby.name.lastname",{"_index":192,"title":{},"body":{"injectables/AdminService.html":{}}}],["ticket.createdby.profilepic",{"_index":194,"title":{},"body":{"injectables/AdminService.html":{}}}],["ticket.createdby.userid",{"_index":188,"title":{},"body":{"injectables/AdminService.html":{}}}],["ticket.createdon",{"_index":185,"title":{},"body":{"injectables/AdminService.html":{}}}],["ticket.id",{"_index":179,"title":{},"body":{"injectables/AdminService.html":{}}}],["ticket.newdata",{"_index":183,"title":{},"body":{"injectables/AdminService.html":{}}}],["ticket.save",{"_index":222,"title":{},"body":{"injectables/AdminService.html":{}}}],["ticket.status",{"_index":196,"title":{},"body":{"injectables/AdminService.html":{}}}],["ticket.target",{"_index":181,"title":{},"body":{"injectables/AdminService.html":{}}}],["ticket.type",{"_index":215,"title":{},"body":{"injectables/AdminService.html":{}}}],["ticketbody",{"_index":28,"title":{},"body":{"controllers/AdminController.html":{},"injectables/AdminService.html":{}}}],["ticketbody.createdby.name.firstname",{"_index":204,"title":{},"body":{"injectables/AdminService.html":{}}}],["ticketbody.createdby.name.lastname",{"_index":205,"title":{},"body":{"injectables/AdminService.html":{}}}],["ticketbody.createdby.profilepic",{"_index":206,"title":{},"body":{"injectables/AdminService.html":{}}}],["ticketbody.createdby.userid",{"_index":203,"title":{},"body":{"injectables/AdminService.html":{}}}],["ticketbody.newdata",{"_index":201,"title":{},"body":{"injectables/AdminService.html":{}}}],["ticketbody.status",{"_index":207,"title":{},"body":{"injectables/AdminService.html":{}}}],["ticketbody.target",{"_index":200,"title":{},"body":{"injectables/AdminService.html":{}}}],["ticketbody.type",{"_index":199,"title":{},"body":{"injectables/AdminService.html":{}}}],["ticketbodydto",{"_index":18,"title":{"classes/TicketBodyDto.html":{}},"body":{"controllers/AdminController.html":{},"injectables/AdminService.html":{},"classes/TicketBodyDto.html":{},"classes/TicketIdDto.html":{},"coverage.html":{}}}],["ticketid",{"_index":34,"title":{},"body":{"controllers/AdminController.html":{},"injectables/AdminService.html":{},"classes/TicketBodyDto.html":{},"classes/TicketIdDto.html":{}}}],["ticketid.ticketid",{"_index":225,"title":{},"body":{"injectables/AdminService.html":{}}}],["ticketiddto",{"_index":31,"title":{"classes/TicketIdDto.html":{}},"body":{"controllers/AdminController.html":{},"injectables/AdminService.html":{},"classes/TicketBodyDto.html":{},"classes/TicketIdDto.html":{},"coverage.html":{}}}],["tickets",{"_index":8,"title":{},"body":{"controllers/AdminController.html":{},"injectables/AdminService.html":{}}}],["time",{"_index":880,"title":{},"body":{"interfaces/Lobby.html":{},"controllers/LobbyController.html":{},"classes/chatDto.html":{},"classes/createLobbyDto.html":{},"classes/lobbyCodeDto.html":{},"classes/lobbyIdDto.html":{},"miscellaneous/variables.html":{}}}],["timestamps",{"_index":1246,"title":{},"body":{"classes/User.html":{}}}],["todo",{"_index":681,"title":{},"body":{"controllers/DormController.html":{}}}],["token",{"_index":327,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["token_type",{"_index":438,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/jwtPayload.html":{},"interfaces/jwtToken.html":{}}}],["torole",{"_index":1193,"title":{},"body":{"guards/RoleGuard.html":{}}}],["torole:string",{"_index":1199,"title":{},"body":{"guards/RoleGuard.html":{}}}],["transformer",{"_index":513,"title":{},"body":{"classes/CreateUserDto.html":{},"dependencies.html":{}}}],["true",{"_index":309,"title":{},"body":{"injectables/AppService.html":{},"injectables/AuthService.html":{},"interfaces/Dorm.html":{},"interfaces/DormAdd.html":{},"classes/DormAddDto.html":{},"interfaces/DormQuery.html":{},"injectables/ReviewService.html":{},"guards/RoleGuard.html":{},"interfaces/Room.html":{},"interfaces/RoomInterface.html":{},"classes/User.html":{},"injectables/UsersService.html":{},"interfaces/Utility.html":{},"interfaces/UtilityInterface.html":{},"interfaces/UtilityInterface-1.html":{},"classes/addDorm.html":{},"classes/propsSearchDto.html":{},"classes/propsSearchDto-1.html":{},"miscellaneous/variables.html":{}}}],["try",{"_index":166,"title":{},"body":{"injectables/AdminService.html":{},"injectables/DormService.html":{},"injectables/LobbyService.html":{},"injectables/ReviewService.html":{}}}],["type",{"_index":26,"title":{},"body":{"controllers/AdminController.html":{},"injectables/AdminService.html":{},"injectables/AppService.html":{},"injectables/AuthService.html":{},"classes/CreateUserDto.html":{},"interfaces/Dorm.html":{},"interfaces/DormAdd.html":{},"classes/DormAddDto.html":{},"controllers/DormController.html":{},"interfaces/DormQuery.html":{},"injectables/DormService.html":{},"injectables/JwtStrategy.html":{},"interfaces/Lobby.html":{},"controllers/LobbyController.html":{},"injectables/LobbyService.html":{},"injectables/LocalStrategy.html":{},"classes/LoginUserDto.html":{},"interfaces/PendingAction.html":{},"interfaces/Review.html":{},"classes/ReviewBodyDto.html":{},"controllers/ReviewController.html":{},"classes/ReviewParamDto.html":{},"injectables/ReviewService.html":{},"guards/RoleGuard.html":{},"interfaces/Room.html":{},"interfaces/RoomInterface.html":{},"classes/TicketBodyDto.html":{},"classes/TicketIdDto.html":{},"classes/User.html":{},"interfaces/UserParsedDto.html":{},"interfaces/UserRegisterRes.html":{},"injectables/UserRepository.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"interfaces/Utility.html":{},"interfaces/UtilityInterface.html":{},"interfaces/UtilityInterface-1.html":{},"classes/addDorm.html":{},"classes/chatDto.html":{},"coverage.html":{},"classes/createLobbyDto.html":{},"classes/createLobbyDto-1.html":{},"interfaces/generalUserInfo.html":{},"interfaces/jwtPayload.html":{},"interfaces/jwtToken.html":{},"classes/lobbyCodeDto.html":{},"classes/lobbyIdDto.html":{},"classes/propsSearchDto.html":{},"classes/propsSearchDto-1.html":{},"classes/reviewCodeDto.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["type:[string",{"_index":562,"title":{},"body":{"interfaces/Dorm.html":{},"interfaces/DormAdd.html":{},"interfaces/DormQuery.html":{},"interfaces/RoomInterface.html":{},"interfaces/UtilityInterface.html":{},"interfaces/UtilityInterface-1.html":{},"miscellaneous/variables.html":{}}}],["typealiases",{"_index":1532,"title":{"miscellaneous/typealiases.html":{}},"body":{}}],["ui",{"_index":1451,"title":{},"body":{"dependencies.html":{}}}],["unauthorizedexception",{"_index":334,"title":{},"body":{"controllers/AuthController.html":{},"injectables/LobbyService.html":{},"injectables/LocalStrategy.html":{}}}],["unauthorizedexception('invalid",{"_index":1062,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["undefined",{"_index":69,"title":{},"body":{"controllers/AdminController.html":{},"controllers/DormController.html":{},"injectables/DormService.html":{},"controllers/LobbyController.html":{},"injectables/LobbyService.html":{},"controllers/ReviewController.html":{},"classes/TicketBodyDto.html":{},"classes/TicketIdDto.html":{}}}],["unique",{"_index":1226,"title":{},"body":{"classes/User.html":{},"injectables/UsersService.html":{}}}],["up",{"_index":1293,"title":{},"body":{"controllers/UsersController.html":{}}}],["upload.utils",{"_index":246,"title":{},"body":{"controllers/AppController.html":{}}}],["upload.utils.ts",{"_index":1417,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["uploadedfile",{"_index":237,"title":{},"body":{"controllers/AppController.html":{}}}],["uploadedfile(@uploadedfile",{"_index":262,"title":{},"body":{"controllers/AppController.html":{}}}],["uploadedfiles",{"_index":236,"title":{},"body":{"controllers/AppController.html":{},"controllers/DormController.html":{}}}],["uploadfile(@uploadedfile",{"_index":253,"title":{},"body":{"controllers/AppController.html":{}}}],["uploadmultiplefiles(@uploadedfiles",{"_index":270,"title":{},"body":{"controllers/AppController.html":{}}}],["uploads",{"_index":259,"title":{},"body":{"controllers/AppController.html":{}}}],["useguards",{"_index":332,"title":{},"body":{"controllers/AuthController.html":{},"controllers/DormController.html":{},"controllers/LobbyController.html":{},"controllers/UsersController.html":{}}}],["useguards(jwtauthguard",{"_index":364,"title":{},"body":{"controllers/AuthController.html":{},"controllers/DormController.html":{},"controllers/LobbyController.html":{},"controllers/UsersController.html":{}}}],["useguards(jwtauthguard)@apioauth2(undefined)@get('refresh",{"_index":326,"title":{},"body":{"controllers/AuthController.html":{}}}],["useguards(jwtauthguard)@apioauth2(undefined)@httpcode(httpstatus.ok)@get('verify",{"_index":330,"title":{},"body":{"controllers/AuthController.html":{}}}],["useguards(jwtauthguard)@apioauth2(undefined)@post('sign",{"_index":322,"title":{},"body":{"controllers/AuthController.html":{}}}],["useguards(localauthguard",{"_index":359,"title":{},"body":{"controllers/AuthController.html":{}}}],["useguards(localauthguard)@httpcode(httpstatus.ok)@post('sign",{"_index":318,"title":{},"body":{"controllers/AuthController.html":{}}}],["useinterceptors",{"_index":235,"title":{},"body":{"controllers/AppController.html":{},"controllers/DormController.html":{}}}],["useinterceptors(fileinterceptor('file",{"_index":252,"title":{},"body":{"controllers/AppController.html":{}}}],["user",{"_index":216,"title":{"classes/User.html":{}},"body":{"injectables/AdminService.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"interfaces/Dorm.html":{},"interfaces/DormAdd.html":{},"controllers/DormController.html":{},"interfaces/DormQuery.html":{},"interfaces/Lobby.html":{},"injectables/LobbyService.html":{},"injectables/LocalStrategy.html":{},"interfaces/Review.html":{},"classes/ReviewBodyDto.html":{},"controllers/ReviewController.html":{},"classes/ReviewParamDto.html":{},"injectables/ReviewService.html":{},"guards/RoleGuard.html":{},"interfaces/RoomInterface.html":{},"classes/User.html":{},"injectables/UserRepository.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"interfaces/UtilityInterface.html":{},"interfaces/UtilityInterface-1.html":{},"classes/chatDto.html":{},"coverage.html":{},"classes/createLobbyDto.html":{},"classes/lobbyCodeDto.html":{},"classes/lobbyIdDto.html":{},"classes/reviewCodeDto.html":{},"miscellaneous/variables.html":{}}}],["user._id",{"_index":432,"title":{},"body":{"injectables/AuthService.html":{}}}],["user.dto",{"_index":344,"title":{},"body":{"controllers/AuthController.html":{},"injectables/LocalStrategy.html":{},"injectables/UserRepository.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["user.dto.ts",{"_index":476,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/LoginUserDto.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["user.dto.ts:12",{"_index":1066,"title":{},"body":{"classes/LoginUserDto.html":{}}}],["user.dto.ts:16",{"_index":491,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:23",{"_index":492,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:27",{"_index":499,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:33",{"_index":485,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:39",{"_index":487,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:44",{"_index":498,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:49",{"_index":496,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:55",{"_index":501,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:59",{"_index":494,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:8",{"_index":1064,"title":{},"body":{"classes/LoginUserDto.html":{}}}],["user.name.firstname",{"_index":433,"title":{},"body":{"injectables/AuthService.html":{}}}],["user.name.lastname",{"_index":434,"title":{},"body":{"injectables/AuthService.html":{}}}],["user.pictureprofile",{"_index":436,"title":{},"body":{"injectables/AuthService.html":{}}}],["user.refreshtoken",{"_index":448,"title":{},"body":{"injectables/AuthService.html":{}}}],["user.role",{"_index":1205,"title":{},"body":{"guards/RoleGuard.html":{}}}],["user.save",{"_index":218,"title":{},"body":{"injectables/AdminService.html":{},"injectables/AuthService.html":{}}}],["user.userid",{"_index":1157,"title":{},"body":{"injectables/ReviewService.html":{}}}],["user.usertype",{"_index":437,"title":{},"body":{"injectables/AuthService.html":{}}}],["usercreation",{"_index":1288,"title":{},"body":{"controllers/UsersController.html":{}}}],["usercreation(@body",{"_index":1299,"title":{},"body":{"controllers/UsersController.html":{}}}],["usercreation(createuserdto",{"_index":1292,"title":{},"body":{"controllers/UsersController.html":{}}}],["userdoc",{"_index":427,"title":{},"body":{"injectables/AuthService.html":{},"controllers/DormController.html":{},"controllers/UsersController.html":{}}}],["userdoc.createdon",{"_index":1310,"title":{},"body":{"controllers/UsersController.html":{}}}],["userdoc.email",{"_index":1306,"title":{},"body":{"controllers/UsersController.html":{}}}],["userdoc.email_verified",{"_index":1307,"title":{},"body":{"controllers/UsersController.html":{}}}],["userdoc.hashedpassword",{"_index":431,"title":{},"body":{"injectables/AuthService.html":{}}}],["userdoc.modifiedon",{"_index":1311,"title":{},"body":{"controllers/UsersController.html":{}}}],["userdoc.name.firstname",{"_index":1303,"title":{},"body":{"controllers/UsersController.html":{}}}],["userdoc.name.lastname",{"_index":1304,"title":{},"body":{"controllers/UsersController.html":{}}}],["userdoc.pictureprofile",{"_index":1308,"title":{},"body":{"controllers/UsersController.html":{}}}],["userdoc.refreshtoken",{"_index":458,"title":{},"body":{"injectables/AuthService.html":{}}}],["userdoc.save",{"_index":460,"title":{},"body":{"injectables/AuthService.html":{}}}],["userdoc.sex",{"_index":1309,"title":{},"body":{"controllers/UsersController.html":{}}}],["userdoc.telephone",{"_index":1305,"title":{},"body":{"controllers/UsersController.html":{}}}],["userdoc.usertype",{"_index":1312,"title":{},"body":{"controllers/UsersController.html":{}}}],["userdocument",{"_index":159,"title":{},"body":{"injectables/AdminService.html":{},"injectables/AuthService.html":{},"interfaces/Dorm.html":{},"interfaces/DormAdd.html":{},"classes/DormAddDto.html":{},"controllers/DormController.html":{},"interfaces/DormQuery.html":{},"injectables/DormService.html":{},"interfaces/Lobby.html":{},"interfaces/Room.html":{},"interfaces/RoomInterface.html":{},"classes/User.html":{},"injectables/UserRepository.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"interfaces/Utility.html":{},"interfaces/UtilityInterface.html":{},"interfaces/UtilityInterface-1.html":{},"classes/addDorm.html":{},"classes/chatDto.html":{},"classes/createLobbyDto.html":{},"classes/lobbyCodeDto.html":{},"classes/lobbyIdDto.html":{},"classes/propsSearchDto.html":{},"miscellaneous/typealiases.html":{}}}],["userdtoconversion",{"_index":1320,"title":{},"body":{"injectables/UsersService.html":{}}}],["userdtoconversion(dto",{"_index":1330,"title":{},"body":{"injectables/UsersService.html":{}}}],["userid",{"_index":187,"title":{},"body":{"injectables/AdminService.html":{},"injectables/AuthService.html":{},"controllers/LobbyController.html":{},"injectables/LobbyService.html":{},"interfaces/PendingAction.html":{},"interfaces/Review.html":{},"controllers/ReviewController.html":{},"injectables/ReviewService.html":{},"classes/TicketBodyDto.html":{},"classes/TicketIdDto.html":{},"interfaces/UserParsedDto.html":{},"interfaces/UserRegisterRes.html":{},"injectables/UserRepository.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"interfaces/generalUserInfo.html":{},"interfaces/jwtPayload.html":{},"interfaces/jwtToken.html":{},"miscellaneous/variables.html":{}}}],["usermodel",{"_index":139,"title":{},"body":{"injectables/AdminService.html":{},"injectables/UserRepository.html":{}}}],["username",{"_index":420,"title":{},"body":{"injectables/AuthService.html":{},"injectables/LocalStrategy.html":{}}}],["userparseddto",{"_index":1248,"title":{"interfaces/UserParsedDto.html":{}},"body":{"interfaces/UserParsedDto.html":{},"interfaces/UserRegisterRes.html":{},"injectables/UserRepository.html":{},"injectables/UsersService.html":{},"coverage.html":{},"interfaces/generalUserInfo.html":{}}}],["userregisterres",{"_index":1250,"title":{"interfaces/UserRegisterRes.html":{}},"body":{"interfaces/UserParsedDto.html":{},"interfaces/UserRegisterRes.html":{},"controllers/UsersController.html":{},"coverage.html":{},"interfaces/generalUserInfo.html":{}}}],["userrepo",{"_index":1323,"title":{},"body":{"injectables/UsersService.html":{}}}],["userrepository",{"_index":668,"title":{"injectables/UserRepository.html":{}},"body":{"controllers/DormController.html":{},"modules/DormModule.html":{},"injectables/LobbyService.html":{},"injectables/UserRepository.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"overview.html":{}}}],["users",{"_index":1286,"title":{},"body":{"controllers/UsersController.html":{}}}],["users.controller",{"_index":1318,"title":{},"body":{"modules/UsersModule.html":{}}}],["users.interface",{"_index":1268,"title":{},"body":{"injectables/UserRepository.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["users.service",{"_index":1295,"title":{},"body":{"controllers/UsersController.html":{},"modules/UsersModule.html":{}}}],["users/repositories/user.repository",{"_index":1018,"title":{},"body":{"injectables/LobbyService.html":{}}}],["users/schemas/users.schemas",{"_index":160,"title":{},"body":{"injectables/AdminService.html":{},"interfaces/Dorm.html":{},"interfaces/DormAdd.html":{},"controllers/DormController.html":{},"interfaces/DormQuery.html":{},"injectables/DormService.html":{},"interfaces/Lobby.html":{},"interfaces/RoomInterface.html":{},"interfaces/UtilityInterface.html":{},"interfaces/UtilityInterface-1.html":{}}}],["users/users.module",{"_index":291,"title":{},"body":{"modules/AppModule.html":{}}}],["users/users.service",{"_index":423,"title":{},"body":{"injectables/AuthService.html":{},"injectables/LobbyService.html":{}}}],["userschema",{"_index":571,"title":{},"body":{"interfaces/Dorm.html":{},"interfaces/DormAdd.html":{},"interfaces/DormQuery.html":{},"interfaces/RoomInterface.html":{},"classes/User.html":{},"modules/UsersModule.html":{},"interfaces/UtilityInterface.html":{},"interfaces/UtilityInterface-1.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["userscontroller",{"_index":1284,"title":{"controllers/UsersController.html":{}},"body":{"controllers/UsersController.html":{},"modules/UsersModule.html":{},"coverage.html":{}}}],["userserv",{"_index":358,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/UsersController.html":{}}}],["userservice",{"_index":672,"title":{},"body":{"controllers/DormController.html":{}}}],["usersmodule",{"_index":114,"title":{"modules/UsersModule.html":{}},"body":{"modules/AdminModule.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/DormModule.html":{},"modules/LobbyModule.html":{},"modules/UsersModule.html":{},"modules.html":{},"overview.html":{}}}],["usersrepository",{"_index":984,"title":{},"body":{"injectables/LobbyService.html":{}}}],["usersservice",{"_index":345,"title":{"injectables/UsersService.html":{}},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"controllers/DormController.html":{},"modules/DormModule.html":{},"injectables/LobbyService.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"overview.html":{}}}],["usertype",{"_index":483,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/User.html":{},"interfaces/UserParsedDto.html":{},"interfaces/UserRegisterRes.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"interfaces/generalUserInfo.html":{}}}],["util",{"_index":614,"title":{},"body":{"classes/DormAddDto.html":{},"controllers/DormController.html":{},"injectables/DormService.html":{},"interfaces/Room.html":{},"interfaces/Utility.html":{},"classes/addDorm.html":{},"classes/propsSearchDto.html":{},"classes/propsSearchDto-1.html":{}}}],["utilchk",{"_index":768,"title":{},"body":{"injectables/DormService.html":{}}}],["utilchk(util",{"_index":797,"title":{},"body":{"injectables/DormService.html":{}}}],["utilities",{"_index":580,"title":{},"body":{"classes/DormAddDto.html":{},"interfaces/Room.html":{},"interfaces/Utility.html":{},"classes/addDorm.html":{},"classes/propsSearchDto.html":{}}}],["utility",{"_index":536,"title":{"interfaces/Utility.html":{}},"body":{"interfaces/Dorm.html":{},"interfaces/DormAdd.html":{},"classes/DormAddDto.html":{},"modules/DormModule.html":{},"interfaces/DormQuery.html":{},"injectables/DormService.html":{},"interfaces/Room.html":{},"interfaces/RoomInterface.html":{},"interfaces/Utility.html":{},"interfaces/UtilityInterface.html":{},"interfaces/UtilityInterface-1.html":{},"classes/addDorm.html":{},"coverage.html":{},"classes/propsSearchDto.html":{},"miscellaneous/variables.html":{}}}],["utility.type",{"_index":615,"title":{},"body":{"classes/DormAddDto.html":{},"interfaces/Room.html":{},"interfaces/Utility.html":{},"classes/addDorm.html":{},"classes/propsSearchDto.html":{},"classes/propsSearchDto-1.html":{}}}],["utilityarray",{"_index":778,"title":{},"body":{"injectables/DormService.html":{}}}],["utilityinterface",{"_index":540,"title":{"interfaces/UtilityInterface.html":{},"interfaces/UtilityInterface-1.html":{}},"body":{"interfaces/Dorm.html":{},"interfaces/DormAdd.html":{},"classes/DormAddDto.html":{},"interfaces/DormQuery.html":{},"injectables/DormService.html":{},"interfaces/Room.html":{},"interfaces/RoomInterface.html":{},"interfaces/Utility.html":{},"interfaces/UtilityInterface.html":{},"interfaces/UtilityInterface-1.html":{},"classes/addDorm.html":{},"coverage.html":{},"classes/propsSearchDto.html":{}}}],["utilitymodel",{"_index":770,"title":{},"body":{"injectables/DormService.html":{}}}],["utils",{"_index":690,"title":{},"body":{"controllers/DormController.html":{}}}],["utilschema",{"_index":542,"title":{},"body":{"interfaces/Dorm.html":{},"interfaces/DormAdd.html":{},"modules/DormModule.html":{},"interfaces/DormQuery.html":{},"interfaces/RoomInterface.html":{},"interfaces/UtilityInterface.html":{},"interfaces/UtilityInterface-1.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["utilssearch",{"_index":735,"title":{},"body":{"controllers/DormController.html":{},"injectables/DormService.html":{}}}],["valid",{"_index":464,"title":{},"body":{"injectables/AuthService.html":{}}}],["validate",{"_index":856,"title":{},"body":{"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"injectables/UsersService.html":{}}}],["validate(createuserdto",{"_index":1352,"title":{},"body":{"injectables/UsersService.html":{}}}],["validate(payload",{"_index":858,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["validate(username",{"_index":1052,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["validateif",{"_index":1086,"title":{},"body":{"classes/ReviewBodyDto.html":{},"classes/ReviewParamDto.html":{},"classes/TicketBodyDto.html":{},"classes/TicketIdDto.html":{},"classes/reviewCodeDto.html":{}}}],["validateif(elem",{"_index":1216,"title":{},"body":{"classes/TicketBodyDto.html":{},"classes/TicketIdDto.html":{}}}],["validateuser",{"_index":400,"title":{},"body":{"injectables/AuthService.html":{}}}],["validateuser(username",{"_index":417,"title":{},"body":{"injectables/AuthService.html":{}}}],["validation",{"_index":1349,"title":{},"body":{"injectables/UsersService.html":{}}}],["validator",{"_index":510,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/DormAddDto.html":{},"classes/LoginUserDto.html":{},"classes/ReviewBodyDto.html":{},"classes/ReviewParamDto.html":{},"interfaces/Room.html":{},"classes/TicketBodyDto.html":{},"classes/TicketIdDto.html":{},"injectables/UsersService.html":{},"interfaces/Utility.html":{},"classes/addDorm.html":{},"classes/chatDto.html":{},"classes/createLobbyDto.html":{},"classes/createLobbyDto-1.html":{},"dependencies.html":{},"classes/lobbyCodeDto.html":{},"classes/lobbyIdDto.html":{},"classes/propsSearchDto.html":{},"classes/propsSearchDto-1.html":{},"classes/reviewCodeDto.html":{}}}],["value",{"_index":1054,"title":{},"body":{"injectables/LocalStrategy.html":{},"miscellaneous/variables.html":{}}}],["values",{"_index":1115,"title":{},"body":{"controllers/ReviewController.html":{}}}],["var",{"_index":424,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/Dorm.html":{},"interfaces/DormAdd.html":{},"interfaces/DormQuery.html":{},"injectables/DormService.html":{},"interfaces/RoomInterface.html":{},"injectables/UsersService.html":{},"interfaces/UtilityInterface.html":{},"interfaces/UtilityInterface-1.html":{}}}],["variable",{"_index":1397,"title":{},"body":{"coverage.html":{}}}],["variables",{"_index":1535,"title":{"miscellaneous/variables.html":{}},"body":{"miscellaneous/variables.html":{}}}],["verifytoken",{"_index":316,"title":{},"body":{"controllers/AuthController.html":{}}}],["verifytoken(@request",{"_index":369,"title":{},"body":{"controllers/AuthController.html":{}}}],["verifytoken(req",{"_index":329,"title":{},"body":{"controllers/AuthController.html":{}}}],["void",{"_index":800,"title":{},"body":{"injectables/DormService.html":{}}}],["website",{"_index":557,"title":{},"body":{"interfaces/Dorm.html":{},"interfaces/DormAdd.html":{},"classes/DormAddDto.html":{},"interfaces/DormQuery.html":{},"interfaces/Room.html":{},"interfaces/RoomInterface.html":{},"interfaces/Utility.html":{},"interfaces/UtilityInterface.html":{},"interfaces/UtilityInterface-1.html":{},"classes/addDorm.html":{},"classes/propsSearchDto.html":{},"miscellaneous/variables.html":{}}}],["world",{"_index":306,"title":{},"body":{"injectables/AppService.html":{}}}],["z",{"_index":490,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/DormAddDto.html":{},"interfaces/Room.html":{},"interfaces/Utility.html":{},"classes/addDorm.html":{},"classes/propsSearchDto.html":{}}}],["za",{"_index":489,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/DormAddDto.html":{},"interfaces/Room.html":{},"interfaces/Utility.html":{},"classes/addDorm.html":{},"classes/propsSearchDto.html":{}}}],["zoom",{"_index":115,"title":{},"body":{"modules/AdminModule.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/DormModule.html":{},"modules/LobbyModule.html":{},"modules/ReviewModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"controllers/AdminController.html":{"url":"controllers/AdminController.html","title":"controller - AdminController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AdminController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/admin/admin.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                /tickets\n            \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                addTicket\n                            \n                            \n                                    Async\n                                changeStatus\n                            \n                            \n                                    Async\n                                deleteTicket\n                            \n                            \n                                getSingleTicket\n                            \n                            \n                                getTicketsList\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            addTicket\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    addTicket(ticketBody: TicketBodyDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post()\n                \n            \n\n            \n                \n                    Defined in src/admin/admin.controller.ts:42\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    ticketBody\n                                    \n                                                TicketBodyDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            changeStatus\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    changeStatus(ticketId: TicketIdDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Patch(':ticketId')\n                \n            \n\n            \n                \n                    Defined in src/admin/admin.controller.ts:72\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    ticketId\n                                    \n                                                TicketIdDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            deleteTicket\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    deleteTicket(ticketId: TicketIdDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete(':ticketId')\n                \n            \n\n            \n                \n                    Defined in src/admin/admin.controller.ts:78\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    ticketId\n                                    \n                                                TicketIdDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getSingleTicket\n                        \n                        \n                    \n                \n            \n            \n                \ngetSingleTicket(ticketId: TicketIdDto, offset: string, stop: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get(':ticketId')\n                \n            \n\n            \n                \n                    Defined in src/admin/admin.controller.ts:48\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    ticketId\n                                    \n                                                TicketIdDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    offset\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    stop\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getTicketsList\n                        \n                        \n                    \n                \n            \n            \n                \ngetTicketsList(offset: string, stop: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()\n                \n            \n\n            \n                \n                    Defined in src/admin/admin.controller.ts:22\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    offset\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    stop\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  BadRequestException,\n  Body,\n  Controller,\n  Delete,\n  Get,\n  Param,\n  Patch,\n  Post,\n  Query,\n} from '@nestjs/common';\nimport { AdminService } from './admin.service';\nimport { TicketBodyDto, TicketIdDto } from './admin.dto';\nimport {ApiTags} from '@nestjs/swagger';\n\n@Controller('/tickets')\n@ApiTags('Admin')\nexport class AdminController {\n  constructor(private readonly adminService: AdminService) {}\n\n  @Get()\n  getTicketsList(@Query('offset') offset: string, @Query('stop') stop: string) {\n    if (!(parseInt(offset) === parseFloat(offset) || offset === undefined)) {\n      throw new BadRequestException('offset must be integer.');\n    }\n\n    if (!(parseInt(stop) === parseFloat(stop) || stop === undefined)) {\n      throw new BadRequestException('stop must be integer.');\n    }\n\n    if (offset === undefined) {\n      offset = '0';\n    }\n\n    if (stop === undefined) {\n      stop = '50';\n    }\n    return this.adminService.getTicketsList(offset, stop);\n  }\n\n  @Post()\n  async addTicket(@Body() ticketBody: TicketBodyDto) {\n    const generatedId = await this.adminService.addTicket(ticketBody);\n    return { id: generatedId };\n  }\n\n  @Get(':ticketId')\n  getSingleTicket(\n    @Param() ticketId: TicketIdDto,\n    @Query('offset') offset: string,\n    @Query('stop') stop: string,\n  ) {\n    if (!(parseInt(offset) === parseFloat(offset) || offset === undefined)) {\n      throw new BadRequestException('offset must be integer.');\n    }\n\n    if (!(parseInt(stop) === parseFloat(stop) || stop === undefined)) {\n      throw new BadRequestException('stop must be integer.');\n    }\n\n    if (offset === undefined) {\n      offset = '0';\n    }\n\n    if (stop === undefined) {\n      stop = '50';\n    }\n    return this.adminService.getSingleTicket(ticketId);\n  }\n\n  @Patch(':ticketId')\n  async changeStatus(@Param() ticketId: TicketIdDto) {\n    const generatedId = await this.adminService.changeStatus(ticketId);\n    return { id: generatedId };\n  }\n\n  @Delete(':ticketId')\n  async deleteTicket(@Param() ticketId: TicketIdDto) {\n    await this.adminService.deleteTicket(ticketId);\n    return {\n      statusCode: 200,\n      message: 'OK',\n    };\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AdminModule.html":{"url":"modules/AdminModule.html","title":"module - AdminModule","body":"\n                   \n\n\n\n\n    Modules\n    AdminModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AdminModule\n\n\n\ncluster_AdminModule_exports\n\n\n\ncluster_AdminModule_imports\n\n\n\ncluster_AdminModule_providers\n\n\n\n\nDormModule\n\nDormModule\n\n\n\nAdminModule\n\nAdminModule\n\nAdminModule -->\n\nDormModule->AdminModule\n\n\n\n\n\nUsersModule\n\nUsersModule\n\nAdminModule -->\n\nUsersModule->AdminModule\n\n\n\n\n\nAdminService \n\nAdminService \n\nAdminService  -->\n\nAdminModule->AdminService \n\n\n\n\n\nAdminService\n\nAdminService\n\nAdminModule -->\n\nAdminService->AdminModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/admin/admin.module.ts\n        \n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AdminService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AdminController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            DormModule\n                        \n                        \n                            UsersModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            AdminService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { MongooseModule } from '@nestjs/mongoose';\nimport { AdminController } from './admin.controller';\nimport { AdminService } from './admin.service';\nimport { PendingActionSchema } from './admin.model';\nimport {DormModule} from 'src/dorm/dorm.module';\nimport {UsersModule} from 'src/users/users.module';\n\n@Module({\n  imports: [\n\tDormModule,\n\tUsersModule,\n    MongooseModule.forFeature([{ name: 'PendingAction', schema: PendingActionSchema }]),\n  ],\n  controllers: [AdminController],\n  providers: [AdminService],\n  exports: [AdminService]\n})\nexport class AdminModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AdminService.html":{"url":"injectables/AdminService.html","title":"injectable - AdminService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  AdminService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/admin/admin.service.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                addTicket\n                            \n                            \n                                    Async\n                                changeStatus\n                            \n                            \n                                    Async\n                                deleteTicket\n                            \n                            \n                                    Async\n                                findSingleTicket\n                            \n                            \n                                    Async\n                                findTicket\n                            \n                            \n                                    Async\n                                getSingleTicket\n                            \n                            \n                                    Async\n                                getTicketsList\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(pendingActionModel: Model, DormModel: Model, UserModel: Model)\n                    \n                \n                        \n                            \n                                Defined in src/admin/admin.service.ts:15\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        pendingActionModel\n                                                  \n                                                        \n                                                                        Model\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        DormModel\n                                                  \n                                                        \n                                                                        Model\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        UserModel\n                                                  \n                                                        \n                                                                        Model\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            addTicket\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    addTicket(ticketBody: TicketBodyDto)\n                \n            \n\n\n            \n                \n                    Defined in src/admin/admin.service.ts:77\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    ticketBody\n                                    \n                                                TicketBodyDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            changeStatus\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    changeStatus(ticketId: TicketIdDto)\n                \n            \n\n\n            \n                \n                    Defined in src/admin/admin.service.ts:116\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    ticketId\n                                    \n                                                TicketIdDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            deleteTicket\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    deleteTicket(ticketId: TicketIdDto)\n                \n            \n\n\n            \n                \n                    Defined in src/admin/admin.service.ts:145\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    ticketId\n                                    \n                                                TicketIdDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            findSingleTicket\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    findSingleTicket(ticketId: TicketIdDto)\n                \n            \n\n\n            \n                \n                    Defined in src/admin/admin.service.ts:41\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    ticketId\n                                    \n                                                TicketIdDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            findTicket\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    findTicket(stop: number)\n                \n            \n\n\n            \n                \n                    Defined in src/admin/admin.service.ts:25\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    stop\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            getSingleTicket\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getSingleTicket(ticketId: TicketIdDto)\n                \n            \n\n\n            \n                \n                    Defined in src/admin/admin.service.ts:97\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    ticketId\n                                    \n                                                TicketIdDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            getTicketsList\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getTicketsList(offset: string, stop: string)\n                \n            \n\n\n            \n                \n                    Defined in src/admin/admin.service.ts:54\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    offset\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    stop\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {\n  BadRequestException,\n  Injectable,\n  NotFoundException,\n  Inject,\n} from '@nestjs/common';\nimport { InjectModel } from '@nestjs/mongoose';\nimport { Model } from 'mongoose';\nimport { PendingAction } from './admin.model';\nimport { TicketBodyDto, TicketIdDto } from './admin.dto';\nimport { Dorm } from '../dorm/dorm.model';\nimport { UserDocument } from '../users/schemas/users.schemas';\n\n@Injectable()\nexport class AdminService {\n  constructor(\n\t@InjectModel('PendingAction')\n    private readonly pendingActionModel: Model,\n\t@InjectModel('Dorm')\n    private readonly DormModel: Model,\n\t@InjectModel('User')\n    private readonly UserModel: Model,\n  ) {};\n\n  async findTicket(stop: number): Promise {\n    let ticket;\n    try {\n      ticket = await this.pendingActionModel\n        .find()\n        .limit(stop)\n        .exec();\n    } catch (error) {\n      throw new NotFoundException('Could not find ticket.');\n    }\n    if (!ticket) {\n      throw new NotFoundException('Could not find ticket.');\n    }\n    return ticket;\n  }\n\n  async findSingleTicket(ticketId: TicketIdDto): Promise {\n    let ticket;\n    try {\n      ticket = await this.pendingActionModel.findById(ticketId.ticketId).exec();\n    } catch (error) {\n      throw new NotFoundException('Could not find ticket.');\n    }\n    if (!ticket) {\n      throw new NotFoundException('Could not find ticket.');\n    }\n    return ticket;\n  }\n\n  async getTicketsList(offset: string, stop: string) {\n    const _offset = parseInt(offset);\n    const _stop = parseInt(stop);\n    const tickets = await this.findTicket(_stop);\n    return tickets\n      .map(ticket => ({\n        id: ticket.id,\n        target: ticket.target,\n        newdata: ticket.newdata,\n        createdOn: ticket.createdOn,\n        createdBy: {\n          userId: ticket.createdBy.userId,\n          name: {\n            firstname: ticket.createdBy.name.firstname,\n            lastname: ticket.createdBy.name.lastname,\n          },\n          profilePic: ticket.createdBy.profilePic,\n        },\n        status: ticket.status,\n      }))\n      .slice(_offset);\n  }\n\n  async addTicket(ticketBody: TicketBodyDto) {\n    const newTicket = new this.pendingActionModel({\n      type: ticketBody.type,\n      target: ticketBody.target,\n      newdata: ticketBody.newdata,\n      createdOn: Date.now(),\n      createdBy: {\n        userId: ticketBody.createdBy.userId,\n        name: {\n          firstname: ticketBody.createdBy.name.firstname,\n          lastname: ticketBody.createdBy.name.lastname,\n        },\n        profilePic: ticketBody.createdBy.profilePic,\n      },\n      status: ticketBody.status,\n    });\n    const result = await newTicket.save();\n    return result.id as string;\n  }\n\n  async getSingleTicket(ticketId: TicketIdDto) {\n    const ticket = await this.findSingleTicket(ticketId);\n    return {\n      id: ticket.id,\n      target: ticket.target,\n      newdata: ticket.newdata,\n      createdOn: ticket.createdOn,\n      createdBy: {\n        userId: ticket.createdBy.userId,\n        name: {\n          firstname: ticket.createdBy.name.firstname,\n          lastname: ticket.createdBy.name.lastname,\n        },\n        profilePic: ticket.createdBy.profilePic,\n      },\n      status: ticket.status,\n    };\n  }\n\n  async changeStatus(ticketId: TicketIdDto) {\n    const ticket = await this.findSingleTicket(ticketId);\n    if (ticket.status === 'pending' || ticket.status === 'disapproved') {\n      ticket.status = 'approved';\n      //get target data\n      const target = ticket.target;\n      if (ticket.type === 'user') {\n        let user = await this.UserModel.findById(target._id);\n        user = ticket.newdata;\n        user.save();\n      } else if (ticket.type === 'dorm') {\n        let dorm = await this.DormModel.findById(target._id);\n        dorm = ticket.newdata;\n        dorm.save();\n      } else {\n        throw new BadRequestException('type should be user or dorm');\n      }\n    } else if (ticket.status === 'approved') {\n      ticket.status = 'disapproved';\n    } else {\n      throw new BadRequestException(\n        'Ticket should be pending or disapproved or approved.',\n      );\n    }\n\n    ticket.save();\n    return ticket.id as string;\n  }\n\n  async deleteTicket(ticketId: TicketIdDto) {\n    const result = await this.pendingActionModel\n      .deleteOne({ _id: ticketId.ticketId })\n      .exec();\n    if (result.n === 0) {\n      throw new NotFoundException('Could not find ticket.');\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/AppController.html":{"url":"controllers/AppController.html","title":"controller - AppController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AppController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app.controller.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getAlive\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getAlive\n                        \n                        \n                    \n                \n            \n            \n                \ngetAlive()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('isalive')@HttpCode(HttpStatus.OK)\n                \n            \n\n            \n                \n                    Defined in src/app.controller.ts:13\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Get, HttpStatus, Res,Req, HttpCode, Post, UseInterceptors, UploadedFiles, UploadedFile, Param } from '@nestjs/common';\nimport { FileInterceptor, FilesInterceptor } from '@nestjs/platform-express';\nimport { AppService } from './app.service';\nimport {editFileName, imageFileFilter} from './file-upload.utils'\nimport * as multer from 'multer';\n\n@Controller()\nexport class AppController {\n  constructor(private readonly appService: AppService) {}\n\n  @Get('isalive')\n  @HttpCode(HttpStatus.OK)\n  getAlive(){\n    return this.appService.getAlive();\n  }\n  \n  // @Post('upload')\n  // @UseInterceptors(FileInterceptor('file'))\n  // uploadFile(@UploadedFile() file) {\n  //   console.log(file);\n  // }\n\n  // @Post()\n  // @UseInterceptors(\n  //   FileInterceptor('image', {\n  //     storage: multer.diskStorage({\n  //       destination: './uploads',\n  //       filename: editFileName,\n  //     }),\n  //     fileFilter: imageFileFilter,\n  //   }),\n  // )\n  // async uploadedFile(@UploadedFile() file) {\n  //   const response = {\n  //     originalname: file.originalname,\n  //     filename: file.filename,\n  //   };\n  //   return response;\n  // }\n\n  // @Post('multiple')\n  // @UseInterceptors(\n  //   FilesInterceptor('image', 20, {\n  //     storage: multer.diskStorage({\n  //       destination: './uploads',\n  //       filename: editFileName,\n  //     }),\n  //     fileFilter: imageFileFilter,\n  //   }),\n  // )\n  // async uploadMultipleFiles(@UploadedFiles() files) {\n  //   const response = [];\n  //   files.forEach(file => {\n  //     const fileReponse = {\n  //       originalname: file.originalname,\n  //       filename: file.filename,\n  //     };\n  //     response.push(fileReponse);\n  //   });\n  //   return response;\n  // }\n  // @Get(':imgpath')\n  // seeUploadedFile(@Param('imgpath') image, @Res() res) {\n  //   return res.sendFile(image, { root: './uploads' });\n  // } \n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AppModule.html":{"url":"modules/AppModule.html","title":"module - AppModule","body":"\n                   \n\n\n\n\n    Modules\n    AppModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_AppModule_providers\n\n\n\n\nAdminModule\n\nAdminModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAdminModule->AppModule\n\n\n\n\n\nAuthModule\n\nAuthModule\n\nAppModule -->\n\nAuthModule->AppModule\n\n\n\n\n\nDormModule\n\nDormModule\n\nAppModule -->\n\nDormModule->AppModule\n\n\n\n\n\nLobbyModule\n\nLobbyModule\n\nAppModule -->\n\nLobbyModule->AppModule\n\n\n\n\n\nReviewModule\n\nReviewModule\n\nAppModule -->\n\nReviewModule->AppModule\n\n\n\n\n\nUsersModule\n\nUsersModule\n\nAppModule -->\n\nUsersModule->AppModule\n\n\n\n\n\nAppService\n\nAppService\n\nAppModule -->\n\nAppService->AppModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/app.module.ts\n        \n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AppService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AppController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            AdminModule\n                        \n                        \n                            AuthModule\n                        \n                        \n                            DormModule\n                        \n                        \n                            LobbyModule\n                        \n                        \n                            ReviewModule\n                        \n                        \n                            UsersModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { MongooseModule } from '@nestjs/mongoose';\n\nimport { AppController } from './app.controller';\nimport { AppService } from './app.service';\nimport { AuthModule } from './auth/auth.module';\nimport { UsersModule } from './users/users.module';\n\nimport { DormModule } from './dorm/dorm.module';\nimport { ReviewModule } from './review/review.module';\nimport { AdminModule } from './admin/admin.module';\nimport { LobbyModule } from './lobby/lobby.module';\nimport { MulterModule } from '@nestjs/platform-express';\n\n@Module({\n  imports: [\n    MongooseModule.forRoot('mongodb://mongol:27017/DormLife'),\n    AuthModule,\n    UsersModule,\n    DormModule,\n    ReviewModule,\n    AdminModule,\n    LobbyModule,\n    MulterModule.register({\n      dest:'./uploads'\n    })\n  ],\n  controllers: [AppController],\n  providers: [AppService],\n})\nexport class AppModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AppService.html":{"url":"injectables/AppService.html","title":"injectable - AppService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  AppService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app.service.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getAlive\n                            \n                            \n                                getHello\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getAlive\n                        \n                        \n                    \n                \n            \n            \n                \ngetAlive()\n                \n            \n\n\n            \n                \n                    Defined in src/app.service.ts:10\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     literal type\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getHello\n                        \n                        \n                    \n                \n            \n            \n                \ngetHello()\n                \n            \n\n\n            \n                \n                    Defined in src/app.service.ts:6\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         string\n\n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\n\n@Injectable()\nexport class AppService {\n\n  getHello(): string {\n    return 'Hallo World!';\n  }\n\n  getAlive(): {isalive: boolean} {\n    return {isalive: true}\n  }\n\n  \n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/AuthController.html":{"url":"controllers/AuthController.html","title":"controller - AuthController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AuthController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/auth.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                oauth\n            \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                login\n                            \n                            \n                                    Async\n                                logOut\n                            \n                            \n                                    Async\n                                refresh_token\n                            \n                            \n                                    Async\n                                verifyToken\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            login\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    login(req)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(LocalAuthGuard)@HttpCode(HttpStatus.OK)@Post('sign-in')\n                \n            \n\n            \n                \n                    Defined in src/auth/auth.controller.ts:23\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            logOut\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    logOut(req)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(JwtAuthGuard)@ApiOAuth2(undefined)@Post('sign-out')@HttpCode(HttpStatus.OK)\n                \n            \n\n            \n                \n                    Defined in src/auth/auth.controller.ts:32\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            refresh_token\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    refresh_token(req)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(JwtAuthGuard)@ApiOAuth2(undefined)@Get('refresh-token')\n                \n            \n\n            \n                \n                    Defined in src/auth/auth.controller.ts:50\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            verifyToken\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    verifyToken(req)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(JwtAuthGuard)@ApiOAuth2(undefined)@HttpCode(HttpStatus.OK)@Get('verify-token')\n                \n            \n\n            \n                \n                    Defined in src/auth/auth.controller.ts:43\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, UseGuards, Post, Request, Get, HttpCode, HttpStatus, Body, UnauthorizedException } from '@nestjs/common';\nimport {LocalAuthGuard} from './guards/local-auth.guard';\nimport {AuthService} from './auth.service';\nimport {JwtAuthGuard} from './guards/jwt-auth.guard';\nimport {CreateUserDto} from 'src/users/dto/create-user.dto';\nimport {UsersService} from 'src/users/users.service';\nimport {jwtToken} from './auth.interface';\nimport {RoleGuard} from './guards/role.guard';\nimport {Role} from './decorator/role.decorator';\nimport {ApiTags, ApiBearerAuth, ApiOAuth2} from '@nestjs/swagger';\n\n@ApiTags('Authentication')\n@Controller('oauth')\nexport class AuthController {\n\tconstructor(\n\t\t\tprivate authServ: AuthService,\n\t\t\tprivate userServ: UsersService,\n\t) {}\n\n\t@UseGuards(LocalAuthGuard)\n\t@HttpCode(HttpStatus.OK)\n\t@Post('sign-in')\n\tasync login(@Request() req) {\n\t\tconst payload: jwtToken = await this.authServ.login(req.user);\n\t\treturn payload;\n\t}\n\n\t@UseGuards(JwtAuthGuard)\n\t@ApiOAuth2([])\n\t@Post('sign-out')\n\t@HttpCode(HttpStatus.OK)\n\tasync logOut(@Request() req) {\n\t\tconst result = await this.authServ.invalidateToken(req.user.userId);\n\t\tif(!result){\n\t\t\tthrow new UnauthorizedException();\n\t\t}\n\t}\n\n\t@UseGuards(JwtAuthGuard)\n\t@ApiOAuth2([])\n\t@HttpCode(HttpStatus.OK)\n\t@Get('verify-token')\n\tasync verifyToken(@Request() req) {\n\t\treturn req.user;\n\t}\n\n\t@UseGuards(JwtAuthGuard)\n\t@ApiOAuth2([])\n\t@Get('refresh-token')\n\tasync refresh_token(@Request() req) {\n\t\treturn req.user;\n\t}\n\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AuthModule.html":{"url":"modules/AuthModule.html","title":"module - AuthModule","body":"\n                   \n\n\n\n\n    Modules\n    AuthModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_providers\n\n\n\ncluster_AuthModule_imports\n\n\n\n\nUsersModule\n\nUsersModule\n\n\n\nAuthModule\n\nAuthModule\n\nAuthModule -->\n\nUsersModule->AuthModule\n\n\n\n\n\nAuthService\n\nAuthService\n\nAuthModule -->\n\nAuthService->AuthModule\n\n\n\n\n\nJwtStrategy\n\nJwtStrategy\n\nAuthModule -->\n\nJwtStrategy->AuthModule\n\n\n\n\n\nLocalStrategy\n\nLocalStrategy\n\nAuthModule -->\n\nLocalStrategy->AuthModule\n\n\n\n\n\nUsersService\n\nUsersService\n\nAuthModule -->\n\nUsersService->AuthModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/auth/auth.module.ts\n        \n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AuthService\n                        \n                        \n                            JwtStrategy\n                        \n                        \n                            LocalStrategy\n                        \n                        \n                            UsersService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AuthController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            UsersModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { AuthService } from './auth.service';\nimport {UsersModule} from 'src/users/users.module';\nimport {PassportModule} from '@nestjs/passport';\nimport {LocalStrategy} from './strategies/local.strategy';\nimport { AuthController } from './auth.controller';\nimport {JwtModule} from '@nestjs/jwt';\nimport {jwtConstants} from './constants';\nimport {JwtStrategy} from './strategies/jwt.strategy';\nimport {UsersService} from 'src/users/users.service';\nimport {DormModule} from 'src/dorm/dorm.module';\n\n@Module({\n\timports: [\n\t\tUsersModule,\n\t\tPassportModule.register({\n\t\t\t\tdefaultStrategy: 'jwt',\n\t\t\t\tproperty: 'user',\n\t\t\t\tsession: false,\n\t\t}),\n\t\tJwtModule.register({}),\n\t],\n\tproviders: [\n\t\t\tAuthService,\n\t\t   \tLocalStrategy,\n\t\t   \tJwtStrategy,\n\t\t   \tUsersService,],\n\tcontrollers: [AuthController],\n})\nexport class AuthModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AuthService.html":{"url":"injectables/AuthService.html","title":"injectable - AuthService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  AuthService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/auth.service.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                checkValidToken\n                            \n                            \n                                    Async\n                                getRefreshToken\n                            \n                            \n                                    Async\n                                invalidateToken\n                            \n                            \n                                    Async\n                                login\n                            \n                            \n                                    Async\n                                regenerateToken\n                            \n                            \n                                    Async\n                                validateUser\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(userServ: UsersService, jwtServ: JwtService)\n                    \n                \n                        \n                            \n                                Defined in src/auth/auth.service.ts:13\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        userServ\n                                                  \n                                                        \n                                                                        UsersService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        jwtServ\n                                                  \n                                                        \n                                                                    JwtService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            checkValidToken\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    checkValidToken(refreshToken: string)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/auth.service.ts:62\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    refreshToken\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            getRefreshToken\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getRefreshToken(payload)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/auth.service.ts:57\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    payload\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            invalidateToken\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    invalidateToken(userId)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/auth.service.ts:73\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            login\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    login(user: UserDocument)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/auth.service.ts:34\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    user\n                                    \n                                                UserDocument\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            regenerateToken\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    regenerateToken(refresh)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/auth.service.ts:83\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    refresh\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            validateUser\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    validateUser(username: string, password: string)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/auth.service.ts:19\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    username\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    password\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, Inject } from '@nestjs/common';\n\nimport { UserDocument } from 'src/users/schemas/users.schemas';\nimport { JwtService } from '@nestjs/jwt';\nimport { jwtPayload, jwtToken } from './auth.interface';\nimport { UsersService } from '../users/users.service';\nimport { jwtConstants } from './constants';\n\n\nvar bcrypt = require('bcryptjs');\n\n@Injectable()\nexport class AuthService {\n\tconstructor(\n\t\tprivate userServ: UsersService,\n\t\tprivate jwtServ: JwtService,\n\t) {}\n\n\tasync validateUser(username: string, password: string): Promise{\n\t\tconst userDoc = await this.userServ.find(username);\n\t\tif (!userDoc) {\n\t\t\treturn null;\n\t\t}\n\t\tconst result = await bcrypt.compare(password, userDoc.hashedPassword);\n\t\tif (result) {\n\t\t\treturn userDoc;\n\t\t}\n\t\telse {\n\t\t\treturn null;\n\t\t}\n\n\t}\n\n\tasync login(user: UserDocument): Promise{\n\t\tconst payload: jwtPayload = {\n\t\t\tuserId: user._id,\n\t\t\tname: {\n\t\t\t\tfirstName: user.name.firstName,\n\t\t\t\tlastName: user.name.lastName\n\t\t\t},\n\t\t\tavatar: user.PictureProfile,\n\t\t\trole: user.userType,\n\t\t\ttoken_type: 'Bearer'\n\t\t};\n\t\tconst access_options = {secret: jwtConstants.secret, expiresIn: '15m'};\n\t\tconst access_token: string = this.jwtServ.sign(payload, access_options);\n\t\tconst refresh_token = await this.getRefreshToken(payload);\n\t\tuser.refreshToken = refresh_token;\n\t\t// save new refresh_token to db\n\t\tuser.save();\n\t\treturn {\n\t\t\taccess_token: access_token,\n\t\t\trefresh_token: refresh_token\n\t\t};\n\t}\n\n\tasync getRefreshToken(payload): Promise {\n\t\tconst options = { secret: jwtConstants.refreshSecret, expiresIn: '30d'};\n\t\treturn this.jwtServ.sign(payload, options);\n\t}\n\n\tasync checkValidToken(refreshToken: string): Promise {\n\t\tconst decodedPayload: any = this.jwtServ.decode(refreshToken)\n\t\tconst userDoc: UserDocument = await this.userServ.findById(decodedPayload.userId);\n\t\t// revoke ?\n\t\tif (userDoc.refreshToken != refreshToken) {\n\t\t\treturn null;\n\t\t}\n\t\t// return payload\n\t\treturn decodedPayload;\n\t}\n\n\tasync invalidateToken(userId): Promise{\n\t\tconst userDoc: UserDocument = await this.userServ.findById(userId);\n\t\tif (!userDoc) {\n\t\t\treturn null;\n\t\t}\n\t\tuserDoc.refreshToken = null;\n\t\tuserDoc.save();\n\t\treturn true;\n\t}\n\n\tasync regenerateToken(refresh): Promise {\n\t\t// regenerate access token\n\t\tconst options = {secret: jwtConstants.refreshSecret};\n\t\tif (await this.jwtServ.verify(refresh.refresh_token, options)) {\n\t\t\t// If valid\n\t\t\tconst oldSingedPayload: any = this.checkValidToken(\n\t\t\t\trefresh.refresh_token\n\t\t\t);\n\t\t\tif (!oldSingedPayload) {\n\t\t\t\treturn null;\n\t\t\t}\n\t\t\tconst newUnsignedPayload: jwtPayload = {\n\t\t\t\tuserId: oldSingedPayload.userId,\n\t\t\t\tname: {\n\t\t\t\t\tfirstName: oldSingedPayload.name.firstName,\n\t\t\t\t\tlastName: oldSingedPayload.name.lastName,\n\t\t\t\t},\n\t\t\t\tavatar: oldSingedPayload.avatar,\n\t\t\t\trole: oldSingedPayload.role,\n\t\t\t\ttoken_type: 'Bearer'\n\t\t\t}\n\t\t\treturn {\n\t\t\t\taccess_token: this.jwtServ.sign(newUnsignedPayload),\n\t\t\t\trefresh_token: oldSingedPayload,\n\t\t\t}\n\t\t}\n\t\telse {\n\t\t\treturn null;\n\t\t}\n\t}\n\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateUserDto.html":{"url":"classes/CreateUserDto.html","title":"class - CreateUserDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateUserDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/dto/create-user.dto.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Readonly\n                                email\n                            \n                            \n                                email_verified\n                            \n                            \n                                    Readonly\n                                firstName\n                            \n                            \n                                    Readonly\n                                lastName\n                            \n                            \n                                natId\n                            \n                            \n                                password\n                            \n                            \n                                    Readonly\n                                sex\n                            \n                            \n                                telephone\n                            \n                            \n                                    Readonly\n                                userType\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                            email\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiProperty()@IsNotEmpty()@IsEmail()@Expose()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/users/dto/create-user.dto.ts:33\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            email_verified\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiProperty()@IsNotEmpty()@Expose()@IsIn(undefined)\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/users/dto/create-user.dto.ts:39\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                            firstName\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiProperty()@IsNotEmpty()@IsString()@Expose()@Matches(/[a-zA-Z]+/)\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/users/dto/create-user.dto.ts:16\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                            lastName\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiProperty()@IsNotEmpty()@IsString()@Expose()@Matches(/[a-zA-Z]+/)\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/users/dto/create-user.dto.ts:23\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            natId\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiProperty()@Expose()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/users/dto/create-user.dto.ts:59\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            password\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiProperty()@IsNotEmpty()@Expose()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/users/dto/create-user.dto.ts:49\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                            sex\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiProperty()@IsIn(sex)@Expose()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/users/dto/create-user.dto.ts:44\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            telephone\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiProperty()@Expose()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/users/dto/create-user.dto.ts:27\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                            userType\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiProperty()@IsNotEmpty()@Expose()@IsIn(allowedUsertype)\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/users/dto/create-user.dto.ts:55\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsNotEmpty, IsEmail, Matches, IsIn, IsBoolean, IsString, MinLength, MaxLength } from 'class-validator';\nimport {Exclude, Expose} from 'class-transformer';\nimport {ApiProperty} from '@nestjs/swagger';\n\n\nconst sex: string[] = ['male', 'female'];\nconst allowedUsertype: string[] = ['general', 'owner'];\n\n@Exclude()\nexport class CreateUserDto {\n\t@ApiProperty()\n\t@IsNotEmpty()\n\t@IsString()\n\t@Expose()\n\t@Matches(/[a-zA-Z]+/)\n\treadonly firstName: string;\n\n\t@ApiProperty()\n\t@IsNotEmpty()\n\t@IsString()\n\t@Expose()\n\t@Matches(/[a-zA-Z]+/)\n\treadonly lastName: string;\n\n\t@ApiProperty()\n\t@Expose()\n\ttelephone: string;\n\n\t@ApiProperty()\n\t@IsNotEmpty()\n\t@IsEmail()\n\t@Expose()\n\treadonly email: string;\n\n\t@ApiProperty()\n\t@IsNotEmpty()\n\t@Expose()\n\t@IsIn([\"true\", \"false\"])\n\temail_verified: string;\n\n\t@ApiProperty()\n\t@IsIn(sex)\n\t@Expose()\n\treadonly sex: string;\n\n\t@ApiProperty()\n\t@IsNotEmpty()\n\t@Expose()\n\tpassword: string;\n\n\t@ApiProperty()\n\t@IsNotEmpty()\n\t@Expose()\n\t@IsIn(allowedUsertype)\n\treadonly userType: string;\n\n\t@ApiProperty()\n\t@Expose()\n\tnatId: string;\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/Dorm.html":{"url":"interfaces/Dorm.html","title":"interface - Dorm","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  Dorm\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/dorm/dorm.model.ts\n        \n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        address\n                                \n                                \n                                        allowedSex\n                                \n                                \n                                        approved\n                                \n                                \n                                        approvedOn\n                                \n                                \n                                        avgStar\n                                \n                                \n                                        code\n                                \n                                \n                                        contact\n                                \n                                \n                                        createdOn\n                                \n                                \n                                        id\n                                \n                                \n                                        image\n                                \n                                \n                                        license\n                                \n                                \n                                        modifiedOn\n                                \n                                \n                                        name\n                                \n                                \n                                        owner\n                                \n                                \n                                        room\n                                \n                                \n                                        utility\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        address\n                                    \n                                \n                                \n                                    \n                                        address:     literal type\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     literal type\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        allowedSex\n                                    \n                                \n                                \n                                    \n                                        allowedSex:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        approved\n                                    \n                                \n                                \n                                    \n                                        approved:         approval\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         approval\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        approvedOn\n                                    \n                                \n                                \n                                    \n                                        approvedOn:         Date\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         Date\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        avgStar\n                                    \n                                \n                                \n                                    \n                                        avgStar:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        code\n                                    \n                                \n                                \n                                    \n                                        code:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        contact\n                                    \n                                \n                                \n                                    \n                                        contact:     literal type\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     literal type\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        createdOn\n                                    \n                                \n                                \n                                    \n                                        createdOn:         Date\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         Date\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        id\n                                    \n                                \n                                \n                                    \n                                        id:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        image\n                                    \n                                \n                                \n                                    \n                                        image:     string[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     string[]\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        license\n                                    \n                                \n                                \n                                    \n                                        license:     string[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     string[]\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        modifiedOn\n                                    \n                                \n                                \n                                    \n                                        modifiedOn:         Date\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         Date\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        name\n                                    \n                                \n                                \n                                    \n                                        name:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        owner\n                                    \n                                \n                                \n                                    \n                                        owner:         UserDocument\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         UserDocument\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        room\n                                    \n                                \n                                \n                                    \n                                        room:     RoomInterface[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     RoomInterface[]\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        utility\n                                    \n                                \n                                \n                                    \n                                        utility:     UtilityInterface[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     UtilityInterface[]\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import * as mongoose from 'mongoose';\nimport { UserDocument } from '../users/schemas/users.schemas';\n\nenum approval {\n  'approved',\n  'disapproved',\n  'pending',\n}\n\nexport const utilSchema = new mongoose.Schema({\n  type: { type: String },\n  distance: { type: Number },\n  description: { type: String },\n});\n\nexport const RoomSchema = new mongoose.Schema({\n  name: { type: String },\n  capacity: { type: Number },\n  image: { type: [String] },\n  bathroom: { type: Number },\n  aircond: { type: Number },\n  kitchen: { type: Number },\n  bedroom: { type: Number },\n  description: { type: String },\n  price: {\n    amount: { type: Number },\n    pricePer: { type: Number },\n  },\n  allowedSex: { type: String, enum: ['any', 'male', 'female'] },\n});\n\nvar contactSchema = new mongoose.Schema({\n  telephone: { type: String },\n  email: { type: String },\n  lineID: { type: String },\n  website: { type: String },\n});\n\nexport const DormSchema = new mongoose.Schema({\n  name: { type: String },\n  code: { type: String },\n  owner: { }, //{ type: mongoose.Schema.Types.ObjectId, ref: 'User' },\n  contact: contactSchema,\n  address: {\n    address: { type: String },\n    coordinate: {\n      type: [Number],\n    },\n  },\n  utility: [utilSchema],\n  type: { type: String },\n  description: { type: String },\n  room: [RoomSchema],\n  allowedSex: { type: String },\n  avgStar: { type: Number },\n  image: {type:[String]},\n  license: { type: [String] },\n  createdOn: { type: Date },\n  modifiedOn: { type: Date },\n  approved: {\n    type: String,\n    enum: ['approved', 'disapproved', 'pending'],\n    index: true,\n    default: 'pending',\n  },\n  approvedOn: { type: Date },\n});\n\nexport interface UtilityInterface extends mongoose.Document {\n  type: string;\n  distance: number;\n  description: string;\n}\n\nexport interface UtilityInterface extends mongoose.Document {\n  type: string;\n  distance: number;\n  description: string;\n}\n\nexport interface RoomInterface extends mongoose.Document {\n  id: string;\n  name: string;\n  capacity: number;\n  image: string[];\n  bathroom: number;\n  aircond: number;\n  kitchen: number;\n  bedroom: number;\n  description: string;\n  price: {\n    amount: number;\n    pricePer: number;\n  };\n  allowedSex: string;\n}\n\nexport interface Dorm extends mongoose.Document {\n  id: string;\n  name: string;\n  owner: UserDocument;\n  code: string;\n  contact: {\n    telelphone: string;\n    email: string;\n    lineOD: string;\n    website: string;\n  };\n  address: {\n    address: string;\n    coordinate: number[];\n  };\n  utility: UtilityInterface[];\n  room: RoomInterface[];\n  allowedSex: string;\n  avgStar: number;\n  image:string[];\n  license: string[];\n  createdOn: Date;\n  modifiedOn: Date;\n  approved: approval;\n  approvedOn: Date;\n}\n\nexport interface DormAdd extends mongoose.Document {\n  name: string;\n  code: string;\n  owner: UserDocument; //change to userschema here\n  contact: {\n    telephone: string;\n    email: string;\n    lineID: string;\n    website: string;\n  };\n  address: {\n    address: string;\n    coordinate: { type: 'Point'; coordinates: number[] };\n  };\n  utility: Array;\n  room: Array;\n  allowedSex: string;\n  avgStar: number;\n  license: string[];\n}\n\nexport interface DormQuery extends mongoose.Document {\n  name: string;\n  address: {\n    address: string;\n    coordinate: [Number];\n  };\n  utility: Array;\n  room: Array;\n  allowedSex: string;\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/DormAdd.html":{"url":"interfaces/DormAdd.html","title":"interface - DormAdd","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  DormAdd\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/dorm/dorm.model.ts\n        \n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        address\n                                \n                                \n                                        allowedSex\n                                \n                                \n                                        avgStar\n                                \n                                \n                                        code\n                                \n                                \n                                        contact\n                                \n                                \n                                        license\n                                \n                                \n                                        name\n                                \n                                \n                                        owner\n                                \n                                \n                                        room\n                                \n                                \n                                        utility\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        address\n                                    \n                                \n                                \n                                    \n                                        address:     literal type\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     literal type\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        allowedSex\n                                    \n                                \n                                \n                                    \n                                        allowedSex:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        avgStar\n                                    \n                                \n                                \n                                    \n                                        avgStar:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        code\n                                    \n                                \n                                \n                                    \n                                        code:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        contact\n                                    \n                                \n                                \n                                    \n                                        contact:     literal type\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     literal type\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        license\n                                    \n                                \n                                \n                                    \n                                        license:     string[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     string[]\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        name\n                                    \n                                \n                                \n                                    \n                                        name:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        owner\n                                    \n                                \n                                \n                                    \n                                        owner:         UserDocument\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         UserDocument\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        room\n                                    \n                                \n                                \n                                    \n                                        room:     Array\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     Array\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        utility\n                                    \n                                \n                                \n                                    \n                                        utility:     Array\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     Array\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import * as mongoose from 'mongoose';\nimport { UserDocument } from '../users/schemas/users.schemas';\n\nenum approval {\n  'approved',\n  'disapproved',\n  'pending',\n}\n\nexport const utilSchema = new mongoose.Schema({\n  type: { type: String },\n  distance: { type: Number },\n  description: { type: String },\n});\n\nexport const RoomSchema = new mongoose.Schema({\n  name: { type: String },\n  capacity: { type: Number },\n  image: { type: [String] },\n  bathroom: { type: Number },\n  aircond: { type: Number },\n  kitchen: { type: Number },\n  bedroom: { type: Number },\n  description: { type: String },\n  price: {\n    amount: { type: Number },\n    pricePer: { type: Number },\n  },\n  allowedSex: { type: String, enum: ['any', 'male', 'female'] },\n});\n\nvar contactSchema = new mongoose.Schema({\n  telephone: { type: String },\n  email: { type: String },\n  lineID: { type: String },\n  website: { type: String },\n});\n\nexport const DormSchema = new mongoose.Schema({\n  name: { type: String },\n  code: { type: String },\n  owner: { }, //{ type: mongoose.Schema.Types.ObjectId, ref: 'User' },\n  contact: contactSchema,\n  address: {\n    address: { type: String },\n    coordinate: {\n      type: [Number],\n    },\n  },\n  utility: [utilSchema],\n  type: { type: String },\n  description: { type: String },\n  room: [RoomSchema],\n  allowedSex: { type: String },\n  avgStar: { type: Number },\n  image: {type:[String]},\n  license: { type: [String] },\n  createdOn: { type: Date },\n  modifiedOn: { type: Date },\n  approved: {\n    type: String,\n    enum: ['approved', 'disapproved', 'pending'],\n    index: true,\n    default: 'pending',\n  },\n  approvedOn: { type: Date },\n});\n\nexport interface UtilityInterface extends mongoose.Document {\n  type: string;\n  distance: number;\n  description: string;\n}\n\nexport interface UtilityInterface extends mongoose.Document {\n  type: string;\n  distance: number;\n  description: string;\n}\n\nexport interface RoomInterface extends mongoose.Document {\n  id: string;\n  name: string;\n  capacity: number;\n  image: string[];\n  bathroom: number;\n  aircond: number;\n  kitchen: number;\n  bedroom: number;\n  description: string;\n  price: {\n    amount: number;\n    pricePer: number;\n  };\n  allowedSex: string;\n}\n\nexport interface Dorm extends mongoose.Document {\n  id: string;\n  name: string;\n  owner: UserDocument;\n  code: string;\n  contact: {\n    telelphone: string;\n    email: string;\n    lineOD: string;\n    website: string;\n  };\n  address: {\n    address: string;\n    coordinate: number[];\n  };\n  utility: UtilityInterface[];\n  room: RoomInterface[];\n  allowedSex: string;\n  avgStar: number;\n  image:string[];\n  license: string[];\n  createdOn: Date;\n  modifiedOn: Date;\n  approved: approval;\n  approvedOn: Date;\n}\n\nexport interface DormAdd extends mongoose.Document {\n  name: string;\n  code: string;\n  owner: UserDocument; //change to userschema here\n  contact: {\n    telephone: string;\n    email: string;\n    lineID: string;\n    website: string;\n  };\n  address: {\n    address: string;\n    coordinate: { type: 'Point'; coordinates: number[] };\n  };\n  utility: Array;\n  room: Array;\n  allowedSex: string;\n  avgStar: number;\n  license: string[];\n}\n\nexport interface DormQuery extends mongoose.Document {\n  name: string;\n  address: {\n    address: string;\n    coordinate: [Number];\n  };\n  utility: Array;\n  room: Array;\n  allowedSex: string;\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/DormAddDto.html":{"url":"classes/DormAddDto.html","title":"class - DormAddDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  DormAddDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/dorm/dorm.dto.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Readonly\n                                address\n                            \n                            \n                                    Readonly\n                                allowedSex\n                            \n                            \n                                    Readonly\n                                coordinate\n                            \n                            \n                                    Readonly\n                                description\n                            \n                            \n                                    Readonly\n                                email\n                            \n                            \n                                image\n                            \n                            \n                                license\n                            \n                            \n                                    Readonly\n                                lineID\n                            \n                            \n                                    Readonly\n                                name\n                            \n                            \n                                owner\n                            \n                            \n                                rooms\n                            \n                            \n                                    Readonly\n                                telephone\n                            \n                            \n                                    Readonly\n                                type\n                            \n                            \n                                    Readonly\n                                utilities\n                            \n                            \n                                    Readonly\n                                website\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                            address\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsString()@IsNotEmpty()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/dorm/dorm.dto.ts:124\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                            allowedSex\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsString()@IsNotEmpty()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/dorm/dorm.dto.ts:145\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                            coordinate\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     number[]\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsNotEmpty()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/dorm/dorm.dto.ts:127\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                            description\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsString()@IsNotEmpty()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/dorm/dorm.dto.ts:138\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                            email\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsString()@IsNotEmpty()@IsEmail()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/dorm/dorm.dto.ts:112\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            image\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     string[]\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsNotEmpty()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/dorm/dorm.dto.ts:148\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            license\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     string[]\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsNotEmpty()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/dorm/dorm.dto.ts:151\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                            lineID\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsString()@IsNotEmpty()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/dorm/dorm.dto.ts:116\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                            name\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsString()@IsNotEmpty()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/dorm/dorm.dto.ts:99\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            owner\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         UserDocument\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsString()@IsNotEmpty()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/dorm/dorm.dto.ts:103\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            rooms\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     RoomInterface[]\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsNotEmpty()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/dorm/dorm.dto.ts:141\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                            telephone\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsString()@IsNotEmpty()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/dorm/dorm.dto.ts:107\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                            type\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsString()@IsNotEmpty()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/dorm/dorm.dto.ts:134\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                            utilities\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     UtilityInterface[]\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsNotEmpty()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/dorm/dorm.dto.ts:130\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                            website\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsString()@IsNotEmpty()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/dorm/dorm.dto.ts:120\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {ApiProperty} from \"@nestjs/swagger\";\nimport {IsNotEmpty, Matches, IsString, IsNumberString, IsEmail, IsUrl} from \"class-validator\";\nimport { UserDocument } from \"src/users/schemas/users.schemas\";\nimport { RoomInterface, UtilityInterface } from \"./dorm.model\";\n\nexport class addDorm {\n\t@ApiProperty()\n\t@IsNotEmpty()\n\t@Matches(/[a-zA-Z]+/)\n\treadonly name: string;\n\n\t@ApiProperty()\n\t@IsNotEmpty()\n\t@IsString()\n\t@Matches(/[0-9]+/)\n\treadonly telephone: string;\n\n\t@ApiProperty()\n\t@IsEmail()\n\treadonly email: string;\n\n\t@ApiProperty()\n\t@IsString()\n\treadonly lineID: string;\n\n\t@ApiProperty()\n\t@IsUrl()\n\treadonly website: string;\n\n\t@ApiProperty()\n\t@IsNotEmpty()\n\tcoordinate: [number];\n\n\t@ApiProperty()\n\ttype: string;\n\n\t@ApiProperty()\n\tdescription: string;\n\n\t@ApiProperty()\n\tallowedSex: string;\n\n}\n\nexport class propsSearchDto {\n  //dorm\n  dormName: string;\n  distance: number; // address.coord - kaset.coord\n  rating: number;\n  gender: string;\n  //room\n  price: number;\n  maxperson: number;\n  dormType: string;\n  //room2\n  kitchen: number; //true = 0, false = 999999999999999999\n  aircond: number; //true = 0, false = 999999999999999999\n  bathroom: number; //true = 0, false = 999999999999999999\n  bedroom: number; //true = 0, false = 999999999999999999\n\n  //util\n  // in utility.type\n  convenienceStore: string; //true = convenienceStore, false = ''\n  laundry: string; // true = laundry, false = ''\n  parking: string;\n  pet: string;\n  internet: string;\n  smoking: string;\n  fitness: string;\n  pool: string;\n  cooking: string;\n}\n\ninterface Room {\n  name: string;\n  capacity: number;\n  image: string[];\n  bathroom: number;\n  aircond: number;\n  kitchen: number;\n  bedroom: number;\n  description: string;\n  price: {\n    amount: number;\n    pricePer: number;\n  };\n  allowedSex: string;\n}\n\ninterface Utility {\n  type: string;\n  distance: number;\n  description: string;\n}\n\nexport class DormAddDto {\n  @IsString()\n  @IsNotEmpty()\n  readonly name: string;\n\n  @IsString()\n  @IsNotEmpty()\n  owner: UserDocument;\n\n  @IsString()\n  @IsNotEmpty()\n  readonly telephone: string;\n\n  @IsString()\n  @IsNotEmpty()\n  @IsEmail()\n  readonly email: string;\n\n  @IsString()\n  @IsNotEmpty()\n  readonly lineID: string;\n\n  @IsString()\n  @IsNotEmpty()\n  readonly website: string;\n\n  @IsString()\n  @IsNotEmpty()\n  readonly address: string;\n\n  @IsNotEmpty()\n  readonly coordinate: number[];\n\n  @IsNotEmpty()\n  readonly utilities: UtilityInterface[];\n\n  @IsString()\n  @IsNotEmpty()\n  readonly type: string;\n\n  @IsString()\n  @IsNotEmpty()\n  readonly description: string;\n\n  @IsNotEmpty()\n  rooms: RoomInterface[];\n\n  @IsString()\n  @IsNotEmpty()\n  readonly allowedSex: string;\n\n  @IsNotEmpty()\n  image: string[];\n  \n  @IsNotEmpty()\n  license: string[];\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/DormController.html":{"url":"controllers/DormController.html","title":"controller - DormController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  DormController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/dorm/dorm.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                /dorms\n            \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                AddDorm\n                            \n                            \n                                    Async\n                                addRoom\n                            \n                            \n                                    Async\n                                addUtil\n                            \n                            \n                                    Async\n                                getAlldorm\n                            \n                            \n                                getDorm\n                            \n                            \n                                getRoom\n                            \n                            \n                                getSingleRoom\n                            \n                            \n                                    Async\n                                queryDorm\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            AddDorm\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    AddDorm(dormDto: DormAddDto, req)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('newdorm')@UseGuards(JwtAuthGuard, RoleGuard)@Role('owner')\n                \n            \n\n            \n                \n                    Defined in src/dorm/dorm.controller.ts:49\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    dormDto\n                                    \n                                                DormAddDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    req\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            addRoom\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    addRoom(roomlist: any[])\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('/room')\n                \n            \n\n            \n                \n                    Defined in src/dorm/dorm.controller.ts:66\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    roomlist\n                                    \n                                            any[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            addUtil\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    addUtil(util: any[])\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('util')\n                \n            \n\n            \n                \n                    Defined in src/dorm/dorm.controller.ts:72\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    util\n                                    \n                                            any[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            getAlldorm\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getAlldorm()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()\n                \n            \n\n            \n                \n                    Defined in src/dorm/dorm.controller.ts:60\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     {}\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getDorm\n                        \n                        \n                    \n                \n            \n            \n                \ngetDorm(dormID: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get(':id')\n                \n            \n\n            \n                \n                    Defined in src/dorm/dorm.controller.ts:78\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    dormID\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getRoom\n                        \n                        \n                    \n                \n            \n            \n                \ngetRoom(dormID: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get(':id/rooms')\n                \n            \n\n            \n                \n                    Defined in src/dorm/dorm.controller.ts:83\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    dormID\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getSingleRoom\n                        \n                        \n                    \n                \n            \n            \n                \ngetSingleRoom(dormID: string, roomID: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get(':id/rooms/:roomid')\n                \n            \n\n            \n                \n                    Defined in src/dorm/dorm.controller.ts:88\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    dormID\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    roomID\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            queryDorm\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    queryDorm(name: string, distance: string, rating: string, allowedSex: string, price: string, maxPerson: string, kitchen: string, dormType: string, airCond: string, bathroom: string, bedroom: string, convenienceStore: string, laundry: string, parking: string, pet: string, internet: string, smoking: string, fitness: string, pool: string, cooking: string, offset: string, stop: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post()\n                \n            \n\n            \n                \n                    Defined in src/dorm/dorm.controller.ts:94\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    name\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    distance\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    rating\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    allowedSex\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    price\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    maxPerson\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    kitchen\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    dormType\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    airCond\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    bathroom\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    bedroom\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    convenienceStore\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    laundry\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    parking\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    pet\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    internet\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    smoking\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    fitness\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    pool\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    cooking\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    offset\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    stop\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  BadRequestException,\n  Body,\n  Controller,\n  Get,\n  HttpStatus,\n  Param,\n  Post,\n  Query,\n  Res,\n  Request,\n  UploadedFiles,\n  UseGuards,\n  UseInterceptors,\n  Inject,\n  Dependencies,\n} from '@nestjs/common';\nimport { DormService } from './dorm.service';\n\nimport {ApiTags} from '@nestjs/swagger';\nenum Sex {\n  'male',\n  'female',\n  'any',\n}\n\nimport { UserDocument } from '../users/schemas/users.schemas';\nimport { DormAddDto, propsSearchDto } from './dorm.dto';\nimport { JwtAuthGuard } from 'src/auth/guards/jwt-auth.guard';\nimport { RoleGuard } from 'src/auth/guards/role.guard';\nimport { Role } from 'src/auth/decorator/role.decorator';\nimport { FilesInterceptor } from '@nestjs/platform-express';\nimport { diskStorage} from 'multer';\nimport { UsersService } from 'src/users/users.service';\nimport { UserRepository } from 'src/users/repositories/user.repository';\n\n\n@Controller('/dorms')\n@ApiTags('Dorms')\nexport class DormController {\n  constructor(\n    private readonly DormService: DormService,\n    private readonly UserService: UsersService,\n    ) {}\n  \n  @Post('newdorm')\n  @UseGuards(JwtAuthGuard, RoleGuard)\n  @Role('owner')\n  async AddDorm(@Body() dormDto:DormAddDto, @Request() req) {\n    // Resolve User Info\n    const userDoc: UserDocument = await this.UserService.findById(req.user.userId);\n    dormDto.owner = userDoc;\n    // Insert to Dorm \n    // TODO: Should not insert to dorm directly ? pending request instead.\n    const createdDorm = await this.DormService.insertDorm(dormDto);\n    return createdDorm;\n  }\n  \n  @Get()\n  async getAlldorm() {\n    const dorms = await this.DormService.getAll();\n    return dorms;\n  }\n\n  @Post('/room')\n  async addRoom(@Body('room') roomlist: any[]) {\n    const rooms = await this.DormService.addRoom(roomlist);\n    return rooms;\n  }\n\n  @Post('util')\n  async addUtil(@Body('util') util: any[]) {\n    const utils = await this.DormService.addUtility(util);\n    return utils;\n  }\n\n  @Get(':id')\n  getDorm(@Param('id') dormID: string) {\n    return this.DormService.getSingleDorm(dormID);\n  }\n\n  @Get(':id/rooms')\n  getRoom(@Param('id') dormID: string) {\n    return this.DormService.getAllDormRoom(dormID);\n  }\n\n  @Get(':id/rooms/:roomid')\n  getSingleRoom(@Param('id') dormID: string, @Param('roomid') roomID: string) {\n    // console.log(roomID);\n    return this.DormService.getDormRoom(dormID, roomID);\n  }\n\n  @Post()\n  async queryDorm(\n    // @Body() propsSearch: propsSearchDto,\n    @Query('name') name: string,\n    @Query('distance') distance: string,\n    @Query('rating') rating: string,\n    @Query('allowedSex') allowedSex: string,\n    @Query('price') price: string,\n    @Query('maxperson') maxPerson: string,\n    @Query('kitchen') kitchen: string,\n    @Query('type') dormType: string,\n    @Query('aircond') airCond: string,\n    @Query('bathroom') bathroom: string,\n    @Query('bedroom') bedroom: string,\n    @Query('convenienceStore') convenienceStore: string,\n    @Query('laundry') laundry: string,\n    @Query('parking') parking: string,\n    @Query('pet') pet: string,\n    @Query('internet') internet: string,\n    @Query('smoking') smoking: string,\n    @Query('fitness') fitness: string,\n    @Query('pool') pool: string,\n    @Query('cooking') cooking: string,\n    @Query('offset') offset: string,\n    @Query('stop') stop: string,\n  ) {\n    if (!(parseInt(offset) === parseFloat(offset) || offset === undefined)) {\n      throw new BadRequestException('offset must be integer.');\n    }\n\n    if (!(parseInt(stop) === parseFloat(stop) || stop === undefined)) {\n      throw new BadRequestException('stop must be integer.');\n    }\n\n    if (offset === undefined) {\n      offset = '0';\n    }\n\n    if (stop === undefined) {\n      stop = '50';\n    }\n\n    let propsSearch = {\n      name: name,\n      allowedSex: allowedSex,\n      type: dormType,\n      distance: parseInt(distance),\n      rating: parseInt(rating),\n      'room.price.amount': parseInt(price),\n      'room.capacity': parseInt(maxPerson),\n      'room.kitchen': parseInt(kitchen),\n      'room.aircond': parseInt(airCond),\n      'room.bathroom': parseInt(bathroom),\n      'room.bedroom': parseInt(bedroom),\n    };\n    let utilsSearch = {\n      convenienceStore: convenienceStore,\n      laundry: laundry,\n      parking: parking,\n      pet: pet,\n      internet: internet,\n      smoking: smoking,\n      fitness: fitness,\n      pool: pool,\n      cooking: cooking,\n    }\n\n    if (!name) {\n      delete propsSearch.name;\n    }\n    if (!distance) {\n      propsSearch.distance = -1;\n    }\n    if (!rating) {\n      propsSearch.rating = -1;\n    }\n    if (!allowedSex) {\n      delete propsSearch.allowedSex;\n    }\n    if (!dormType) {\n      delete propsSearch.type;\n    }\n    if (!price) {\n      propsSearch['room.price.amount'] = 99999999999999999999999999999999999;\n    }\n    if (!maxPerson) {\n      delete propsSearch['room.capacity'];\n    }\n    if (!kitchen) {\n      propsSearch['room.kitchen'] = -1;\n    }\n    if (!airCond) {\n      propsSearch['room.aircond'] = -1;\n    }\n    if (!bathroom) {\n      propsSearch['room.bathroom'] = -1;\n    }\n    if (!bedroom) {\n      propsSearch['room.bedroom'] = -1;\n    }\n\n    console.log(utilsSearch);\n    const dorms = await this.DormService.getDormList(propsSearch, utilsSearch, offset, stop);\n    return dorms;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/DormModule.html":{"url":"modules/DormModule.html","title":"module - DormModule","body":"\n                   \n\n\n\n\n    Modules\n    DormModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_DormModule\n\n\n\ncluster_DormModule_providers\n\n\n\ncluster_DormModule_exports\n\n\n\ncluster_DormModule_imports\n\n\n\n\nUsersModule\n\nUsersModule\n\n\n\nDormModule\n\nDormModule\n\nDormModule -->\n\nUsersModule->DormModule\n\n\n\n\n\nDormService \n\nDormService \n\nDormService  -->\n\nDormModule->DormService \n\n\n\n\n\nDormService\n\nDormService\n\nDormModule -->\n\nDormService->DormModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/dorm/dorm.module.ts\n        \n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            DormService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            DormController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            UsersModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            DormService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { MongooseModule } from '@nestjs/mongoose';\nimport { DormController } from './dorm.controller';\nimport { DormService } from './dorm.service';\nimport { DormSchema, RoomSchema, utilSchema } from './dorm.model';\nimport { UsersModule } from 'src/users/users.module';\nimport { UsersService } from 'src/users/users.service';\nimport { UserRepository } from 'src/users/repositories/user.repository';\n\n@Module({\n  imports: [\n    UsersModule,\n    MongooseModule.forFeature([{ name: 'Room', schema: RoomSchema }]),\n  \tMongooseModule.forFeature([{ name: 'Dorm', schema: DormSchema }]),\n    MongooseModule.forFeature([{ name: 'Utility', schema: utilSchema }]),\n  ],\n  controllers: [DormController],\n  providers: [DormService],\n  exports: [DormService, MongooseModule.forFeature([{ name: 'Dorm', schema: DormSchema }]),],\n})\nexport class DormModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/DormQuery.html":{"url":"interfaces/DormQuery.html","title":"interface - DormQuery","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  DormQuery\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/dorm/dorm.model.ts\n        \n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        address\n                                \n                                \n                                        allowedSex\n                                \n                                \n                                        name\n                                \n                                \n                                        room\n                                \n                                \n                                        utility\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        address\n                                    \n                                \n                                \n                                    \n                                        address:     literal type\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     literal type\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        allowedSex\n                                    \n                                \n                                \n                                    \n                                        allowedSex:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        name\n                                    \n                                \n                                \n                                    \n                                        name:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        room\n                                    \n                                \n                                \n                                    \n                                        room:     Array\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     Array\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        utility\n                                    \n                                \n                                \n                                    \n                                        utility:     Array\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     Array\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import * as mongoose from 'mongoose';\nimport { UserDocument } from '../users/schemas/users.schemas';\n\nenum approval {\n  'approved',\n  'disapproved',\n  'pending',\n}\n\nexport const utilSchema = new mongoose.Schema({\n  type: { type: String },\n  distance: { type: Number },\n  description: { type: String },\n});\n\nexport const RoomSchema = new mongoose.Schema({\n  name: { type: String },\n  capacity: { type: Number },\n  image: { type: [String] },\n  bathroom: { type: Number },\n  aircond: { type: Number },\n  kitchen: { type: Number },\n  bedroom: { type: Number },\n  description: { type: String },\n  price: {\n    amount: { type: Number },\n    pricePer: { type: Number },\n  },\n  allowedSex: { type: String, enum: ['any', 'male', 'female'] },\n});\n\nvar contactSchema = new mongoose.Schema({\n  telephone: { type: String },\n  email: { type: String },\n  lineID: { type: String },\n  website: { type: String },\n});\n\nexport const DormSchema = new mongoose.Schema({\n  name: { type: String },\n  code: { type: String },\n  owner: { }, //{ type: mongoose.Schema.Types.ObjectId, ref: 'User' },\n  contact: contactSchema,\n  address: {\n    address: { type: String },\n    coordinate: {\n      type: [Number],\n    },\n  },\n  utility: [utilSchema],\n  type: { type: String },\n  description: { type: String },\n  room: [RoomSchema],\n  allowedSex: { type: String },\n  avgStar: { type: Number },\n  image: {type:[String]},\n  license: { type: [String] },\n  createdOn: { type: Date },\n  modifiedOn: { type: Date },\n  approved: {\n    type: String,\n    enum: ['approved', 'disapproved', 'pending'],\n    index: true,\n    default: 'pending',\n  },\n  approvedOn: { type: Date },\n});\n\nexport interface UtilityInterface extends mongoose.Document {\n  type: string;\n  distance: number;\n  description: string;\n}\n\nexport interface UtilityInterface extends mongoose.Document {\n  type: string;\n  distance: number;\n  description: string;\n}\n\nexport interface RoomInterface extends mongoose.Document {\n  id: string;\n  name: string;\n  capacity: number;\n  image: string[];\n  bathroom: number;\n  aircond: number;\n  kitchen: number;\n  bedroom: number;\n  description: string;\n  price: {\n    amount: number;\n    pricePer: number;\n  };\n  allowedSex: string;\n}\n\nexport interface Dorm extends mongoose.Document {\n  id: string;\n  name: string;\n  owner: UserDocument;\n  code: string;\n  contact: {\n    telelphone: string;\n    email: string;\n    lineOD: string;\n    website: string;\n  };\n  address: {\n    address: string;\n    coordinate: number[];\n  };\n  utility: UtilityInterface[];\n  room: RoomInterface[];\n  allowedSex: string;\n  avgStar: number;\n  image:string[];\n  license: string[];\n  createdOn: Date;\n  modifiedOn: Date;\n  approved: approval;\n  approvedOn: Date;\n}\n\nexport interface DormAdd extends mongoose.Document {\n  name: string;\n  code: string;\n  owner: UserDocument; //change to userschema here\n  contact: {\n    telephone: string;\n    email: string;\n    lineID: string;\n    website: string;\n  };\n  address: {\n    address: string;\n    coordinate: { type: 'Point'; coordinates: number[] };\n  };\n  utility: Array;\n  room: Array;\n  allowedSex: string;\n  avgStar: number;\n  license: string[];\n}\n\nexport interface DormQuery extends mongoose.Document {\n  name: string;\n  address: {\n    address: string;\n    coordinate: [Number];\n  };\n  utility: Array;\n  room: Array;\n  allowedSex: string;\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/DormService.html":{"url":"injectables/DormService.html","title":"injectable - DormService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  DormService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/dorm/dorm.service.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                addRoom\n                            \n                            \n                                addUtility\n                            \n                            \n                                    Private\n                                    Async\n                                findDorm\n                            \n                            \n                                    Private\n                                    Async\n                                findDormList\n                            \n                            \n                                    Async\n                                getAll\n                            \n                            \n                                    Async\n                                getAllDormRoom\n                            \n                            \n                                    Async\n                                getDormByOwner\n                            \n                            \n                                    Async\n                                getDormList\n                            \n                            \n                                    Async\n                                getDormRoom\n                            \n                            \n                                    Async\n                                getSingleDorm\n                            \n                            \n                                    Async\n                                insertDorm\n                            \n                            \n                                    Private\n                                utilChk\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(DormModel: Model, UtilityModel: Model, RoomModel: Model)\n                    \n                \n                        \n                            \n                                Defined in src/dorm/dorm.service.ts:12\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        DormModel\n                                                  \n                                                        \n                                                                        Model\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        UtilityModel\n                                                  \n                                                        \n                                                                    Model\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        RoomModel\n                                                  \n                                                        \n                                                                    Model\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            addRoom\n                        \n                        \n                    \n                \n            \n            \n                \naddRoom(roomArray: RoomInterface[])\n                \n            \n\n\n            \n                \n                    Defined in src/dorm/dorm.service.ts:23\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    roomArray\n                                    \n                                            RoomInterface[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            addUtility\n                        \n                        \n                    \n                \n            \n            \n                \naddUtility(utilityArray: UtilityInterface[])\n                \n            \n\n\n            \n                \n                    Defined in src/dorm/dorm.service.ts:48\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    utilityArray\n                                    \n                                            UtilityInterface[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Private\n                            Async\n                            findDorm\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    findDorm(id: string)\n                \n            \n\n\n            \n                \n                    Defined in src/dorm/dorm.service.ts:162\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Private\n                            Async\n                            findDormList\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    findDormList(propsSearch, utilsSearch, stop: string)\n                \n            \n\n\n            \n                \n                    Defined in src/dorm/dorm.service.ts:182\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    propsSearch\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    utilsSearch\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    stop\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            getAll\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getAll()\n                \n            \n\n\n            \n                \n                    Defined in src/dorm/dorm.service.ts:100\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     Promise\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            getAllDormRoom\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getAllDormRoom(dormID: string)\n                \n            \n\n\n            \n                \n                    Defined in src/dorm/dorm.service.ts:143\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    dormID\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            getDormByOwner\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getDormByOwner(dormOwner: UserDocument)\n                \n            \n\n\n            \n                \n                    Defined in src/dorm/dorm.service.ts:131\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    dormOwner\n                                    \n                                                UserDocument\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            getDormList\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getDormList(propsSearch, utilsSearch, offset: string, stop: string)\n                \n            \n\n\n            \n                \n                    Defined in src/dorm/dorm.service.ts:245\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    propsSearch\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    utilsSearch\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    offset\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    stop\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            getDormRoom\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getDormRoom(dormID: string, roomID: string)\n                \n            \n\n\n            \n                \n                    Defined in src/dorm/dorm.service.ts:151\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    dormID\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    roomID\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            getSingleDorm\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getSingleDorm(dormID: string)\n                \n            \n\n\n            \n                \n                    Defined in src/dorm/dorm.service.ts:137\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    dormID\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            insertDorm\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    insertDorm(dorm: DormAddDto)\n                \n            \n\n\n            \n                \n                    Defined in src/dorm/dorm.service.ts:62\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    dorm\n                                    \n                                                DormAddDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Private\n                            utilChk\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    utilChk(util: string, arr: any)\n                \n            \n\n\n            \n                \n                    Defined in src/dorm/dorm.service.ts:175\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    util\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    arr\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {\n  Injectable,\n  NotFoundException,\n} from '@nestjs/common';\nimport { Model } from 'mongoose';\nimport { InjectModel } from '@nestjs/mongoose';\nimport { Dorm, UtilityInterface, RoomInterface } from './dorm.model';\nimport { UserDocument } from '../users/schemas/users.schemas';\nimport { DormAddDto } from './dorm.dto';\n\n@Injectable()\nexport class DormService {\n  constructor(\n    @InjectModel('Dorm')\n\t  private readonly DormModel: Model,\n    @InjectModel('Utility')\n    private readonly UtilityModel: Model,\n    @InjectModel('Room') private readonly RoomModel: Model,\n  ) {}\n\n\n  // Create room array\n  addRoom(roomArray: RoomInterface[]) {\n    var newRoomArray: any[] = [];\n\n    for (var i = 0; i  {\n    const dorm = await this.DormModel.find().exec();\n\n    return dorm.map(d => ({\n      id: d.id,\n      name: d.name,\n      address: {\n        address: d.address.address,\n        coordinate: d.address.coordinate,\n      },\n      utility: d.utility.map(res => ({\n        type: res.type,\n        distance: res.distance,\n        description: res.description,\n      })),\n      room: d.room.map(res => ({\n        price: res.price,\n        image: res.image,\n        name: res.name,\n        capacity: res.capacity,\n        bathroom: res.bathroom,\n        aircond: res.aircond,\n        kitchen: res.kitchen,\n        bedroom: res.bedroom,\n        description: res.description,\n        allowedSex: res.allowedSex,\n      })),\n      allowedSex: d.allowedSex,\n    }));\n  }\n\n  async getDormByOwner(dormOwner: UserDocument): Promise {\n  \tconst dorm = await this.DormModel.find({owner: dormOwner}).exec();\n\treturn dorm;\n  }\n\n  //get specific dorm\n  async getSingleDorm(dormID: string) {\n    const dorm = await this.findDorm(dormID);\n    return dorm;\n  }\n\n  //get all room of specific dorm\n  async getAllDormRoom(dormID: string) {\n    const dorm = await this.findDorm(dormID);\n    return {\n      room: dorm.room,\n    };\n  }\n\n  //get specific room of specific dorm\n  async getDormRoom(dormID: string, roomID: string) {\n    const dorm = await this.findDorm(dormID);\n    let room: RoomInterface;\n    for (var i = 0; i  {\n    let dorm;\n    try {\n      dorm = await this.DormModel.findById(id).exec();\n    } catch (error) {\n      throw new NotFoundException('Could not find dorm.');\n    }\n    if (!dorm) {\n      throw new NotFoundException('Could not find dorm.');\n    }\n    return dorm;\n  }\n\n  private utilChk(util: string, arr: any) {\n    if (util === undefined) {\n    } else {\n      arr.push({ type: util });\n    }\n  }\n\n  private async findDormList(propsSearch, utilsSearch, stop: string): Promise {\n    const Stop = parseInt(stop);\n    const dorms = await this.DormModel.find(propsSearch)\n      .limit(Stop)\n      .exec();\n    // console.log(dorms);\n\n    const myUtil = dorms.map(res => ({\n      utility: res.utility.map(r => ({\n        type: r.type,\n      })),\n    }));\n\n    let mySearch = [];\n    this.utilChk(utilsSearch.convenienceStore, mySearch);\n    this.utilChk(utilsSearch.laundry, mySearch);\n    this.utilChk(utilsSearch.parking, mySearch);\n    this.utilChk(utilsSearch.pet, mySearch);\n    this.utilChk(utilsSearch.internet, mySearch);\n    this.utilChk(utilsSearch.fitness, mySearch);\n    this.utilChk(utilsSearch.pool, mySearch);\n    this.utilChk(utilsSearch.cooking, mySearch);\n\n    // [ { utility: [ [Object], [Object] ] } ]\n    // [ { type: 'laundry' }, { type: 'pet' } ]\n\n    console.log(myUtil);\n    console.log(mySearch);\n\n    // return myUtil;\n\n    let res = [];\n    for (let i = 0; i  ({\n        name: d.name,\n        address: {\n          address: d.address.address,\n          coordinate: d.address.coordinate,\n        },\n        utility: d.utility.map(res => ({\n          type: res.type,\n          distance: res.distance,\n          description: res.description,\n        })),\n        room: d.room.map(res => ({\n          price: res.price,\n          image: res.image,\n          name: res.name,\n          capacity: res.capacity,\n          bathroom: res.bathroom,\n          aircond: res.aircond,\n          kitchen: res.kitchen,\n          bedroom: res.bedroom,\n          description: res.description,\n          allowedSex: res.allowedSex,\n        })),\n        allowedSex: d.allowedSex,\n      }))\n      .slice(Offset);\n    return res;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/JwtAuthGuard.html":{"url":"injectables/JwtAuthGuard.html","title":"injectable - JwtAuthGuard","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  JwtAuthGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/guards/jwt-auth.guard.ts\n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {Injectable} from \"@nestjs/common\";\nimport {AuthGuard} from \"@nestjs/passport\";\n\n@Injectable()\nexport class JwtAuthGuard extends AuthGuard('jwt') {}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/JwtStrategy.html":{"url":"injectables/JwtStrategy.html","title":"injectable - JwtStrategy","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  JwtStrategy\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/strategies/jwt.strategy.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                validate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in src/auth/strategies/jwt.strategy.ts:8\n                            \n                        \n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            validate\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    validate(payload: any)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/strategies/jwt.strategy.ts:17\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    payload\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {Injectable} from \"@nestjs/common\";\nimport {PassportStrategy} from \"@nestjs/passport\";\nimport {Strategy, ExtractJwt} from \"passport-jwt\";\nimport {jwtConstants} from \"../constants\";\nimport {jwtPayload} from \"../auth.interface\";\n\n@Injectable()\nexport class JwtStrategy extends PassportStrategy(Strategy) {\n\tconstructor () {\n\t\tsuper({\n\t\t\t\tjwtFromRequest: ExtractJwt.fromAuthHeaderAsBearerToken(),\n\t\t\t\tignoreExpiration: false,\n\t\t\t\tsecretOrKey: jwtConstants.secret,\n\t\t});\n\t}\n\n\tasync validate(payload: any): Promise {\n\t\treturn payload\n\t}\n\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/Lobby.html":{"url":"interfaces/Lobby.html","title":"interface - Lobby","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  Lobby\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/lobby/lobby.model.ts\n        \n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        blackList\n                                \n                                \n                                        chat\n                                \n                                \n                                        code\n                                \n                                \n                                        createdOn\n                                \n                                \n                                        expireOn\n                                \n                                \n                                        lobbyId\n                                \n                                \n                                        maxMember\n                                \n                                \n                                        member\n                                \n                                \n                                        modifiedOn\n                                \n                                \n                                        owner\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        blackList\n                                    \n                                \n                                \n                                    \n                                        blackList:     [literal type]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     [literal type]\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        chat\n                                    \n                                \n                                \n                                    \n                                        chat:     [literal type]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     [literal type]\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        code\n                                    \n                                \n                                \n                                    \n                                        code:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        createdOn\n                                    \n                                \n                                \n                                    \n                                        createdOn:         Date\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         Date\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        expireOn\n                                    \n                                \n                                \n                                    \n                                        expireOn:         Date\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         Date\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        lobbyId\n                                    \n                                \n                                \n                                    \n                                        lobbyId:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        maxMember\n                                    \n                                \n                                \n                                    \n                                        maxMember:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        member\n                                    \n                                \n                                \n                                    \n                                        member:     [literal type]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     [literal type]\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        modifiedOn\n                                    \n                                \n                                \n                                    \n                                        modifiedOn:         Date\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         Date\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        owner\n                                    \n                                \n                                \n                                    \n                                        owner:         UserDocument\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         UserDocument\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import * as mongoose from 'mongoose';\nimport { DormSchema } from '../dorm/dorm.model';\nimport { UserDocument } from '../users/schemas/users.schemas';\n\nexport const LobbySchema = new mongoose.Schema({\n  expireOn: { type: Date },\n  dorm: DormSchema,\n  owner: {},\n  code: { type: String },\n  member: { type: [{ user: {}, ready: Boolean }] },\n  blackList: { type: [{ user: {}, message: String }] },\n  maxMember: { type: Number },\n  createdOn: { type: Date },\n  modifiedOn: { type: Date },\n  chat: { type: [{ user: {}, message: String, time: Date }] },\n});\n\nexport interface Lobby extends mongoose.Document {\n  lobbyId: string;\n  expireOn: Date;\n  owner: UserDocument;\n  code: string;\n  member: [{ user: UserDocument; ready: boolean }];\n  blackList: [{ user: UserDocument; message: string }];\n  maxMember: number;\n  createdOn: Date;\n  modifiedOn: Date;\n  chat: [{ user: UserDocument; message: string; time: Date }];\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/LobbyController.html":{"url":"controllers/LobbyController.html","title":"controller - LobbyController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  LobbyController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/lobby/lobby.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                /lobbies\n            \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                addChat\n                            \n                            \n                                    Async\n                                closeLobby\n                            \n                            \n                                    Async\n                                createNewLobby\n                            \n                            \n                                    Async\n                                deleteLobby\n                            \n                            \n                                    Async\n                                getAllLobbyList\n                            \n                            \n                                    Async\n                                getChat\n                            \n                            \n                                    Async\n                                getIdByCode\n                            \n                            \n                                    Async\n                                getSpecificLobby\n                            \n                            \n                                    Async\n                                joinLobbyID\n                            \n                            \n                                    Async\n                                kickMember\n                            \n                            \n                                    Async\n                                leaveLobby\n                            \n                            \n                                    Async\n                                setReady\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            addChat\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    addChat(id: lobbyIdDto, chat: chatDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post(':id/chat')\n                \n            \n\n            \n                \n                    Defined in src/lobby/lobby.controller.ts:157\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                lobbyIdDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    chat\n                                    \n                                                chatDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            closeLobby\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    closeLobby(id: lobbyIdDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete(':id/close')\n                \n            \n\n            \n                \n                    Defined in src/lobby/lobby.controller.ts:135\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                lobbyIdDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            createNewLobby\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    createNewLobby(req, createNewLobbyQueryParam: createLobbyDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post()\n                \n            \n\n            \n                \n                    Defined in src/lobby/lobby.controller.ts:51\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    createNewLobbyQueryParam\n                                    \n                                                createLobbyDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            deleteLobby\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    deleteLobby(id: lobbyIdDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete(':id/delete')\n                \n            \n\n            \n                \n                    Defined in src/lobby/lobby.controller.ts:117\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                lobbyIdDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            getAllLobbyList\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getAllLobbyList(offset: string, stop: string, dormId: string, roomId: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()\n                \n            \n\n            \n                \n                    Defined in src/lobby/lobby.controller.ts:31\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    offset\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    stop\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    dormId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    roomId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            getChat\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getChat(id: lobbyIdDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get(':id/chat')\n                \n            \n\n            \n                \n                    Defined in src/lobby/lobby.controller.ts:150\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                lobbyIdDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            getIdByCode\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getIdByCode(req, lobbyCode: lobbyCodeDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/codes')\n                \n            \n\n            \n                \n                    Defined in src/lobby/lobby.controller.ts:69\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    lobbyCode\n                                    \n                                                lobbyCodeDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            getSpecificLobby\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getSpecificLobby(req, lobbyId: lobbyIdDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get(':id')\n                \n            \n\n            \n                \n                    Defined in src/lobby/lobby.controller.ts:63\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    lobbyId\n                                    \n                                                lobbyIdDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            joinLobbyID\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    joinLobbyID(req, id: lobbyIdDto, lobbyCode: lobbyCodeDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Put('/join')\n                \n            \n\n            \n                \n                    Defined in src/lobby/lobby.controller.ts:75\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    id\n                                    \n                                                lobbyIdDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    lobbyCode\n                                    \n                                                lobbyCodeDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            kickMember\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    kickMember(req, id: lobbyIdDto, userId: string, message: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Put(':id/kick')\n                \n            \n\n            \n                \n                    Defined in src/lobby/lobby.controller.ts:101\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    id\n                                    \n                                                lobbyIdDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    message\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            leaveLobby\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    leaveLobby(req, id: lobbyIdDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Put(':id/leave')\n                \n            \n\n            \n                \n                    Defined in src/lobby/lobby.controller.ts:95\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    id\n                                    \n                                                lobbyIdDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            setReady\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    setReady(id: lobbyIdDto, req)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Patch(':id/ready')\n                \n            \n\n            \n                \n                    Defined in src/lobby/lobby.controller.ts:126\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                lobbyIdDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    req\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  BadRequestException,\n  Body,\n  Controller,\n  Get,\n  Param,\n  Post,\n  Query,\n  Put,\n  UseGuards,\n  Request,\n  Delete,\n  Patch,\n  PreconditionFailedException,\n} from '@nestjs/common';\nimport { JwtAuthGuard } from 'src/auth/guards/jwt-auth.guard';\nimport { RoleGuard } from 'src/auth/guards/role.guard';\nimport { Role } from 'src/auth/decorator/role.decorator';\nimport { LobbyService } from './lobby.service';\nimport { createLobbyDto, lobbyIdDto, lobbyCodeDto, chatDto } from './lobby.dto';\nimport { ApiTags } from '@nestjs/swagger';\n\n@Controller('/lobbies')\n@ApiTags('Lobby')\n@UseGuards(JwtAuthGuard, RoleGuard)\n@Role('general')\nexport class LobbyController {\n  constructor(private readonly lobbyService: LobbyService) {}\n\n  @Get()\n  async getAllLobbyList(\n    @Query('offset') offset: string,\n    @Query('stop') stop: string,\n    @Query('dormId') dormId: string,\n    @Query('roomId') roomId: string,\n  ) {\n    if (dormId === undefined && roomId !== undefined) {\n      throw new BadRequestException('dormId must be defined.');\n    }\n    const lobbiesList = await this.lobbyService.getAllLobbyList(\n      offset,\n      stop,\n      dormId,\n      roomId,\n    );\n\n    return lobbiesList;\n  }\n\n  @Post()\n  async createNewLobby(\n    @Request() req,\n    @Query() createNewLobbyQueryParam: createLobbyDto,\n  ) {\n    const generatedId = await this.lobbyService.postNewLobby(\n      createNewLobbyQueryParam.dormId,\n      createNewLobbyQueryParam.roomId,\n    );\n    return { id: generatedId };\n  }\n\n  @Get(':id')\n  async getSpecificLobby(@Request() req, @Param() lobbyId: lobbyIdDto) {\n    const lobby = await this.lobbyService.getLobbyById(lobbyId);\n    return lobby;\n  }\n\n  @Get('/codes')\n  async getIdByCode(@Request() req, @Query() lobbyCode: lobbyCodeDto) {\n    const lobbyId = await this.lobbyService.getIdByCode(lobbyCode);\n    return { lobbyId: lobbyId };\n  }\n\n  @Put('/join')\n  async joinLobbyID(\n    @Request() req,\n    @Query() id: lobbyIdDto,\n    @Query() lobbyCode: lobbyCodeDto,\n  ) {\n    if (id !== undefined && lobbyCode !== undefined) {\n      throw new BadRequestException('Only one of lobbyCode or lobbyId should be defined at the time.');\n    }\n\n    if (lobbyCode !== undefined) {\n      const result = await this.lobbyService.joinLobbyID(req.user, id);\n      return result;\n    } else {\n      const id = await this.lobbyService.getIdByCode(lobbyCode);\n      const result = await this.lobbyService.joinLobbyID(req.user, id);\n      return result;\n    }\n  }\n\n  @Put(':id/leave')\n  async leaveLobby(@Request() req, @Param() id: lobbyIdDto) {\n    const result = await this.lobbyService.leaveLobby(req.user, id);\n    return result;\n  }\n\n  @Put(':id/kick')\n  async kickMember(\n    @Request() req,\n    @Param() id: lobbyIdDto,\n    @Query('userId') userId: string,\n    @Body('message') message: string,\n  ) {\n    const result = await this.lobbyService.kickMember(\n      req.user,\n      id,\n      userId,\n      message,\n    );\n    return result;\n  }\n\n  @Delete(':id/delete')\n  async deleteLobby(@Param() id: lobbyIdDto) {\n    await this.lobbyService.deleteLobby(id);\n    return {\n      statusCode: 200,\n      message: 'OK',\n    };\n  }\n\n  @Patch(':id/ready')\n  async setReady(@Param() id: lobbyIdDto, @Request() req) {\n    await this.lobbyService.setReady(id, req.user.userId);\n    return {\n      statusCode: 200,\n      message: 'OK',\n    };\n  }\n\n  @Delete(':id/close')\n  async closeLobby(@Param() id: lobbyIdDto) {\n    const lobby = await this.lobbyService.getLobbyById(id);\n    for (let i = 0; i \n    \n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/LobbyModule.html":{"url":"modules/LobbyModule.html","title":"module - LobbyModule","body":"\n                   \n\n\n\n\n    Modules\n    LobbyModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_LobbyModule\n\n\n\ncluster_LobbyModule_imports\n\n\n\ncluster_LobbyModule_providers\n\n\n\n\nDormModule\n\nDormModule\n\n\n\nLobbyModule\n\nLobbyModule\n\nLobbyModule -->\n\nDormModule->LobbyModule\n\n\n\n\n\nUsersModule\n\nUsersModule\n\nLobbyModule -->\n\nUsersModule->LobbyModule\n\n\n\n\n\nLobbyService\n\nLobbyService\n\nLobbyModule -->\n\nLobbyService->LobbyModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/lobby/lobby.module.ts\n        \n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            LobbyService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            LobbyController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            DormModule\n                        \n                        \n                            UsersModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { MongooseModule } from '@nestjs/mongoose';\nimport { LobbyController } from './lobby.controller';\nimport { LobbyService } from './lobby.service';\nimport { LobbySchema } from './lobby.model';\nimport { DormModule } from 'src/dorm/dorm.module';\nimport { UsersModule } from 'src/users/users.module';\n\n@Module({\n  imports: [\n    MongooseModule.forFeature([{ name: 'Lobby', schema: LobbySchema }]),\n    DormModule,\n    UsersModule\n  ],\n  controllers: [LobbyController],\n  providers: [LobbyService],\n})\nexport class LobbyModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/LobbyService.html":{"url":"injectables/LobbyService.html","title":"injectable - LobbyService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  LobbyService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/lobby/lobby.service.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                addChat\n                            \n                            \n                                    Async\n                                deleteLobby\n                            \n                            \n                                    Private\n                                    Async\n                                findAllLobby\n                            \n                            \n                                    Private\n                                    Async\n                                findLobbyByDormId\n                            \n                            \n                                    Private\n                                    Async\n                                findLobbyByDormIdAndRoomId\n                            \n                            \n                                    Private\n                                    Async\n                                findLobbyById\n                            \n                            \n                                    Async\n                                getAllLobbyList\n                            \n                            \n                                    Async\n                                getChat\n                            \n                            \n                                    Async\n                                getIdByCode\n                            \n                            \n                                    Async\n                                getLobbyById\n                            \n                            \n                                    Async\n                                joinLobbyID\n                            \n                            \n                                    Async\n                                kickMember\n                            \n                            \n                                    Async\n                                leaveLobby\n                            \n                            \n                                    Async\n                                postNewLobby\n                            \n                            \n                                    Async\n                                setReady\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(lobbyModel: Model, DormService: DormService, UsersService: UsersService, UsersRepository: UserRepository)\n                    \n                \n                        \n                            \n                                Defined in src/lobby/lobby.service.ts:18\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        lobbyModel\n                                                  \n                                                        \n                                                                        Model\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        DormService\n                                                  \n                                                        \n                                                                        DormService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        UsersService\n                                                  \n                                                        \n                                                                        UsersService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        UsersRepository\n                                                  \n                                                        \n                                                                        UserRepository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            addChat\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    addChat(lobbyId: lobbyIdDto, chat: chatDto)\n                \n            \n\n\n            \n                \n                    Defined in src/lobby/lobby.service.ts:291\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    lobbyId\n                                    \n                                                lobbyIdDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    chat\n                                    \n                                                chatDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            deleteLobby\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    deleteLobby(lobbyId: lobbyIdDto)\n                \n            \n\n\n            \n                \n                    Defined in src/lobby/lobby.service.ts:266\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    lobbyId\n                                    \n                                                lobbyIdDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Private\n                            Async\n                            findAllLobby\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    findAllLobby(stop: number)\n                \n            \n\n\n            \n                \n                    Defined in src/lobby/lobby.service.ts:26\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    stop\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Private\n                            Async\n                            findLobbyByDormId\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    findLobbyByDormId(stop: number, dormId: string)\n                \n            \n\n\n            \n                \n                    Defined in src/lobby/lobby.service.ts:42\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    stop\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    dormId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Private\n                            Async\n                            findLobbyByDormIdAndRoomId\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    findLobbyByDormIdAndRoomId(stop: number, dormId: string, roomId: string)\n                \n            \n\n\n            \n                \n                    Defined in src/lobby/lobby.service.ts:58\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    stop\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    dormId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    roomId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Private\n                            Async\n                            findLobbyById\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    findLobbyById(lobbyId: string)\n                \n            \n\n\n            \n                \n                    Defined in src/lobby/lobby.service.ts:78\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    lobbyId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            getAllLobbyList\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getAllLobbyList(offset: string, stop: string, dormId: string, roomId: string)\n                \n            \n\n\n            \n                \n                    Defined in src/lobby/lobby.service.ts:91\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    offset\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    stop\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    dormId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    roomId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            getChat\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getChat(lobbyId: lobbyIdDto)\n                \n            \n\n\n            \n                \n                    Defined in src/lobby/lobby.service.ts:285\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    lobbyId\n                                    \n                                                lobbyIdDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            getIdByCode\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getIdByCode(lobbyCode: lobbyCodeDto)\n                \n            \n\n\n            \n                \n                    Defined in src/lobby/lobby.service.ts:192\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    lobbyCode\n                                    \n                                                lobbyCodeDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            getLobbyById\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getLobbyById(lobbyId: lobbyIdDto)\n                \n            \n\n\n            \n                \n                    Defined in src/lobby/lobby.service.ts:178\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    lobbyId\n                                    \n                                                lobbyIdDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            joinLobbyID\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    joinLobbyID(user, lobbyId: lobbyIdDto)\n                \n            \n\n\n            \n                \n                    Defined in src/lobby/lobby.service.ts:199\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    user\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    lobbyId\n                                    \n                                                lobbyIdDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            kickMember\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    kickMember(user, lobbyId: lobbyIdDto, userId: string, message: string)\n                \n            \n\n\n            \n                \n                    Defined in src/lobby/lobby.service.ts:234\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    user\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    lobbyId\n                                    \n                                                lobbyIdDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    message\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            leaveLobby\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    leaveLobby(user, lobbyId: lobbyIdDto)\n                \n            \n\n\n            \n                \n                    Defined in src/lobby/lobby.service.ts:215\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    user\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    lobbyId\n                                    \n                                                lobbyIdDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            postNewLobby\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    postNewLobby(dormId: string, roomId: string)\n                \n            \n\n\n            \n                \n                    Defined in src/lobby/lobby.service.ts:159\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    dormId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    roomId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            setReady\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    setReady(lobbyId: lobbyIdDto, userId: string)\n                \n            \n\n\n            \n                \n                    Defined in src/lobby/lobby.service.ts:275\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    lobbyId\n                                    \n                                                lobbyIdDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {\n  BadRequestException,\n  ForbiddenException,\n  Injectable,\n  NotFoundException,\n  UnauthorizedException,\n} from '@nestjs/common';\nimport { Model } from 'mongoose';\nimport { InjectModel } from '@nestjs/mongoose';\nimport { Lobby } from './lobby.model';\nimport { chatDto, lobbyCodeDto, lobbyIdDto } from './lobby.dto';\n\nimport { DormService } from '../dorm/dorm.service';\nimport { UserRepository } from '../users/repositories/user.repository';\nimport { UsersService } from '../users/users.service';\n\n@Injectable()\nexport class LobbyService {\n  constructor(\n    @InjectModel('Lobby') private readonly lobbyModel: Model,\n    private readonly DormService: DormService,\n    private readonly UsersService: UsersService,\n    private readonly UsersRepository: UserRepository,\n  ) {}\n\n  private async findAllLobby(stop: number): Promise {\n    let lobbies;\n    try {\n      lobbies = await this.lobbyModel\n        .find()\n        .limit(stop)\n        .exec();\n    } catch (error) {\n      throw new NotFoundException('Could not find any lobby.');\n    }\n    if (!lobbies) {\n      throw new NotFoundException('Could not find any lobby.');\n    }\n    return lobbies;\n  }\n\n  private async findLobbyByDormId(stop: number, dormId: string) {\n    let lobbies;\n    try {\n      lobbies = await this.lobbyModel\n        .find({ 'dorm.id': dormId })\n        .limit(stop)\n        .exec();\n    } catch (error) {\n      throw new NotFoundException('Could not find lobby.');\n    }\n    if (!lobbies) {\n      throw new NotFoundException('Could not find lobby.');\n    }\n    return lobbies;\n  }\n\n  private async findLobbyByDormIdAndRoomId(\n    stop: number,\n    dormId: string,\n    roomId: string,\n  ): Promise {\n    let lobbies;\n    try {\n      lobbies = await this.lobbyModel\n        .find({ 'dorm.id': dormId, 'dorm.room.id': roomId })\n        .limit(stop)\n        .exec();\n    } catch (error) {\n      throw new NotFoundException('Could not find lobby.');\n    }\n    if (!lobbies) {\n      throw new NotFoundException('Could not find lobby.');\n    }\n    return lobbies;\n  }\n\n  private async findLobbyById(lobbyId: string): Promise {\n    let lobby;\n    try {\n      lobby = await this.lobbyModel.find({ _id: lobbyId }).exec();\n    } catch (error) {\n      throw new NotFoundException('Could not find lobby.');\n    }\n    if (!lobby) {\n      throw new NotFoundException('Could not find lobby.');\n    }\n    return lobby;\n  }\n\n  async getAllLobbyList(\n    offset: string,\n    stop: string,\n    dormId: string,\n    roomId: string,\n  ) {\n    if (!(parseInt(offset) === parseFloat(offset) || offset === undefined)) {\n      throw new BadRequestException('offset must be integer.');\n    }\n\n    if (!(parseInt(stop) === parseFloat(stop) || stop === undefined)) {\n      throw new BadRequestException('stop must be integer.');\n    }\n\n    if (offset === undefined) {\n      offset = '0';\n    }\n\n    if (stop === undefined) {\n      stop = '50';\n    }\n\n    const _offset = parseInt(offset);\n    const _stop = parseInt(stop);\n\n    if (dormId === undefined && roomId === undefined) {\n      const lobbies = await this.findAllLobby(_stop);\n      return lobbies.slice(_offset).map(lobby => ({\n        id: lobby.lobbyId,\n        expireOn: lobby.expireOn,\n        owner: lobby.owner,\n        code: lobby.code,\n        member: lobby.member,\n        maxMember: lobby.maxMember,\n        createdOn: lobby.createdOn,\n        modifiedOn: lobby.modifiedOn,\n      }));\n    } else if (dormId !== undefined && roomId === undefined) {\n      const lobbies = await this.findLobbyByDormId(_stop, dormId);\n      return lobbies.slice(_offset).map(lobby => ({\n        id: lobby.lobbyId,\n        expireOn: lobby.expireOn,\n        owner: lobby.owner,\n        code: lobby.code,\n        member: lobby.member,\n        maxMember: lobby.maxMember,\n        createdOn: lobby.createdOn,\n        modifiedOn: lobby.modifiedOn,\n      }));\n    } else {\n      const lobbies = await this.findLobbyByDormIdAndRoomId(\n        _stop,\n        dormId,\n        roomId,\n      );\n      return lobbies.slice(_offset).map(lobby => ({\n        id: lobby.lobbyId,\n        expireOn: lobby.expireOn,\n        owner: lobby.owner,\n        code: lobby.code,\n        member: lobby.member,\n        maxMember: lobby.maxMember,\n        createdOn: lobby.createdOn,\n        modifiedOn: lobby.modifiedOn,\n      }));\n    }\n  }\n\n  async postNewLobby(dormId: string, roomId: string) {\n    const Dorm = await this.DormService.getSingleDorm(dormId);\n    const Room = await this.DormService.getDormRoom(dormId, roomId);\n    const User = this.UsersService;\n    let d = new Date();\n    d.setHours(d.getHours() + 14 * 24);\n    const newLobby = new this.lobbyModel({\n      expireOn: d,\n      dorm: Dorm,\n      owner: User,\n      member: [User],\n      maxMember: Room.capacity,\n      createdOn: Date.now,\n      modifiedOn: Date.now,\n    });\n    const result = await newLobby.save();\n    return result.id as string;\n  }\n\n  async getLobbyById(lobbyId: lobbyIdDto) {\n    const lobby = await this.findLobbyById(lobbyId.lobbyId);\n    return {\n      id: lobby.lobbyId,\n      expireOn: lobby.expireOn,\n      owner: lobby.owner,\n      code: lobby.code,\n      member: lobby.member,\n      maxMember: lobby.maxMember,\n      createdOn: lobby.createdOn,\n      modifiedOn: lobby.modifiedOn,\n    };\n  }\n\n  async getIdByCode(lobbyCode: lobbyCodeDto): Promise {\n    const id = await this.lobbyModel\n      .findOne({ code: lobbyCode.lobbyCode })\n      .exec();\n    return id;\n  }\n\n  async joinLobbyID(user, lobbyId: lobbyIdDto) {\n    let lobby;\n    lobby = await this.findLobbyById(lobbyId.lobbyId);\n\n    for (let i = 0; i \n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/LocalAuthGuard.html":{"url":"injectables/LocalAuthGuard.html","title":"injectable - LocalAuthGuard","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  LocalAuthGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/guards/local-auth.guard.ts\n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {Injectable} from \"@nestjs/common\";\nimport {AuthGuard} from \"@nestjs/passport\";\n\n@Injectable()\nexport class LocalAuthGuard extends AuthGuard('local') {}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/LocalStrategy.html":{"url":"injectables/LocalStrategy.html","title":"injectable - LocalStrategy","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  LocalStrategy\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/strategies/local.strategy.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Readonly\n                                logger\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                validate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(authService: AuthService)\n                    \n                \n                        \n                            \n                                Defined in src/auth/strategies/local.strategy.ts:8\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        authService\n                                                  \n                                                        \n                                                                        AuthService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            validate\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    validate(username: string, password: string)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/strategies/local.strategy.ts:13\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    username\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    password\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                                Readonly\n                            logger\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : new Logger(LocalStrategy.name)\n                        \n                    \n                        \n                            \n                                    Defined in src/auth/strategies/local.strategy.ts:12\n                            \n                        \n\n\n            \n        \n\n\n    \n\n\n    \n        import {Injectable, UnauthorizedException, Logger} from \"@nestjs/common\";\nimport { PassportStrategy } from \"@nestjs/passport\";\nimport {Strategy} from \"passport-local\";\nimport {AuthService} from \"../auth.service\";\nimport {LoginUserDto} from \"src/users/dto/login-user.dto\";\n\n@Injectable()\nexport class LocalStrategy extends PassportStrategy(Strategy) {\n\tconstructor(private authService: AuthService) {\n\t\tsuper();\n\t}\n\tprivate readonly logger = new Logger(LocalStrategy.name);\n\tasync validate(username: string, password: string): Promise {\n\t\tconst user = await this.authService.validateUser(username, password);\n\t\tthis.logger.log('local-strategy: ' + `${username}` + `${user}`);\n\t\tif (!user) {\n\t\t\tthrow new UnauthorizedException('Invalid User Data');\n\t\t}\n\t\treturn user;\n\t}\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/LoginUserDto.html":{"url":"classes/LoginUserDto.html","title":"class - LoginUserDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  LoginUserDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/dto/login-user.dto.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Readonly\n                                email\n                            \n                            \n                                    Readonly\n                                password\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                            email\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsNotEmpty()@IsEmail()@ApiProperty()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/users/dto/login-user.dto.ts:8\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                            password\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsNotEmpty()@ApiProperty()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/users/dto/login-user.dto.ts:12\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {IsNotEmpty, IsEmail} from 'class-validator';\nimport {ApiProperty} from '@nestjs/swagger';\n\nexport class LoginUserDto {\n\t@IsNotEmpty()\n\t@IsEmail()\n\t@ApiProperty()\n\treadonly email: string;\n\n\t@IsNotEmpty()\n\t@ApiProperty()\n\treadonly password: string;\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/PendingAction.html":{"url":"interfaces/PendingAction.html","title":"interface - PendingAction","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  PendingAction\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/admin/admin.model.ts\n        \n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        createdBy\n                                \n                                \n                                        createdOn\n                                \n                                \n                                        newdata\n                                \n                                \n                                        status\n                                \n                                \n                                        target\n                                \n                                \n                                        type\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        createdBy\n                                    \n                                \n                                \n                                    \n                                        createdBy:     literal type\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     literal type\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        createdOn\n                                    \n                                \n                                \n                                    \n                                        createdOn:         Date\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         Date\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        newdata\n                                    \n                                \n                                \n                                    \n                                        newdata:         any\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         any\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        status\n                                    \n                                \n                                \n                                    \n                                        status:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        target\n                                    \n                                \n                                \n                                    \n                                        target:         any\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         any\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        type\n                                    \n                                \n                                \n                                    \n                                        type:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import * as mongoose from 'mongoose';\n\n\nexport const PendingActionSchema = new mongoose.Schema({\n  type: { type: String },\n  target: {},\n  newdata: {},\n  createdOn: { type: Date },\n  createdBy: {\n    userId: { type: String },\n    name: {\n      firstname: { type: String },\n      lastname: { type: String },\n    },\n    profilePic: { type: String },\n  },\n  status: { type: String },\n});\n\nexport interface PendingAction extends mongoose.Document {\n  type: string;\n  target: any;\n  newdata: any;\n  createdOn: Date;\n  createdBy: {\n    userId: string;\n    name: {\n      firstname: string;\n      lastname: string;\n    };\n    profilePic: string;\n  };\n  status: string;\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/Review.html":{"url":"interfaces/Review.html","title":"interface - Review","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  Review\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/review/review.model.ts\n        \n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        comment\n                                \n                                \n                                        createdOn\n                                \n                                \n                                        dorm\n                                \n                                \n                                        id\n                                \n                                \n                                        image\n                                \n                                \n                                        star\n                                \n                                \n                                        user\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        comment\n                                    \n                                \n                                \n                                    \n                                        comment:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        createdOn\n                                    \n                                \n                                \n                                    \n                                        createdOn:         Date\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         Date\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        dorm\n                                    \n                                \n                                \n                                    \n                                        dorm:         Dorm\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         Dorm\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        id\n                                    \n                                \n                                \n                                    \n                                        id:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        image\n                                    \n                                \n                                \n                                    \n                                        image:     [string]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     [string]\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        star\n                                    \n                                \n                                \n                                    \n                                        star:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        user\n                                    \n                                \n                                \n                                    \n                                        user:     literal type\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     literal type\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import * as mongoose from 'mongoose';\nimport { DormSchema, Dorm } from '../dorm/dorm.model';\n\nexport const ReviewSchema = new mongoose.Schema({\n  reviewId: { type: String },\n  dorm: DormSchema,\n  user: {\n    userId: { type: String },\n  },\n  star: { type: Number },\n  comment: { type: String },\n  image: { type: [String] },\n  createdOn: { type: Date },\n});\n\nexport interface Review extends mongoose.Document {\n  id: string;\n  dorm: Dorm;\n  user: {\n    userId: string;\n  };\n  star: number;\n  comment: string;\n  image: [string];\n  createdOn: Date;\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ReviewBodyDto.html":{"url":"classes/ReviewBodyDto.html","title":"class - ReviewBodyDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ReviewBodyDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/review/review.validation.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                comment\n                            \n                            \n                                dorm\n                            \n                            \n                                image\n                            \n                            \n                                star\n                            \n                            \n                                user\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            comment\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsNotEmpty()@IsString()@ApiProperty()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/review/review.validation.ts:29\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            dorm\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         any\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsNotEmpty()@ApiProperty()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/review/review.validation.ts:15\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            image\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     [string]\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsNotEmpty()@IsArray()@ApiProperty()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/review/review.validation.ts:34\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            star\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsNotEmpty()@IsInt()@ApiProperty()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/review/review.validation.ts:24\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            user\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         any\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsNotEmpty()@ApiProperty()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/review/review.validation.ts:19\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsNotEmpty, IsArray, IsInt, IsString, ValidateIf, IsNumberString, IsNumber } from 'class-validator';\nimport {ApiProperty} from '@nestjs/swagger';\n\n\nexport class reviewCodeDto {\n  @IsString()\n  @IsNotEmpty()\n  @ApiProperty()\n  reviewCode: string;\n}\n\nexport class ReviewBodyDto {\n  @IsNotEmpty()\n  @ApiProperty()\n  dorm: any;\n\n  @IsNotEmpty()\n  @ApiProperty()\n  user: any;\n\n  @IsNotEmpty()\n  @IsInt()\n  @ApiProperty()\n  star: number;\n\n  @IsNotEmpty()\n  @IsString()\n  @ApiProperty()\n  comment: string;\n\n  @IsNotEmpty()\n  @IsArray()\n  @ApiProperty()\n  image: [string];\n}\n\nexport class ReviewParamDto {\n  @IsNotEmpty()\n  @IsString()\n  @ApiProperty()\n  reviewId: string\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/ReviewController.html":{"url":"controllers/ReviewController.html","title":"controller - ReviewController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  ReviewController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/review/review.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                /reviews\n            \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                addReview\n                            \n                            \n                                    Async\n                                editReview\n                            \n                            \n                                    Async\n                                getReviewList\n                            \n                            \n                                    Async\n                                seleteReview\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            addReview\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    addReview(reviewBody: ReviewBodyDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post()\n                \n            \n\n            \n                \n                    Defined in src/review/review.controller.ts:78\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    reviewBody\n                                    \n                                                ReviewBodyDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            editReview\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    editReview(reviewCode: reviewCodeDto, userId: string, reviewBody: ReviewBodyDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Patch()\n                \n            \n\n            \n                \n                    Defined in src/review/review.controller.ts:84\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    reviewCode\n                                    \n                                                reviewCodeDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    reviewBody\n                                    \n                                                ReviewBodyDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            getReviewList\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getReviewList(dormId: string, reviewCode: string, offset: string, stop: string, userId: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()\n                \n            \n\n            \n                \n                    Defined in src/review/review.controller.ts:26\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    dormId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    reviewCode\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    offset\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    stop\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            seleteReview\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    seleteReview(reviewId: ReviewParamDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete(':reviewId')\n                \n            \n\n            \n                \n                    Defined in src/review/review.controller.ts:98\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    reviewId\n                                    \n                                                ReviewParamDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  BadRequestException,\n  Body,\n  Controller,\n  Delete,\n  Get,\n  Param,\n  Patch,\n  Post,\n  Query,\n} from '@nestjs/common';\nimport { ReviewService } from './review.service';\nimport {\n  ReviewBodyDto,\n  ReviewParamDto,\n  reviewCodeDto,\n} from './review.validation';\nimport {ApiTags} from '@nestjs/swagger';\n\n@Controller('/reviews')\n@ApiTags('Reviews')\nexport class ReviewController {\n  constructor(private readonly reviewService: ReviewService) {}\n\n  @Get()\n  async getReviewList(\n    @Query('dormId') dormId: string,\n    @Query('reviewCode') reviewCode: string,\n    @Query('offset') offset: string,\n    @Query('stop') stop: string,\n    @Query('userId') userId: string, // mocked user id\n  ) {\n    if (\n      (reviewCode === undefined && dormId === undefined) ||\n      (reviewCode !== undefined && dormId !== undefined)\n    ) {\n      throw new BadRequestException(\n        'Only one of reviewCode or dormId values ​​must be specified.',\n      );\n    }\n\n    if (!(parseInt(offset) === parseFloat(offset) || offset === undefined)) {\n      throw new BadRequestException('offset must be integer.');\n    }\n\n    if (!(parseInt(stop) === parseFloat(stop) || stop === undefined)) {\n      throw new BadRequestException('stop must be integer.');\n    }\n\n    if (offset === undefined) {\n      offset = '0';\n    }\n\n    if (stop === undefined) {\n      stop = '50';\n    }\n\n    if (reviewCode === undefined) {\n      const reviews = await this.reviewService.getReviewList(\n        dormId,\n        offset,\n        stop,\n      );\n      return reviews;\n    } else if (dormId === undefined) {\n      if (userId === undefined) {\n        throw new BadRequestException('userId must be defined.');\n      }\n      const review = await this.reviewService.getSingleReviewByReviewCode(\n        reviewCode,\n        userId\n      );\n      return review;\n    }\n  }\n\n  @Post()\n  async addReview(@Body() reviewBody: ReviewBodyDto) {\n    const generatedId = await this.reviewService.addReview(reviewBody);\n    return { id: generatedId };\n  }\n\n  @Patch()\n  async editReview(\n    @Query() reviewCode: reviewCodeDto,\n    @Query('userId') userId: string, // mocked user id\n    @Body() reviewBody: ReviewBodyDto,\n  ) {\n    const generatedId = await this.reviewService.editReview(\n      reviewCode,\n      reviewBody,\n      userId,\n    );\n    return { id: generatedId };\n  }\n\n  @Delete(':reviewId')\n  async seleteReview(@Param() reviewId: ReviewParamDto) {\n    await this.reviewService.deleteReview(reviewId);\n    return {\n      statusCode: 200,\n      message: 'OK',\n    };\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/ReviewModule.html":{"url":"modules/ReviewModule.html","title":"module - ReviewModule","body":"\n                   \n\n\n\n\n    Modules\n    ReviewModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_ReviewModule\n\n\n\ncluster_ReviewModule_providers\n\n\n\n\nReviewService\n\nReviewService\n\n\n\nReviewModule\n\nReviewModule\n\nReviewModule -->\n\nReviewService->ReviewModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/review/review.module.ts\n        \n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            ReviewService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            ReviewController\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { MongooseModule } from '@nestjs/mongoose';\nimport { ReviewController } from './review.controller';\nimport { ReviewService } from './review.service';\nimport { ReviewSchema } from '../review/review.model';\n\n@Module({\n  imports: [\n    MongooseModule.forFeature([{ name: 'Review', schema: ReviewSchema }]),\n  ],\n  controllers: [ReviewController],\n  providers: [ReviewService],\n})\nexport class ReviewModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ReviewParamDto.html":{"url":"classes/ReviewParamDto.html","title":"class - ReviewParamDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ReviewParamDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/review/review.validation.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                reviewId\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            reviewId\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsNotEmpty()@IsString()@ApiProperty()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/review/review.validation.ts:41\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsNotEmpty, IsArray, IsInt, IsString, ValidateIf, IsNumberString, IsNumber } from 'class-validator';\nimport {ApiProperty} from '@nestjs/swagger';\n\n\nexport class reviewCodeDto {\n  @IsString()\n  @IsNotEmpty()\n  @ApiProperty()\n  reviewCode: string;\n}\n\nexport class ReviewBodyDto {\n  @IsNotEmpty()\n  @ApiProperty()\n  dorm: any;\n\n  @IsNotEmpty()\n  @ApiProperty()\n  user: any;\n\n  @IsNotEmpty()\n  @IsInt()\n  @ApiProperty()\n  star: number;\n\n  @IsNotEmpty()\n  @IsString()\n  @ApiProperty()\n  comment: string;\n\n  @IsNotEmpty()\n  @IsArray()\n  @ApiProperty()\n  image: [string];\n}\n\nexport class ReviewParamDto {\n  @IsNotEmpty()\n  @IsString()\n  @ApiProperty()\n  reviewId: string\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/ReviewService.html":{"url":"injectables/ReviewService.html","title":"injectable - ReviewService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  ReviewService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/review/review.service.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                addReview\n                            \n                            \n                                    Async\n                                deleteReview\n                            \n                            \n                                    Async\n                                editReview\n                            \n                            \n                                    Private\n                                    Async\n                                findAnUpdateReview\n                            \n                            \n                                    Private\n                                    Async\n                                findReviewByDormId\n                            \n                            \n                                    Private\n                                    Async\n                                findReviewByReviewCode\n                            \n                            \n                                    Async\n                                getReviewList\n                            \n                            \n                                    Async\n                                getSingleReviewByReviewCode\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(reviewModel: Model)\n                    \n                \n                        \n                            \n                                Defined in src/review/review.service.ts:12\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        reviewModel\n                                                  \n                                                        \n                                                                        Model\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            addReview\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    addReview(reviewBody: ReviewBodyDto)\n                \n            \n\n\n            \n                \n                    Defined in src/review/review.service.ts:116\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    reviewBody\n                                    \n                                                ReviewBodyDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            deleteReview\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    deleteReview(reviewId: ReviewParamDto)\n                \n            \n\n\n            \n                \n                    Defined in src/review/review.service.ts:142\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    reviewId\n                                    \n                                                ReviewParamDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            editReview\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    editReview(reviewCode: reviewCodeDto, reviewBody: ReviewBodyDto, userId: string)\n                \n            \n\n\n            \n                \n                    Defined in src/review/review.service.ts:129\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    reviewCode\n                                    \n                                                reviewCodeDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    reviewBody\n                                    \n                                                ReviewBodyDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Private\n                            Async\n                            findAnUpdateReview\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    findAnUpdateReview(reviewCode: reviewCodeDto, reviewBody: ReviewBodyDto, userId: string)\n                \n            \n\n\n            \n                \n                    Defined in src/review/review.service.ts:54\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    reviewCode\n                                    \n                                                reviewCodeDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    reviewBody\n                                    \n                                                ReviewBodyDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Private\n                            Async\n                            findReviewByDormId\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    findReviewByDormId(dormId: string, stop: number)\n                \n            \n\n\n            \n                \n                    Defined in src/review/review.service.ts:17\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    dormId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    stop\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Private\n                            Async\n                            findReviewByReviewCode\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    findReviewByReviewCode(reviewCode: string, userId: string)\n                \n            \n\n\n            \n                \n                    Defined in src/review/review.service.ts:36\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    reviewCode\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            getReviewList\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getReviewList(dormId: string, offset: string, stop: string)\n                \n            \n\n\n            \n                \n                    Defined in src/review/review.service.ts:82\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    dormId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    offset\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    stop\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            getSingleReviewByReviewCode\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getSingleReviewByReviewCode(reviewCode: string, userId: string)\n                \n            \n\n\n            \n                \n                    Defined in src/review/review.service.ts:99\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    reviewCode\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, NotFoundException } from '@nestjs/common';\nimport {\n  ReviewBodyDto,\n  ReviewParamDto,\n  reviewCodeDto,\n} from './review.validation';\nimport { Review } from '../review/review.model';\nimport { InjectModel } from '@nestjs/mongoose';\nimport { Model } from 'mongoose';\n\n@Injectable()\nexport class ReviewService {\n  constructor(\n    @InjectModel('Review') private readonly reviewModel: Model,\n  ) {}\n\n  private async findReviewByDormId(\n    dormId: string,\n    stop: number,\n  ): Promise {\n    let review;\n    try {\n      review = await this.reviewModel\n        .find({ 'dorm._id': dormId })\n        .limit(stop)\n        .exec();\n    } catch (error) {\n      throw new NotFoundException('Could not find review.');\n    }\n    if (!review) {\n      throw new NotFoundException('Could not find review.');\n    }\n    return review;\n  }\n\n  private async findReviewByReviewCode(\n    reviewCode: string,\n    userId: string,\n  ): Promise {\n    let review;\n    try {\n      review = await this.reviewModel\n        .find({ 'dorm.code': reviewCode, 'user.userId': userId })\n        .exec();\n    } catch (error) {\n      throw new NotFoundException('Could not find review.');\n    }\n    if (!review) {\n      throw new NotFoundException('Could not find review.');\n    }\n    return review;\n  }\n\n  private async findAnUpdateReview(\n    reviewCode: reviewCodeDto,\n    reviewBody: ReviewBodyDto,\n    userId: string,\n  ): Promise {\n    let review;\n    try {\n      review = await this.reviewModel\n        .findOneAndUpdate(\n          {\n            'dorm.code': reviewCode.reviewCode,\n            'user.userId': userId,\n          },\n          reviewBody,\n          {\n            new: true,\n          },\n        )\n        .exec();\n    } catch (error) {\n      throw new NotFoundException('Could not find review.');\n    }\n    if (!review) {\n      throw new NotFoundException('Could not find review.');\n    }\n    return review;\n  }\n\n  async getReviewList(dormId: string, offset: string, stop: string) {\n    const _offset = parseInt(offset);\n    const _stop = parseInt(stop);\n    const review = await this.findReviewByDormId(dormId, _stop);\n    return review\n      .map(review => ({\n        id: review.id,\n        dorm: review.dorm,\n        user: review.user,\n        star: review.star,\n        comment: review.comment,\n        image: review.image,\n        createdOn: review.createdOn,\n      }))\n      .slice(_offset);\n  }\n\n  async getSingleReviewByReviewCode(\n    reviewCode: string,\n    userId: string,\n  ) {\n    const review = await this.findReviewByReviewCode(reviewCode, userId);\n    return review\n      .map(review => ({\n        id: review.id,\n        dorm: review.dorm,\n        user: review.user,\n        star: review.star,\n        comment: review.comment,\n        image: review.image,\n        createdOn: review.createdOn,\n      }))\n  }\n\n  async addReview(reviewBody: ReviewBodyDto) {\n    const newReview = new this.reviewModel({\n      dorm: reviewBody.dorm,\n      user: reviewBody.user,\n      star: reviewBody.star,\n      comment: reviewBody.comment,\n      image: reviewBody.image,\n      createdOn: Date.now(),\n    });\n    const result = await newReview.save();\n    return result.id as string;\n  }\n\n  async editReview(\n    reviewCode: reviewCodeDto,\n    reviewBody: ReviewBodyDto,\n    userId: string,\n  ) {\n    const review = await this.findAnUpdateReview(\n      reviewCode,\n      reviewBody,\n      userId,\n    );\n    return review.id as string;\n  }\n\n  async deleteReview(reviewId: ReviewParamDto) {\n    const result = await this.reviewModel.deleteOne({ _id: reviewId.reviewId }).exec();\n    if (result.n === 0) {\n      throw new NotFoundException('Could not find review.');\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"guards/RoleGuard.html":{"url":"guards/RoleGuard.html","title":"guard - RoleGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n    Guards\n    RoleGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n        \n            \n            File\n            \n            \n                src/auth/guards/role.guard.ts\n            \n\n\n\n\n\n                \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                canActivate\n                            \n                            \n                                    Private\n                                matchRole\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n                \n    Constructor\n        \n            \n                \n                    \nconstructor(reflector: Reflector)\n                    \n                \n                        \n                            \n                                Defined in src/auth/guards/role.guard.ts:5\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        reflector\n                                                  \n                                                        \n                                                                    Reflector\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n                \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            canActivate\n                        \n                        \n                    \n                \n            \n            \n                \ncanActivate(context: ExecutionContext)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/guards/role.guard.ts:12\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    context\n                                    \n                                            ExecutionContext\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         boolean\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Private\n                            matchRole\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    matchRole(fromRole: string, toRole: string)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/guards/role.guard.ts:8\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    fromRole\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    toRole\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         boolean\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n        \n\n\n        \n            import { Injectable, CanActivate, ExecutionContext } from '@nestjs/common';\nimport { Reflector } from '@nestjs/core';\n\n@Injectable()\nexport class RoleGuard implements CanActivate {\n\tconstructor(private reflector: Reflector) {}\n\n\tprivate matchRole(fromRole:string, toRole:string) {\n\t\treturn (fromRole === toRole);\n\t}\n\n  \tcanActivate(context: ExecutionContext): boolean {\n    \tconst role = this.reflector.get('role', context.getHandler());\n    \tif (!role) {\n      \t\treturn true;\n    \t}\n    \tconst request = context.switchToHttp().getRequest();\n    \tconst user = request.user;\n    \treturn this.matchRole(role, user.role);\n  \t}\n}\n\n\n        \n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/Room.html":{"url":"interfaces/Room.html","title":"interface - Room","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  Room\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/dorm/dorm.dto.ts\n        \n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        aircond\n                                \n                                \n                                        allowedSex\n                                \n                                \n                                        bathroom\n                                \n                                \n                                        bedroom\n                                \n                                \n                                        capacity\n                                \n                                \n                                        description\n                                \n                                \n                                        image\n                                \n                                \n                                        kitchen\n                                \n                                \n                                        name\n                                \n                                \n                                        price\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        aircond\n                                    \n                                \n                                \n                                    \n                                        aircond:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        allowedSex\n                                    \n                                \n                                \n                                    \n                                        allowedSex:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        bathroom\n                                    \n                                \n                                \n                                    \n                                        bathroom:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        bedroom\n                                    \n                                \n                                \n                                    \n                                        bedroom:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        capacity\n                                    \n                                \n                                \n                                    \n                                        capacity:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        description\n                                    \n                                \n                                \n                                    \n                                        description:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        image\n                                    \n                                \n                                \n                                    \n                                        image:     string[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     string[]\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        kitchen\n                                    \n                                \n                                \n                                    \n                                        kitchen:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        name\n                                    \n                                \n                                \n                                    \n                                        name:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        price\n                                    \n                                \n                                \n                                    \n                                        price:     literal type\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     literal type\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import {ApiProperty} from \"@nestjs/swagger\";\nimport {IsNotEmpty, Matches, IsString, IsNumberString, IsEmail, IsUrl} from \"class-validator\";\nimport { UserDocument } from \"src/users/schemas/users.schemas\";\nimport { RoomInterface, UtilityInterface } from \"./dorm.model\";\n\nexport class addDorm {\n\t@ApiProperty()\n\t@IsNotEmpty()\n\t@Matches(/[a-zA-Z]+/)\n\treadonly name: string;\n\n\t@ApiProperty()\n\t@IsNotEmpty()\n\t@IsString()\n\t@Matches(/[0-9]+/)\n\treadonly telephone: string;\n\n\t@ApiProperty()\n\t@IsEmail()\n\treadonly email: string;\n\n\t@ApiProperty()\n\t@IsString()\n\treadonly lineID: string;\n\n\t@ApiProperty()\n\t@IsUrl()\n\treadonly website: string;\n\n\t@ApiProperty()\n\t@IsNotEmpty()\n\tcoordinate: [number];\n\n\t@ApiProperty()\n\ttype: string;\n\n\t@ApiProperty()\n\tdescription: string;\n\n\t@ApiProperty()\n\tallowedSex: string;\n\n}\n\nexport class propsSearchDto {\n  //dorm\n  dormName: string;\n  distance: number; // address.coord - kaset.coord\n  rating: number;\n  gender: string;\n  //room\n  price: number;\n  maxperson: number;\n  dormType: string;\n  //room2\n  kitchen: number; //true = 0, false = 999999999999999999\n  aircond: number; //true = 0, false = 999999999999999999\n  bathroom: number; //true = 0, false = 999999999999999999\n  bedroom: number; //true = 0, false = 999999999999999999\n\n  //util\n  // in utility.type\n  convenienceStore: string; //true = convenienceStore, false = ''\n  laundry: string; // true = laundry, false = ''\n  parking: string;\n  pet: string;\n  internet: string;\n  smoking: string;\n  fitness: string;\n  pool: string;\n  cooking: string;\n}\n\ninterface Room {\n  name: string;\n  capacity: number;\n  image: string[];\n  bathroom: number;\n  aircond: number;\n  kitchen: number;\n  bedroom: number;\n  description: string;\n  price: {\n    amount: number;\n    pricePer: number;\n  };\n  allowedSex: string;\n}\n\ninterface Utility {\n  type: string;\n  distance: number;\n  description: string;\n}\n\nexport class DormAddDto {\n  @IsString()\n  @IsNotEmpty()\n  readonly name: string;\n\n  @IsString()\n  @IsNotEmpty()\n  owner: UserDocument;\n\n  @IsString()\n  @IsNotEmpty()\n  readonly telephone: string;\n\n  @IsString()\n  @IsNotEmpty()\n  @IsEmail()\n  readonly email: string;\n\n  @IsString()\n  @IsNotEmpty()\n  readonly lineID: string;\n\n  @IsString()\n  @IsNotEmpty()\n  readonly website: string;\n\n  @IsString()\n  @IsNotEmpty()\n  readonly address: string;\n\n  @IsNotEmpty()\n  readonly coordinate: number[];\n\n  @IsNotEmpty()\n  readonly utilities: UtilityInterface[];\n\n  @IsString()\n  @IsNotEmpty()\n  readonly type: string;\n\n  @IsString()\n  @IsNotEmpty()\n  readonly description: string;\n\n  @IsNotEmpty()\n  rooms: RoomInterface[];\n\n  @IsString()\n  @IsNotEmpty()\n  readonly allowedSex: string;\n\n  @IsNotEmpty()\n  image: string[];\n  \n  @IsNotEmpty()\n  license: string[];\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/RoomInterface.html":{"url":"interfaces/RoomInterface.html","title":"interface - RoomInterface","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  RoomInterface\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/dorm/dorm.model.ts\n        \n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        aircond\n                                \n                                \n                                        allowedSex\n                                \n                                \n                                        bathroom\n                                \n                                \n                                        bedroom\n                                \n                                \n                                        capacity\n                                \n                                \n                                        description\n                                \n                                \n                                        id\n                                \n                                \n                                        image\n                                \n                                \n                                        kitchen\n                                \n                                \n                                        name\n                                \n                                \n                                        price\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        aircond\n                                    \n                                \n                                \n                                    \n                                        aircond:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        allowedSex\n                                    \n                                \n                                \n                                    \n                                        allowedSex:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        bathroom\n                                    \n                                \n                                \n                                    \n                                        bathroom:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        bedroom\n                                    \n                                \n                                \n                                    \n                                        bedroom:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        capacity\n                                    \n                                \n                                \n                                    \n                                        capacity:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        description\n                                    \n                                \n                                \n                                    \n                                        description:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        id\n                                    \n                                \n                                \n                                    \n                                        id:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        image\n                                    \n                                \n                                \n                                    \n                                        image:     string[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     string[]\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        kitchen\n                                    \n                                \n                                \n                                    \n                                        kitchen:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        name\n                                    \n                                \n                                \n                                    \n                                        name:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        price\n                                    \n                                \n                                \n                                    \n                                        price:     literal type\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     literal type\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import * as mongoose from 'mongoose';\nimport { UserDocument } from '../users/schemas/users.schemas';\n\nenum approval {\n  'approved',\n  'disapproved',\n  'pending',\n}\n\nexport const utilSchema = new mongoose.Schema({\n  type: { type: String },\n  distance: { type: Number },\n  description: { type: String },\n});\n\nexport const RoomSchema = new mongoose.Schema({\n  name: { type: String },\n  capacity: { type: Number },\n  image: { type: [String] },\n  bathroom: { type: Number },\n  aircond: { type: Number },\n  kitchen: { type: Number },\n  bedroom: { type: Number },\n  description: { type: String },\n  price: {\n    amount: { type: Number },\n    pricePer: { type: Number },\n  },\n  allowedSex: { type: String, enum: ['any', 'male', 'female'] },\n});\n\nvar contactSchema = new mongoose.Schema({\n  telephone: { type: String },\n  email: { type: String },\n  lineID: { type: String },\n  website: { type: String },\n});\n\nexport const DormSchema = new mongoose.Schema({\n  name: { type: String },\n  code: { type: String },\n  owner: { }, //{ type: mongoose.Schema.Types.ObjectId, ref: 'User' },\n  contact: contactSchema,\n  address: {\n    address: { type: String },\n    coordinate: {\n      type: [Number],\n    },\n  },\n  utility: [utilSchema],\n  type: { type: String },\n  description: { type: String },\n  room: [RoomSchema],\n  allowedSex: { type: String },\n  avgStar: { type: Number },\n  image: {type:[String]},\n  license: { type: [String] },\n  createdOn: { type: Date },\n  modifiedOn: { type: Date },\n  approved: {\n    type: String,\n    enum: ['approved', 'disapproved', 'pending'],\n    index: true,\n    default: 'pending',\n  },\n  approvedOn: { type: Date },\n});\n\nexport interface UtilityInterface extends mongoose.Document {\n  type: string;\n  distance: number;\n  description: string;\n}\n\nexport interface UtilityInterface extends mongoose.Document {\n  type: string;\n  distance: number;\n  description: string;\n}\n\nexport interface RoomInterface extends mongoose.Document {\n  id: string;\n  name: string;\n  capacity: number;\n  image: string[];\n  bathroom: number;\n  aircond: number;\n  kitchen: number;\n  bedroom: number;\n  description: string;\n  price: {\n    amount: number;\n    pricePer: number;\n  };\n  allowedSex: string;\n}\n\nexport interface Dorm extends mongoose.Document {\n  id: string;\n  name: string;\n  owner: UserDocument;\n  code: string;\n  contact: {\n    telelphone: string;\n    email: string;\n    lineOD: string;\n    website: string;\n  };\n  address: {\n    address: string;\n    coordinate: number[];\n  };\n  utility: UtilityInterface[];\n  room: RoomInterface[];\n  allowedSex: string;\n  avgStar: number;\n  image:string[];\n  license: string[];\n  createdOn: Date;\n  modifiedOn: Date;\n  approved: approval;\n  approvedOn: Date;\n}\n\nexport interface DormAdd extends mongoose.Document {\n  name: string;\n  code: string;\n  owner: UserDocument; //change to userschema here\n  contact: {\n    telephone: string;\n    email: string;\n    lineID: string;\n    website: string;\n  };\n  address: {\n    address: string;\n    coordinate: { type: 'Point'; coordinates: number[] };\n  };\n  utility: Array;\n  room: Array;\n  allowedSex: string;\n  avgStar: number;\n  license: string[];\n}\n\nexport interface DormQuery extends mongoose.Document {\n  name: string;\n  address: {\n    address: string;\n    coordinate: [Number];\n  };\n  utility: Array;\n  room: Array;\n  allowedSex: string;\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/TicketBodyDto.html":{"url":"classes/TicketBodyDto.html","title":"class - TicketBodyDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  TicketBodyDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/admin/admin.dto.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                createdBy\n                            \n                            \n                                newdata\n                            \n                            \n                                status\n                            \n                            \n                                target\n                            \n                            \n                                type\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            createdBy\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     literal type\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsNotEmptyObject()@ApiProperty()@ValidateIf(undefined)\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/admin/admin.dto.ts:20\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            newdata\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         any\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsNotEmptyObject()@ApiProperty()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/admin/admin.dto.ts:15\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            status\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsNotEmpty()@IsString()@ApiProperty()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/admin/admin.dto.ts:32\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            target\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         any\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsNotEmptyObject()@ApiProperty()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/admin/admin.dto.ts:11\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            type\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsNotEmpty()@IsString()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/admin/admin.dto.ts:7\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsArray, isNotEmpty, IsNotEmpty, IsNotEmptyObject, IsString, ValidateIf } from 'class-validator';\nimport {ApiProperty} from '@nestjs/swagger';\n\nexport class TicketBodyDto {\n  @IsNotEmpty()\n  @IsString()\n  type: string\n\n  @IsNotEmptyObject()\n  @ApiProperty()\n  target: any;\n\n  @IsNotEmptyObject()\n  @ApiProperty()\n  newdata: any;\n\n  @IsNotEmptyObject()\n  @ApiProperty()\n  @ValidateIf(elem => elem !== undefined)\n  createdBy: {\n    userId: string;\n    name: {\n      firstname: string;\n      lastname: string;\n    };\n    profilePic: string;\n  };\n\n  @IsNotEmpty()\n  @IsString()\n  @ApiProperty()\n  status: string;\n}\n\nexport class TicketIdDto {\n  @IsNotEmpty()\n  @IsString()\n  @ApiProperty()\n  ticketId: string\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/TicketIdDto.html":{"url":"classes/TicketIdDto.html","title":"class - TicketIdDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  TicketIdDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/admin/admin.dto.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                ticketId\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            ticketId\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsNotEmpty()@IsString()@ApiProperty()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/admin/admin.dto.ts:39\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsArray, isNotEmpty, IsNotEmpty, IsNotEmptyObject, IsString, ValidateIf } from 'class-validator';\nimport {ApiProperty} from '@nestjs/swagger';\n\nexport class TicketBodyDto {\n  @IsNotEmpty()\n  @IsString()\n  type: string\n\n  @IsNotEmptyObject()\n  @ApiProperty()\n  target: any;\n\n  @IsNotEmptyObject()\n  @ApiProperty()\n  newdata: any;\n\n  @IsNotEmptyObject()\n  @ApiProperty()\n  @ValidateIf(elem => elem !== undefined)\n  createdBy: {\n    userId: string;\n    name: {\n      firstname: string;\n      lastname: string;\n    };\n    profilePic: string;\n  };\n\n  @IsNotEmpty()\n  @IsString()\n  @ApiProperty()\n  status: string;\n}\n\nexport class TicketIdDto {\n  @IsNotEmpty()\n  @IsString()\n  @ApiProperty()\n  ticketId: string\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/User.html":{"url":"classes/User.html","title":"class - User","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  User\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/schemas/users.schemas.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                createdOn\n                            \n                            \n                                email\n                            \n                            \n                                email_verified\n                            \n                            \n                                hashedPassword\n                            \n                            \n                                modifiedOn\n                            \n                            \n                                name\n                            \n                            \n                                natId\n                            \n                            \n                                PictureProfile\n                            \n                            \n                                refreshToken\n                            \n                            \n                                sex\n                            \n                            \n                                telephone\n                            \n                            \n                                userType\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            createdOn\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Prop({timestamps: true, required: true})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/users/schemas/users.schemas.ts:44\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            email\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Prop({required: true, unique: true, index: true})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/users/schemas/users.schemas.ts:23\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            email_verified\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         boolean\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Prop({required: true})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/users/schemas/users.schemas.ts:26\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            hashedPassword\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Prop({required: true})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/users/schemas/users.schemas.ts:32\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            modifiedOn\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Prop({timestamps: true})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/users/schemas/users.schemas.ts:47\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            name\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     Record\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Prop(undefined)\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/users/schemas/users.schemas.ts:14\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            natId\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Prop()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/users/schemas/users.schemas.ts:20\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            PictureProfile\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Prop({required: true})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/users/schemas/users.schemas.ts:38\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            refreshToken\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Prop()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/users/schemas/users.schemas.ts:41\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            sex\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Prop({required: true})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/users/schemas/users.schemas.ts:29\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            telephone\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Prop()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/users/schemas/users.schemas.ts:17\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            userType\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Prop({required: true})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/users/schemas/users.schemas.ts:35\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Prop, Schema, SchemaFactory, raw } from '@nestjs/mongoose';\nimport { Document } from 'mongoose';\n// import {HexBase64BinaryEncoding} from 'crypto';\nexport type UserDocument = User & Document;\n\n@Schema()\nexport class User {\n  @Prop(\n    raw({\n      firstName: { type: String },\n      lastName: { type: String },\n    }),\n  )\n  name: Record;\n\n  @Prop()\n  telephone: string;\n\n  @Prop()\n  natId: string;\n\n  @Prop({ required: true, unique: true, index: true })\n  email: string;\n\n  @Prop({ required: true })\n  email_verified: boolean;\n\n  @Prop({ required: true })\n  sex: string;\n\n  @Prop({ required: true })\n  hashedPassword: string;\n\n  @Prop({ required: true })\n  userType: string;\n\n  @Prop({ required: true })\n  PictureProfile: number;\n\n  @Prop()\n  refreshToken: string;\n\n  @Prop({ timestamps: true, required: true })\n  createdOn: string;\n\n  @Prop({ timestamps: true })\n  modifiedOn: string;\n}\n\nexport const UserSchema = SchemaFactory.createForClass(User);\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/UserParsedDto.html":{"url":"interfaces/UserParsedDto.html","title":"interface - UserParsedDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  UserParsedDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/users.interface.ts\n        \n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        createdOn\n                                \n                                \n                                        email\n                                \n                                \n                                        email_verified\n                                \n                                \n                                        hashedPassword\n                                \n                                \n                                        modifiedOn\n                                \n                                \n                                        name\n                                \n                                \n                                        natId\n                                \n                                \n                                        PictureProfile\n                                \n                                \n                                        refreshToken\n                                \n                                \n                                        sex\n                                \n                                \n                                        telephone\n                                \n                                \n                                        userType\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        createdOn\n                                    \n                                \n                                \n                                    \n                                        createdOn:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        email\n                                    \n                                \n                                \n                                    \n                                        email:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        email_verified\n                                    \n                                \n                                \n                                    \n                                        email_verified:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        hashedPassword\n                                    \n                                \n                                \n                                    \n                                        hashedPassword:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        modifiedOn\n                                    \n                                \n                                \n                                    \n                                        modifiedOn:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        name\n                                    \n                                \n                                \n                                    \n                                        name:     literal type\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     literal type\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        natId\n                                    \n                                \n                                \n                                    \n                                        natId:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        PictureProfile\n                                    \n                                \n                                \n                                    \n                                        PictureProfile:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        refreshToken\n                                    \n                                \n                                \n                                    \n                                        refreshToken:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        sex\n                                    \n                                \n                                \n                                    \n                                        sex:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        telephone\n                                    \n                                \n                                \n                                    \n                                        telephone:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        userType\n                                    \n                                \n                                \n                                    \n                                        userType:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export interface UserParsedDto {\n\tname: {\n\t\tfirstName: string;\n\t\tlastName: string;\n\t}\n\n\ttelephone: string;\n\n\temail: string;\n\n\temail_verified: boolean;\n\n\tsex: string;\n\n\thashedPassword: string;\n\n\tPictureProfile: number;\n\n\trefreshToken: string;\n\n\tcreatedOn: string;\n\n\tmodifiedOn: string;\n\n\tnatId: string;\n\n\tuserType: string;\n}\n\nexport interface UserRegisterRes {\n\tuserId: string;\n}\n\nexport interface generalUserInfo {\n\tname: {\n\t\tfirstName: string;\n\t\tlastName: string;\n\t}\n\n\ttelephone: string;\n\n\temail: string;\n\n\temail_verified: boolean;\n\n\tprofilePic: number;\n\n\tsex: string;\n\n\tcreatedOn: string;\n\n\tmodifiedOn: string;\n\n\tuserType: string;\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/UserRegisterRes.html":{"url":"interfaces/UserRegisterRes.html","title":"interface - UserRegisterRes","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  UserRegisterRes\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/users.interface.ts\n        \n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        userId\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        userId\n                                    \n                                \n                                \n                                    \n                                        userId:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export interface UserParsedDto {\n\tname: {\n\t\tfirstName: string;\n\t\tlastName: string;\n\t}\n\n\ttelephone: string;\n\n\temail: string;\n\n\temail_verified: boolean;\n\n\tsex: string;\n\n\thashedPassword: string;\n\n\tPictureProfile: number;\n\n\trefreshToken: string;\n\n\tcreatedOn: string;\n\n\tmodifiedOn: string;\n\n\tnatId: string;\n\n\tuserType: string;\n}\n\nexport interface UserRegisterRes {\n\tuserId: string;\n}\n\nexport interface generalUserInfo {\n\tname: {\n\t\tfirstName: string;\n\t\tlastName: string;\n\t}\n\n\ttelephone: string;\n\n\temail: string;\n\n\temail_verified: boolean;\n\n\tprofilePic: number;\n\n\tsex: string;\n\n\tcreatedOn: string;\n\n\tmodifiedOn: string;\n\n\tuserType: string;\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/UserRepository.html":{"url":"injectables/UserRepository.html","title":"injectable - UserRepository","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  UserRepository\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/repositories/user.repository.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                create\n                            \n                            \n                                    Async\n                                findAll\n                            \n                            \n                                    Async\n                                findByEmail\n                            \n                            \n                                    Async\n                                findById\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(userModel: Model)\n                    \n                \n                        \n                            \n                                Defined in src/users/repositories/user.repository.ts:9\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        userModel\n                                                  \n                                                        \n                                                                        Model\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            create\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    create(createUserDto: UserParsedDto)\n                \n            \n\n\n            \n                \n                    Defined in src/users/repositories/user.repository.ts:13\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    createUserDto\n                                    \n                                                UserParsedDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            findAll\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    findAll()\n                \n            \n\n\n            \n                \n                    Defined in src/users/repositories/user.repository.ts:21\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         Promise\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            findByEmail\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    findByEmail(emailQuery: string)\n                \n            \n\n\n            \n                \n                    Defined in src/users/repositories/user.repository.ts:25\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    emailQuery\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            findById\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    findById(userId: string)\n                \n            \n\n\n            \n                \n                    Defined in src/users/repositories/user.repository.ts:29\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {Injectable} from \"@nestjs/common\";\nimport {User, UserDocument} from \"../schemas/users.schemas\";\nimport {InjectModel} from \"@nestjs/mongoose\";\nimport {Model} from \"mongoose\";\nimport {CreateUserDto} from \"../dto/create-user.dto\";\nimport {UserParsedDto} from \"../users.interface\";\n\n@Injectable()\nexport class UserRepository {\n\n\tconstructor(@InjectModel(User.name) private userModel: Model) {}\n\n\tasync create(createUserDto: UserParsedDto): Promise {\n\t\t// Parsing\n\t\tcreateUserDto.createdOn = new Date().toString();\n\t\tcreateUserDto.PictureProfile = Math.floor( Math.random() * 3 );\n\t\tconst createdUser = new this.userModel (createUserDto);\n\t\treturn createdUser.save()\n\t}\n\n\tasync findAll(): Promise {\n\t\treturn this.userModel.find().exec();\n\t}\n\n\tasync findByEmail(emailQuery: string): Promise {\n\t\treturn this.userModel.findOne({email: emailQuery}).exec();\n\t}\n\n\tasync findById(userId: string): Promise {\n\t\treturn this.userModel.findById(userId).exec();\n\t}\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/UsersController.html":{"url":"controllers/UsersController.html","title":"controller - UsersController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  UsersController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/users.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                users\n            \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                getUserInfo\n                            \n                            \n                                    Async\n                                userCreation\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            getUserInfo\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getUserInfo(req)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()@UseGuards(JwtAuthGuard)@ApiOAuth2(undefined)\n                \n            \n\n            \n                \n                    Defined in src/users/users.controller.ts:26\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            userCreation\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    userCreation(createUserDto: CreateUserDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('sign-up')\n                \n            \n\n            \n                \n                    Defined in src/users/users.controller.ts:16\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    createUserDto\n                                    \n                                                CreateUserDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Post, Request, HttpCode, HttpStatus, Body, UseGuards, Get } from '@nestjs/common';\nimport {CreateUserDto} from './dto/create-user.dto';\nimport {UsersService} from './users.service';\nimport {ApiTags, ApiOAuth2} from '@nestjs/swagger';\nimport {UserRegisterRes, generalUserInfo} from './users.interface';\nimport {JwtAuthGuard} from 'src/auth/guards/jwt-auth.guard';\nimport {UserDocument} from './schemas/users.schemas';\nimport {Dorm} from 'src/dorm/dorm.model';\n\n@Controller('users')\n@ApiTags('Users')\nexport class UsersController {\n\tconstructor(private userServ: UsersService) {}\n\n\t@Post('sign-up')\n\tasync userCreation(@Body() createUserDto: CreateUserDto): Promise {\n\t\tconst userId = await this.userServ.create(createUserDto);\n\t\treturn {\n\t\t\tuserId: userId\n\t\t}\n\t}\n\n\t@Get()\n\t@UseGuards(JwtAuthGuard)\n\t@ApiOAuth2([])\n\tasync getUserInfo(@Request() req): Promise {\n\t\tconst userDoc = await this.userServ.findById(req.user.userId);\n\t\treturn {\n\t\t\tname: {\n\t\t\t\tfirstName: userDoc.name.firstName,\n\t\t\t\tlastName: userDoc.name.lastName,\n\t\t\t},\n\t\t\ttelephone: userDoc.telephone,\n\t\t\temail: userDoc.email,\n\t\t\temail_verified: userDoc.email_verified,\n\t\t\tprofilePic: userDoc.PictureProfile,\n\t\t\tsex: userDoc.sex,\n\t\t\tcreatedOn: userDoc.createdOn,\n\t\t\tmodifiedOn: userDoc.modifiedOn,\n\t\t\tuserType: userDoc.userType,\n\t\t}\n\t}\n\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/UsersModule.html":{"url":"modules/UsersModule.html","title":"module - UsersModule","body":"\n                   \n\n\n\n\n    Modules\n    UsersModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_UsersModule\n\n\n\ncluster_UsersModule_exports\n\n\n\ncluster_UsersModule_providers\n\n\n\n\nUserRepository \n\nUserRepository \n\n\n\nUsersService \n\nUsersService \n\n\n\nUsersModule\n\nUsersModule\n\nUserRepository  -->\n\nUsersModule->UserRepository \n\n\n\nUsersService  -->\n\nUsersModule->UsersService \n\n\n\n\n\nUserRepository\n\nUserRepository\n\nUsersModule -->\n\nUserRepository->UsersModule\n\n\n\n\n\nUsersService\n\nUsersService\n\nUsersModule -->\n\nUsersService->UsersModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/users/users.module.ts\n        \n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            UserRepository\n                        \n                        \n                            UsersService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            UsersController\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            UserRepository\n                        \n                        \n                            UsersService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { UsersService } from './users.service';\nimport { MongooseModule } from '@nestjs/mongoose';\nimport { UserSchema } from './schemas/users.schemas';\nimport { UserRepository } from './repositories/user.repository';\nimport { UsersController } from './users.controller';\nimport { DormModule } from 'src/dorm/dorm.module';\n@Module({\n  imports: [\n    MongooseModule.forFeature([{ name: 'User', schema: UserSchema }]),\n  ],\n  providers: [UsersService, UserRepository],\n  controllers: [UsersController],\n  exports: [\n    UsersService,\n\t  UserRepository,\n\t  MongooseModule.forFeature([{ name: 'User', schema: UserSchema }]),\n  ],\n})\nexport class UsersModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/UsersService.html":{"url":"injectables/UsersService.html","title":"injectable - UsersService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  UsersService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/users.service.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                create\n                            \n                            \n                                    Async\n                                find\n                            \n                            \n                                    Async\n                                findById\n                            \n                            \n                                    Private\n                                userDtoConversion\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(userRepo: UserRepository)\n                    \n                \n                        \n                            \n                                Defined in src/users/users.service.ts:11\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        userRepo\n                                                  \n                                                        \n                                                                        UserRepository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            create\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    create(dto: CreateUserDto)\n                \n            \n\n\n            \n                \n                    Defined in src/users/users.service.ts:53\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    dto\n                                    \n                                                CreateUserDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            find\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    find(email: string)\n                \n            \n\n\n            \n                \n                    Defined in src/users/users.service.ts:37\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    email\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            findById\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    findById(userId: string)\n                \n            \n\n\n            \n                \n                    Defined in src/users/users.service.ts:45\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Private\n                            userDtoConversion\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    userDtoConversion(dto: CreateUserDto)\n                \n            \n\n\n            \n                \n                    Defined in src/users/users.service.ts:16\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    dto\n                                    \n                                                CreateUserDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         UserParsedDto\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, HttpException, HttpStatus, InternalServerErrorException } from '@nestjs/common';\nimport {UserRepository} from './repositories/user.repository';\nimport {UserDocument} from './schemas/users.schemas';\nimport {CreateUserDto} from './dto/create-user.dto';\nimport {UserParsedDto} from './users.interface'\nimport {validate} from 'class-validator';\nvar bcrypt = require('bcryptjs');\n\n\n@Injectable()\nexport class UsersService {\n\tconstructor(\n\t\tprivate userRepo: UserRepository,\n\t) {}\n\n\tprivate userDtoConversion(dto: CreateUserDto): UserParsedDto{\n\t\treturn {\n\t\t\tname: {\n\t\t\t\tfirstName: dto.firstName,\n\t\t\t\tlastName: dto.lastName\n\t\t\t},\n\t\t\ttelephone: dto.telephone,\n\t\t\temail: dto.email,\n\t\t\tnatId: dto.natId,\n\t\t\temail_verified: (dto.email_verified == \"true\"),\n\t\t\tsex: dto.sex,\n\t\t\thashedPassword: dto.password,\n\t\t\tuserType: dto.userType,\n\t\t\tPictureProfile: null,\n\t\t\trefreshToken: null,\n\t\t\tcreatedOn: null,\n\t\t\tmodifiedOn: null,\n\n\t\t}\n\t}\n\n\tasync find(email: string): Promise {\n\t\tconst user = await this.userRepo.findByEmail(email);\n\t\tif (!user) {\n\t\t\treturn null;\n\t\t}\n\t\treturn user;\n\t}\n\n\tasync findById(userId: string): Promise {\n\t\tconst user = await this.userRepo.findById(userId);\n\t\tif (!user) {\n\t\t\treturn null;\n\t\t}\n\t\treturn user;\n\t}\n\n\tasync create(dto: CreateUserDto): Promise {\n\t\t// Is unique\n\t\tconst email = dto.email;\n\t\tconst query = await this.userRepo.findByEmail(email);\n\t\tif (!dto.telephone) {\n\t\t\tdto.telephone = '';\n\t\t}\n\n\t\tif (!dto.natId) {\n\t\t\tdto.natId = '';\n\t\t}\n\n\t\tif (query) {\n\t\t\tconst errors = {email: 'This email has been registered.'};\n\t\t\tthrow new HttpException({message: 'Input data validation failed', errors},\n\t\t\t\t\t\t\t\t    HttpStatus.BAD_REQUEST);\n\t\t}\n\n\t\tconst errors = validate(CreateUserDto);\n\n\t\tif ((await errors).length > 0) {\n\t\t\tconst _errors = {email: 'Invalid input.', detaiL: errors};\n\t\t\tthrow new HttpException({message: 'Input data validation failed', _errors},\n\t\t\t\t\t\t\t\t    HttpStatus.BAD_REQUEST);\n\t\t}\n\t\telse {\n\t\t\t// resolve password before saving.\n\t\t\tdto.password = await bcrypt.hash(dto.password, 10);\n\t\t\t// Conversion\n\t\t\tconst newDto = this.userDtoConversion(dto);\n\t\t\tconst savedUser = await this.userRepo.create(newDto);\n\t\t\treturn savedUser._id;\n\t\t}\n\t}\n\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/Utility.html":{"url":"interfaces/Utility.html","title":"interface - Utility","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  Utility\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/dorm/dorm.dto.ts\n        \n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        description\n                                \n                                \n                                        distance\n                                \n                                \n                                        type\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        description\n                                    \n                                \n                                \n                                    \n                                        description:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        distance\n                                    \n                                \n                                \n                                    \n                                        distance:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        type\n                                    \n                                \n                                \n                                    \n                                        type:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import {ApiProperty} from \"@nestjs/swagger\";\nimport {IsNotEmpty, Matches, IsString, IsNumberString, IsEmail, IsUrl} from \"class-validator\";\nimport { UserDocument } from \"src/users/schemas/users.schemas\";\nimport { RoomInterface, UtilityInterface } from \"./dorm.model\";\n\nexport class addDorm {\n\t@ApiProperty()\n\t@IsNotEmpty()\n\t@Matches(/[a-zA-Z]+/)\n\treadonly name: string;\n\n\t@ApiProperty()\n\t@IsNotEmpty()\n\t@IsString()\n\t@Matches(/[0-9]+/)\n\treadonly telephone: string;\n\n\t@ApiProperty()\n\t@IsEmail()\n\treadonly email: string;\n\n\t@ApiProperty()\n\t@IsString()\n\treadonly lineID: string;\n\n\t@ApiProperty()\n\t@IsUrl()\n\treadonly website: string;\n\n\t@ApiProperty()\n\t@IsNotEmpty()\n\tcoordinate: [number];\n\n\t@ApiProperty()\n\ttype: string;\n\n\t@ApiProperty()\n\tdescription: string;\n\n\t@ApiProperty()\n\tallowedSex: string;\n\n}\n\nexport class propsSearchDto {\n  //dorm\n  dormName: string;\n  distance: number; // address.coord - kaset.coord\n  rating: number;\n  gender: string;\n  //room\n  price: number;\n  maxperson: number;\n  dormType: string;\n  //room2\n  kitchen: number; //true = 0, false = 999999999999999999\n  aircond: number; //true = 0, false = 999999999999999999\n  bathroom: number; //true = 0, false = 999999999999999999\n  bedroom: number; //true = 0, false = 999999999999999999\n\n  //util\n  // in utility.type\n  convenienceStore: string; //true = convenienceStore, false = ''\n  laundry: string; // true = laundry, false = ''\n  parking: string;\n  pet: string;\n  internet: string;\n  smoking: string;\n  fitness: string;\n  pool: string;\n  cooking: string;\n}\n\ninterface Room {\n  name: string;\n  capacity: number;\n  image: string[];\n  bathroom: number;\n  aircond: number;\n  kitchen: number;\n  bedroom: number;\n  description: string;\n  price: {\n    amount: number;\n    pricePer: number;\n  };\n  allowedSex: string;\n}\n\ninterface Utility {\n  type: string;\n  distance: number;\n  description: string;\n}\n\nexport class DormAddDto {\n  @IsString()\n  @IsNotEmpty()\n  readonly name: string;\n\n  @IsString()\n  @IsNotEmpty()\n  owner: UserDocument;\n\n  @IsString()\n  @IsNotEmpty()\n  readonly telephone: string;\n\n  @IsString()\n  @IsNotEmpty()\n  @IsEmail()\n  readonly email: string;\n\n  @IsString()\n  @IsNotEmpty()\n  readonly lineID: string;\n\n  @IsString()\n  @IsNotEmpty()\n  readonly website: string;\n\n  @IsString()\n  @IsNotEmpty()\n  readonly address: string;\n\n  @IsNotEmpty()\n  readonly coordinate: number[];\n\n  @IsNotEmpty()\n  readonly utilities: UtilityInterface[];\n\n  @IsString()\n  @IsNotEmpty()\n  readonly type: string;\n\n  @IsString()\n  @IsNotEmpty()\n  readonly description: string;\n\n  @IsNotEmpty()\n  rooms: RoomInterface[];\n\n  @IsString()\n  @IsNotEmpty()\n  readonly allowedSex: string;\n\n  @IsNotEmpty()\n  image: string[];\n  \n  @IsNotEmpty()\n  license: string[];\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/UtilityInterface.html":{"url":"interfaces/UtilityInterface.html","title":"interface - UtilityInterface","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  UtilityInterface\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/dorm/dorm.model.ts\n        \n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        description\n                                \n                                \n                                        distance\n                                \n                                \n                                        type\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        description\n                                    \n                                \n                                \n                                    \n                                        description:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        distance\n                                    \n                                \n                                \n                                    \n                                        distance:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        type\n                                    \n                                \n                                \n                                    \n                                        type:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import * as mongoose from 'mongoose';\nimport { UserDocument } from '../users/schemas/users.schemas';\n\nenum approval {\n  'approved',\n  'disapproved',\n  'pending',\n}\n\nexport const utilSchema = new mongoose.Schema({\n  type: { type: String },\n  distance: { type: Number },\n  description: { type: String },\n});\n\nexport const RoomSchema = new mongoose.Schema({\n  name: { type: String },\n  capacity: { type: Number },\n  image: { type: [String] },\n  bathroom: { type: Number },\n  aircond: { type: Number },\n  kitchen: { type: Number },\n  bedroom: { type: Number },\n  description: { type: String },\n  price: {\n    amount: { type: Number },\n    pricePer: { type: Number },\n  },\n  allowedSex: { type: String, enum: ['any', 'male', 'female'] },\n});\n\nvar contactSchema = new mongoose.Schema({\n  telephone: { type: String },\n  email: { type: String },\n  lineID: { type: String },\n  website: { type: String },\n});\n\nexport const DormSchema = new mongoose.Schema({\n  name: { type: String },\n  code: { type: String },\n  owner: { }, //{ type: mongoose.Schema.Types.ObjectId, ref: 'User' },\n  contact: contactSchema,\n  address: {\n    address: { type: String },\n    coordinate: {\n      type: [Number],\n    },\n  },\n  utility: [utilSchema],\n  type: { type: String },\n  description: { type: String },\n  room: [RoomSchema],\n  allowedSex: { type: String },\n  avgStar: { type: Number },\n  image: {type:[String]},\n  license: { type: [String] },\n  createdOn: { type: Date },\n  modifiedOn: { type: Date },\n  approved: {\n    type: String,\n    enum: ['approved', 'disapproved', 'pending'],\n    index: true,\n    default: 'pending',\n  },\n  approvedOn: { type: Date },\n});\n\nexport interface UtilityInterface extends mongoose.Document {\n  type: string;\n  distance: number;\n  description: string;\n}\n\nexport interface UtilityInterface extends mongoose.Document {\n  type: string;\n  distance: number;\n  description: string;\n}\n\nexport interface RoomInterface extends mongoose.Document {\n  id: string;\n  name: string;\n  capacity: number;\n  image: string[];\n  bathroom: number;\n  aircond: number;\n  kitchen: number;\n  bedroom: number;\n  description: string;\n  price: {\n    amount: number;\n    pricePer: number;\n  };\n  allowedSex: string;\n}\n\nexport interface Dorm extends mongoose.Document {\n  id: string;\n  name: string;\n  owner: UserDocument;\n  code: string;\n  contact: {\n    telelphone: string;\n    email: string;\n    lineOD: string;\n    website: string;\n  };\n  address: {\n    address: string;\n    coordinate: number[];\n  };\n  utility: UtilityInterface[];\n  room: RoomInterface[];\n  allowedSex: string;\n  avgStar: number;\n  image:string[];\n  license: string[];\n  createdOn: Date;\n  modifiedOn: Date;\n  approved: approval;\n  approvedOn: Date;\n}\n\nexport interface DormAdd extends mongoose.Document {\n  name: string;\n  code: string;\n  owner: UserDocument; //change to userschema here\n  contact: {\n    telephone: string;\n    email: string;\n    lineID: string;\n    website: string;\n  };\n  address: {\n    address: string;\n    coordinate: { type: 'Point'; coordinates: number[] };\n  };\n  utility: Array;\n  room: Array;\n  allowedSex: string;\n  avgStar: number;\n  license: string[];\n}\n\nexport interface DormQuery extends mongoose.Document {\n  name: string;\n  address: {\n    address: string;\n    coordinate: [Number];\n  };\n  utility: Array;\n  room: Array;\n  allowedSex: string;\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/UtilityInterface-1.html":{"url":"interfaces/UtilityInterface-1.html","title":"interface - UtilityInterface-1","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  UtilityInterface\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/dorm/dorm.model.ts\n        \n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        description\n                                \n                                \n                                        distance\n                                \n                                \n                                        type\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        description\n                                    \n                                \n                                \n                                    \n                                        description:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        distance\n                                    \n                                \n                                \n                                    \n                                        distance:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        type\n                                    \n                                \n                                \n                                    \n                                        type:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import * as mongoose from 'mongoose';\nimport { UserDocument } from '../users/schemas/users.schemas';\n\nenum approval {\n  'approved',\n  'disapproved',\n  'pending',\n}\n\nexport const utilSchema = new mongoose.Schema({\n  type: { type: String },\n  distance: { type: Number },\n  description: { type: String },\n});\n\nexport const RoomSchema = new mongoose.Schema({\n  name: { type: String },\n  capacity: { type: Number },\n  image: { type: [String] },\n  bathroom: { type: Number },\n  aircond: { type: Number },\n  kitchen: { type: Number },\n  bedroom: { type: Number },\n  description: { type: String },\n  price: {\n    amount: { type: Number },\n    pricePer: { type: Number },\n  },\n  allowedSex: { type: String, enum: ['any', 'male', 'female'] },\n});\n\nvar contactSchema = new mongoose.Schema({\n  telephone: { type: String },\n  email: { type: String },\n  lineID: { type: String },\n  website: { type: String },\n});\n\nexport const DormSchema = new mongoose.Schema({\n  name: { type: String },\n  code: { type: String },\n  owner: { }, //{ type: mongoose.Schema.Types.ObjectId, ref: 'User' },\n  contact: contactSchema,\n  address: {\n    address: { type: String },\n    coordinate: {\n      type: [Number],\n    },\n  },\n  utility: [utilSchema],\n  type: { type: String },\n  description: { type: String },\n  room: [RoomSchema],\n  allowedSex: { type: String },\n  avgStar: { type: Number },\n  image: {type:[String]},\n  license: { type: [String] },\n  createdOn: { type: Date },\n  modifiedOn: { type: Date },\n  approved: {\n    type: String,\n    enum: ['approved', 'disapproved', 'pending'],\n    index: true,\n    default: 'pending',\n  },\n  approvedOn: { type: Date },\n});\n\nexport interface UtilityInterface extends mongoose.Document {\n  type: string;\n  distance: number;\n  description: string;\n}\n\nexport interface UtilityInterface extends mongoose.Document {\n  type: string;\n  distance: number;\n  description: string;\n}\n\nexport interface RoomInterface extends mongoose.Document {\n  id: string;\n  name: string;\n  capacity: number;\n  image: string[];\n  bathroom: number;\n  aircond: number;\n  kitchen: number;\n  bedroom: number;\n  description: string;\n  price: {\n    amount: number;\n    pricePer: number;\n  };\n  allowedSex: string;\n}\n\nexport interface Dorm extends mongoose.Document {\n  id: string;\n  name: string;\n  owner: UserDocument;\n  code: string;\n  contact: {\n    telelphone: string;\n    email: string;\n    lineOD: string;\n    website: string;\n  };\n  address: {\n    address: string;\n    coordinate: number[];\n  };\n  utility: UtilityInterface[];\n  room: RoomInterface[];\n  allowedSex: string;\n  avgStar: number;\n  image:string[];\n  license: string[];\n  createdOn: Date;\n  modifiedOn: Date;\n  approved: approval;\n  approvedOn: Date;\n}\n\nexport interface DormAdd extends mongoose.Document {\n  name: string;\n  code: string;\n  owner: UserDocument; //change to userschema here\n  contact: {\n    telephone: string;\n    email: string;\n    lineID: string;\n    website: string;\n  };\n  address: {\n    address: string;\n    coordinate: { type: 'Point'; coordinates: number[] };\n  };\n  utility: Array;\n  room: Array;\n  allowedSex: string;\n  avgStar: number;\n  license: string[];\n}\n\nexport interface DormQuery extends mongoose.Document {\n  name: string;\n  address: {\n    address: string;\n    coordinate: [Number];\n  };\n  utility: Array;\n  room: Array;\n  allowedSex: string;\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/addDorm.html":{"url":"classes/addDorm.html","title":"class - addDorm","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  addDorm\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/dorm/dorm.dto.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                allowedSex\n                            \n                            \n                                coordinate\n                            \n                            \n                                description\n                            \n                            \n                                    Readonly\n                                email\n                            \n                            \n                                    Readonly\n                                lineID\n                            \n                            \n                                    Readonly\n                                name\n                            \n                            \n                                    Readonly\n                                telephone\n                            \n                            \n                                type\n                            \n                            \n                                    Readonly\n                                website\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            allowedSex\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiProperty()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/dorm/dorm.dto.ts:41\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            coordinate\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     [number]\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiProperty()@IsNotEmpty()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/dorm/dorm.dto.ts:32\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            description\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiProperty()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/dorm/dorm.dto.ts:38\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                            email\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiProperty()@IsEmail()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/dorm/dorm.dto.ts:20\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                            lineID\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiProperty()@IsString()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/dorm/dorm.dto.ts:24\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                            name\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiProperty()@IsNotEmpty()@Matches(/[a-zA-Z]+/)\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/dorm/dorm.dto.ts:10\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                            telephone\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiProperty()@IsNotEmpty()@IsString()@Matches(/[0-9]+/)\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/dorm/dorm.dto.ts:16\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            type\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiProperty()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/dorm/dorm.dto.ts:35\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                            website\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiProperty()@IsUrl()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/dorm/dorm.dto.ts:28\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {ApiProperty} from \"@nestjs/swagger\";\nimport {IsNotEmpty, Matches, IsString, IsNumberString, IsEmail, IsUrl} from \"class-validator\";\nimport { UserDocument } from \"src/users/schemas/users.schemas\";\nimport { RoomInterface, UtilityInterface } from \"./dorm.model\";\n\nexport class addDorm {\n\t@ApiProperty()\n\t@IsNotEmpty()\n\t@Matches(/[a-zA-Z]+/)\n\treadonly name: string;\n\n\t@ApiProperty()\n\t@IsNotEmpty()\n\t@IsString()\n\t@Matches(/[0-9]+/)\n\treadonly telephone: string;\n\n\t@ApiProperty()\n\t@IsEmail()\n\treadonly email: string;\n\n\t@ApiProperty()\n\t@IsString()\n\treadonly lineID: string;\n\n\t@ApiProperty()\n\t@IsUrl()\n\treadonly website: string;\n\n\t@ApiProperty()\n\t@IsNotEmpty()\n\tcoordinate: [number];\n\n\t@ApiProperty()\n\ttype: string;\n\n\t@ApiProperty()\n\tdescription: string;\n\n\t@ApiProperty()\n\tallowedSex: string;\n\n}\n\nexport class propsSearchDto {\n  //dorm\n  dormName: string;\n  distance: number; // address.coord - kaset.coord\n  rating: number;\n  gender: string;\n  //room\n  price: number;\n  maxperson: number;\n  dormType: string;\n  //room2\n  kitchen: number; //true = 0, false = 999999999999999999\n  aircond: number; //true = 0, false = 999999999999999999\n  bathroom: number; //true = 0, false = 999999999999999999\n  bedroom: number; //true = 0, false = 999999999999999999\n\n  //util\n  // in utility.type\n  convenienceStore: string; //true = convenienceStore, false = ''\n  laundry: string; // true = laundry, false = ''\n  parking: string;\n  pet: string;\n  internet: string;\n  smoking: string;\n  fitness: string;\n  pool: string;\n  cooking: string;\n}\n\ninterface Room {\n  name: string;\n  capacity: number;\n  image: string[];\n  bathroom: number;\n  aircond: number;\n  kitchen: number;\n  bedroom: number;\n  description: string;\n  price: {\n    amount: number;\n    pricePer: number;\n  };\n  allowedSex: string;\n}\n\ninterface Utility {\n  type: string;\n  distance: number;\n  description: string;\n}\n\nexport class DormAddDto {\n  @IsString()\n  @IsNotEmpty()\n  readonly name: string;\n\n  @IsString()\n  @IsNotEmpty()\n  owner: UserDocument;\n\n  @IsString()\n  @IsNotEmpty()\n  readonly telephone: string;\n\n  @IsString()\n  @IsNotEmpty()\n  @IsEmail()\n  readonly email: string;\n\n  @IsString()\n  @IsNotEmpty()\n  readonly lineID: string;\n\n  @IsString()\n  @IsNotEmpty()\n  readonly website: string;\n\n  @IsString()\n  @IsNotEmpty()\n  readonly address: string;\n\n  @IsNotEmpty()\n  readonly coordinate: number[];\n\n  @IsNotEmpty()\n  readonly utilities: UtilityInterface[];\n\n  @IsString()\n  @IsNotEmpty()\n  readonly type: string;\n\n  @IsString()\n  @IsNotEmpty()\n  readonly description: string;\n\n  @IsNotEmpty()\n  rooms: RoomInterface[];\n\n  @IsString()\n  @IsNotEmpty()\n  readonly allowedSex: string;\n\n  @IsNotEmpty()\n  image: string[];\n  \n  @IsNotEmpty()\n  license: string[];\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/chatDto.html":{"url":"classes/chatDto.html","title":"class - chatDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  chatDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/lobby/lobby.dto.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                message\n                            \n                            \n                                time\n                            \n                            \n                                user\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            message\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsNotEmpty()@IsString()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/lobby/lobby.dto.ts:33\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            time\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Date\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsNotEmpty()@IsDate()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/lobby/lobby.dto.ts:37\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            user\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         UserDocument\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsNotEmpty()@IsObject()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/lobby/lobby.dto.ts:29\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsDate, IsNotEmpty, IsObject, IsString } from 'class-validator';\nimport { UserDocument } from 'src/users/schemas/users.schemas';\n\nexport class createLobbyDto {\n    @IsString()\n    @IsNotEmpty()\n    dormId: string\n\n    @IsString()\n    @IsNotEmpty()\n    roomId: string\n}\n\nexport class lobbyIdDto {\n    @IsNotEmpty()\n    @IsString()\n    lobbyId: string\n}\n\nexport class lobbyCodeDto {\n    @IsNotEmpty()\n    @IsString()\n    lobbyCode: string\n}\n\nexport class chatDto {\n    @IsNotEmpty()\n    @IsObject()\n    user: UserDocument\n\n    @IsNotEmpty()\n    @IsString()\n    message: string\n\n    @IsNotEmpty()\n    @IsDate()\n    time: Date\n}\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                src/admin/admin.controller.ts\n            \n            controller\n            AdminController\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/admin/admin.dto.ts\n            \n            class\n            TicketBodyDto\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/admin/admin.dto.ts\n            \n            class\n            TicketIdDto\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/admin/admin.model.ts\n            \n            interface\n            PendingAction\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                src/admin/admin.model.ts\n            \n            variable\n            PendingActionSchema\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/admin/admin.service.ts\n            \n            injectable\n            AdminService\n            \n                0 %\n                (0/9)\n            \n        \n        \n            \n                \n                src/app.controller.ts\n            \n            controller\n            AppController\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/app.service.ts\n            \n            injectable\n            AppService\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/auth/auth.controller.ts\n            \n            controller\n            AuthController\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/auth/auth.interface.ts\n            \n            interface\n            jwtPayload\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/auth/auth.interface.ts\n            \n            interface\n            jwtToken\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/auth/auth.service.ts\n            \n            injectable\n            AuthService\n            \n                0 %\n                (0/8)\n            \n        \n        \n            \n                \n                src/auth/auth.service.ts\n            \n            variable\n            bcrypt\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/auth/constants.ts\n            \n            variable\n            jwtConstants\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/auth/decorator/role.decorator.ts\n            \n            variable\n            Role\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/auth/guards/jwt-auth.guard.ts\n            \n            injectable\n            JwtAuthGuard\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/auth/guards/local-auth.guard.ts\n            \n            injectable\n            LocalAuthGuard\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/auth/guards/role.guard.ts\n            \n            guard\n            RoleGuard\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/auth/strategies/jwt.strategy.ts\n            \n            injectable\n            JwtStrategy\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/auth/strategies/local.strategy.ts\n            \n            injectable\n            LocalStrategy\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/dorm/dorm.controller.ts\n            \n            controller\n            DormController\n            \n                0 %\n                (0/9)\n            \n        \n        \n            \n                \n                src/dorm/dorm.dto.ts\n            \n            class\n            addDorm\n            \n                0 %\n                (0/10)\n            \n        \n        \n            \n                \n                src/dorm/dorm.dto.ts\n            \n            class\n            DormAddDto\n            \n                0 %\n                (0/16)\n            \n        \n        \n            \n                \n                src/dorm/dorm.dto.ts\n            \n            class\n            propsSearchDto\n            \n                0 %\n                (0/21)\n            \n        \n        \n            \n                \n                src/dorm/dorm.dto.ts\n            \n            interface\n            Room\n            \n                0 %\n                (0/11)\n            \n        \n        \n            \n                \n                src/dorm/dorm.dto.ts\n            \n            interface\n            Utility\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/dorm/dorm.model.ts\n            \n            interface\n            Dorm\n            \n                0 %\n                (0/17)\n            \n        \n        \n            \n                \n                src/dorm/dorm.model.ts\n            \n            interface\n            DormAdd\n            \n                0 %\n                (0/11)\n            \n        \n        \n            \n                \n                src/dorm/dorm.model.ts\n            \n            interface\n            DormQuery\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/dorm/dorm.model.ts\n            \n            interface\n            RoomInterface\n            \n                0 %\n                (0/12)\n            \n        \n        \n            \n                \n                src/dorm/dorm.model.ts\n            \n            interface\n            UtilityInterface\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/dorm/dorm.model.ts\n            \n            interface\n            UtilityInterface\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/dorm/dorm.model.ts\n            \n            variable\n            contactSchema\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/dorm/dorm.model.ts\n            \n            variable\n            DormSchema\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/dorm/dorm.model.ts\n            \n            variable\n            RoomSchema\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/dorm/dorm.model.ts\n            \n            variable\n            utilSchema\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/dorm/dorm.service.ts\n            \n            injectable\n            DormService\n            \n                0 %\n                (0/14)\n            \n        \n        \n            \n                \n                src/dorm/dorm.validation.ts\n            \n            class\n            propsSearchDto\n            \n                0 %\n                (0/22)\n            \n        \n        \n            \n                \n                src/file-upload.utils.ts\n            \n            variable\n            editFileName\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/file-upload.utils.ts\n            \n            variable\n            imageFileFilter\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/lobby/lobby.controller.ts\n            \n            controller\n            LobbyController\n            \n                0 %\n                (0/13)\n            \n        \n        \n            \n                \n                src/lobby/lobby.dto.ts\n            \n            class\n            chatDto\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/lobby/lobby.dto.ts\n            \n            class\n            createLobbyDto\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/lobby/lobby.dto.ts\n            \n            class\n            lobbyCodeDto\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/lobby/lobby.dto.ts\n            \n            class\n            lobbyIdDto\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/lobby/lobby.model.ts\n            \n            interface\n            Lobby\n            \n                0 %\n                (0/11)\n            \n        \n        \n            \n                \n                src/lobby/lobby.model.ts\n            \n            variable\n            LobbySchema\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/lobby/lobby.service.ts\n            \n            injectable\n            LobbyService\n            \n                0 %\n                (0/17)\n            \n        \n        \n            \n                \n                src/lobby/lobby.validation.ts\n            \n            class\n            createLobbyDto\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/main.ts\n            \n            function\n            bootstrap\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/review/review.controller.ts\n            \n            controller\n            ReviewController\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/review/review.model.ts\n            \n            interface\n            Review\n            \n                0 %\n                (0/8)\n            \n        \n        \n            \n                \n                src/review/review.model.ts\n            \n            variable\n            ReviewSchema\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/review/review.service.ts\n            \n            injectable\n            ReviewService\n            \n                0 %\n                (0/10)\n            \n        \n        \n            \n                \n                src/review/review.validation.ts\n            \n            class\n            ReviewBodyDto\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/review/review.validation.ts\n            \n            class\n            reviewCodeDto\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/review/review.validation.ts\n            \n            class\n            ReviewParamDto\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/users/dto/create-user.dto.ts\n            \n            class\n            CreateUserDto\n            \n                0 %\n                (0/10)\n            \n        \n        \n            \n                \n                src/users/dto/create-user.dto.ts\n            \n            variable\n            allowedUsertype\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/users/dto/create-user.dto.ts\n            \n            variable\n            sex\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/users/dto/login-user.dto.ts\n            \n            class\n            LoginUserDto\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/users/repositories/user.repository.ts\n            \n            injectable\n            UserRepository\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/users/schemas/users.schemas.ts\n            \n            class\n            User\n            \n                0 %\n                (0/13)\n            \n        \n        \n            \n                \n                src/users/schemas/users.schemas.ts\n            \n            variable\n            UserSchema\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/users/users.controller.ts\n            \n            controller\n            UsersController\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/users/users.interface.ts\n            \n            interface\n            generalUserInfo\n            \n                0 %\n                (0/10)\n            \n        \n        \n            \n                \n                src/users/users.interface.ts\n            \n            interface\n            UserParsedDto\n            \n                0 %\n                (0/13)\n            \n        \n        \n            \n                \n                src/users/users.interface.ts\n            \n            interface\n            UserRegisterRes\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/users/users.service.ts\n            \n            injectable\n            UsersService\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/users/users.service.ts\n            \n            variable\n            bcrypt\n            \n                0 %\n                (0/1)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/createLobbyDto.html":{"url":"classes/createLobbyDto.html","title":"class - createLobbyDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  createLobbyDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/lobby/lobby.dto.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                dormId\n                            \n                            \n                                roomId\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            dormId\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsString()@IsNotEmpty()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/lobby/lobby.dto.ts:7\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            roomId\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsString()@IsNotEmpty()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/lobby/lobby.dto.ts:11\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsDate, IsNotEmpty, IsObject, IsString } from 'class-validator';\nimport { UserDocument } from 'src/users/schemas/users.schemas';\n\nexport class createLobbyDto {\n    @IsString()\n    @IsNotEmpty()\n    dormId: string\n\n    @IsString()\n    @IsNotEmpty()\n    roomId: string\n}\n\nexport class lobbyIdDto {\n    @IsNotEmpty()\n    @IsString()\n    lobbyId: string\n}\n\nexport class lobbyCodeDto {\n    @IsNotEmpty()\n    @IsString()\n    lobbyCode: string\n}\n\nexport class chatDto {\n    @IsNotEmpty()\n    @IsObject()\n    user: UserDocument\n\n    @IsNotEmpty()\n    @IsString()\n    message: string\n\n    @IsNotEmpty()\n    @IsDate()\n    time: Date\n}\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/createLobbyDto-1.html":{"url":"classes/createLobbyDto-1.html","title":"class - createLobbyDto-1","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  createLobbyDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/lobby/lobby.validation.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                dormId\n                            \n                            \n                                roomId\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            dormId\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsString()@IsNotEmpty()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/lobby/lobby.validation.ts:6\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            roomId\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsString()@IsNotEmpty()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/lobby/lobby.validation.ts:10\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsNotEmpty, IsString } from 'class-validator';\n\nexport class createLobbyDto {\n    @IsString()\n    @IsNotEmpty()\n    dormId: string\n\n    @IsString()\n    @IsNotEmpty()\n    roomId: string\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            @nestjs/common : ^7.0.0\n        \n            @nestjs/core : ^7.0.0\n        \n            @nestjs/jwt : ^7.1.0\n        \n            @nestjs/mongoose : ^7.0.2\n        \n            @nestjs/passport : ^7.1.0\n        \n            @nestjs/platform-express : ^7.0.0\n        \n            @nestjs/swagger : ^4.6.1\n        \n            @nestjs/websockets : ^7.4.4\n        \n            bcryptjs : ^2.4.3\n        \n            class-transformer : ^0.3.1\n        \n            class-validator : ^0.12.2\n        \n            mongoose : ^5.10.7\n        \n            passport : ^0.4.1\n        \n            passport-jwt : ^4.0.0\n        \n            passport-local : ^1.0.0\n        \n            reflect-metadata : ^0.1.13\n        \n            rimraf : ^3.0.2\n        \n            rxjs : ^6.5.4\n        \n            swagger-ui-express : ^4.1.4\n    \n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/enumerations.html":{"url":"miscellaneous/enumerations.html","title":"miscellaneous-enumerations - enumerations","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n  Miscellaneous\n  Enumerations\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            approval   (src/.../dorm.model.ts)\n                        \n                        \n                            Sex   (src/.../dorm.controller.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/dorm/dorm.model.ts\n    \n        \n            \n                \n                    \n                        \n                        approval\n                    \n                \n                        \n                            \n                                 approved\n                            \n                        \n                        \n                            \n                                 disapproved\n                            \n                        \n                        \n                            \n                                 pending\n                            \n                        \n            \n        \n\n    src/dorm/dorm.controller.ts\n    \n        \n            \n                \n                    \n                        \n                        Sex\n                    \n                \n                        \n                            \n                                 male\n                            \n                        \n                        \n                            \n                                 female\n                            \n                        \n                        \n                            \n                                 any\n                            \n                        \n            \n        \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/functions.html":{"url":"miscellaneous/functions.html","title":"miscellaneous-functions - functions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n  Miscellaneous\n  Functions\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            bootstrap   (src/.../main.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/main.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        \n                            bootstrap\n                        \n                        \n                    \n                \n            \n            \n                \nbootstrap()\n                \n            \n\n\n\n\n        \n    \n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/generalUserInfo.html":{"url":"interfaces/generalUserInfo.html","title":"interface - generalUserInfo","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  generalUserInfo\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/users.interface.ts\n        \n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        createdOn\n                                \n                                \n                                        email\n                                \n                                \n                                        email_verified\n                                \n                                \n                                        modifiedOn\n                                \n                                \n                                        name\n                                \n                                \n                                        profilePic\n                                \n                                \n                                        sex\n                                \n                                \n                                        telephone\n                                \n                                \n                                        userType\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        createdOn\n                                    \n                                \n                                \n                                    \n                                        createdOn:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        email\n                                    \n                                \n                                \n                                    \n                                        email:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        email_verified\n                                    \n                                \n                                \n                                    \n                                        email_verified:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        modifiedOn\n                                    \n                                \n                                \n                                    \n                                        modifiedOn:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        name\n                                    \n                                \n                                \n                                    \n                                        name:     literal type\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     literal type\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        profilePic\n                                    \n                                \n                                \n                                    \n                                        profilePic:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        sex\n                                    \n                                \n                                \n                                    \n                                        sex:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        telephone\n                                    \n                                \n                                \n                                    \n                                        telephone:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        userType\n                                    \n                                \n                                \n                                    \n                                        userType:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export interface UserParsedDto {\n\tname: {\n\t\tfirstName: string;\n\t\tlastName: string;\n\t}\n\n\ttelephone: string;\n\n\temail: string;\n\n\temail_verified: boolean;\n\n\tsex: string;\n\n\thashedPassword: string;\n\n\tPictureProfile: number;\n\n\trefreshToken: string;\n\n\tcreatedOn: string;\n\n\tmodifiedOn: string;\n\n\tnatId: string;\n\n\tuserType: string;\n}\n\nexport interface UserRegisterRes {\n\tuserId: string;\n}\n\nexport interface generalUserInfo {\n\tname: {\n\t\tfirstName: string;\n\t\tlastName: string;\n\t}\n\n\ttelephone: string;\n\n\temail: string;\n\n\temail_verified: boolean;\n\n\tprofilePic: number;\n\n\tsex: string;\n\n\tcreatedOn: string;\n\n\tmodifiedOn: string;\n\n\tuserType: string;\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\nDormLife\nDescription\nDormLife Backend with Nest.js + MongoDB\nInstallation\n$ git clone https://github.com/DormLife-SoftEng/Backend.git\n\nRunning development server\n$ bash ./run_dev.sh\n\nTest\n$ bash ./run_test.sh\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/jwtPayload.html":{"url":"interfaces/jwtPayload.html","title":"interface - jwtPayload","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  jwtPayload\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/auth.interface.ts\n        \n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        avatar\n                                \n                                \n                                        name\n                                \n                                \n                                        role\n                                \n                                \n                                        token_type\n                                \n                                \n                                        userId\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        avatar\n                                    \n                                \n                                \n                                    \n                                        avatar:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        name\n                                    \n                                \n                                \n                                    \n                                        name:     literal type\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     literal type\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        role\n                                    \n                                \n                                \n                                    \n                                        role:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        token_type\n                                    \n                                \n                                \n                                    \n                                        token_type:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        userId\n                                    \n                                \n                                \n                                    \n                                        userId:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export interface jwtPayload {\n\tuserId: string;\n\tname: {\n\t\tfirstName: string;\n\t\tlastName: string;\n\t}\n\tavatar: number;\n\trole: string;\n\ttoken_type: string;\n}\n\nexport interface jwtToken {\n\taccess_token: string\n\trefresh_token: string\n}\n\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/jwtToken.html":{"url":"interfaces/jwtToken.html","title":"interface - jwtToken","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  jwtToken\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/auth.interface.ts\n        \n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        access_token\n                                \n                                \n                                        refresh_token\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        access_token\n                                    \n                                \n                                \n                                    \n                                        access_token:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        refresh_token\n                                    \n                                \n                                \n                                    \n                                        refresh_token:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export interface jwtPayload {\n\tuserId: string;\n\tname: {\n\t\tfirstName: string;\n\t\tlastName: string;\n\t}\n\tavatar: number;\n\trole: string;\n\ttoken_type: string;\n}\n\nexport interface jwtToken {\n\taccess_token: string\n\trefresh_token: string\n}\n\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/lobbyCodeDto.html":{"url":"classes/lobbyCodeDto.html","title":"class - lobbyCodeDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  lobbyCodeDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/lobby/lobby.dto.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                lobbyCode\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            lobbyCode\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsNotEmpty()@IsString()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/lobby/lobby.dto.ts:23\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsDate, IsNotEmpty, IsObject, IsString } from 'class-validator';\nimport { UserDocument } from 'src/users/schemas/users.schemas';\n\nexport class createLobbyDto {\n    @IsString()\n    @IsNotEmpty()\n    dormId: string\n\n    @IsString()\n    @IsNotEmpty()\n    roomId: string\n}\n\nexport class lobbyIdDto {\n    @IsNotEmpty()\n    @IsString()\n    lobbyId: string\n}\n\nexport class lobbyCodeDto {\n    @IsNotEmpty()\n    @IsString()\n    lobbyCode: string\n}\n\nexport class chatDto {\n    @IsNotEmpty()\n    @IsObject()\n    user: UserDocument\n\n    @IsNotEmpty()\n    @IsString()\n    message: string\n\n    @IsNotEmpty()\n    @IsDate()\n    time: Date\n}\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/lobbyIdDto.html":{"url":"classes/lobbyIdDto.html","title":"class - lobbyIdDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  lobbyIdDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/lobby/lobby.dto.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                lobbyId\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            lobbyId\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsNotEmpty()@IsString()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/lobby/lobby.dto.ts:17\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsDate, IsNotEmpty, IsObject, IsString } from 'class-validator';\nimport { UserDocument } from 'src/users/schemas/users.schemas';\n\nexport class createLobbyDto {\n    @IsString()\n    @IsNotEmpty()\n    dormId: string\n\n    @IsString()\n    @IsNotEmpty()\n    roomId: string\n}\n\nexport class lobbyIdDto {\n    @IsNotEmpty()\n    @IsString()\n    lobbyId: string\n}\n\nexport class lobbyCodeDto {\n    @IsNotEmpty()\n    @IsString()\n    lobbyCode: string\n}\n\nexport class chatDto {\n    @IsNotEmpty()\n    @IsObject()\n    user: UserDocument\n\n    @IsNotEmpty()\n    @IsString()\n    message: string\n\n    @IsNotEmpty()\n    @IsDate()\n    time: Date\n}\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n            \n                \n                    \n                        AdminModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        AppModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        AuthModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        DormModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        LobbyModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        ReviewModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        UsersModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n    \n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n  \n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AdminModule\n\n\n\ncluster_AdminModule_imports\n\n\n\ncluster_AdminModule_exports\n\n\n\ncluster_AdminModule_providers\n\n\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_AppModule_providers\n\n\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_providers\n\n\n\ncluster_DormModule\n\n\n\ncluster_DormModule_exports\n\n\n\ncluster_DormModule_providers\n\n\n\ncluster_LobbyModule\n\n\n\ncluster_LobbyModule_providers\n\n\n\ncluster_ReviewModule\n\n\n\ncluster_ReviewModule_providers\n\n\n\ncluster_UsersModule\n\n\n\ncluster_UsersModule_exports\n\n\n\ncluster_UsersModule_providers\n\n\n\n\nDormModule\n\nDormModule\n\n\n\nAdminModule\n\nAdminModule\n\nAdminModule -->\n\nDormModule->AdminModule\n\n\n\n\n\nLobbyModule\n\nLobbyModule\n\nLobbyModule -->\n\nDormModule->LobbyModule\n\n\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nDormModule->AppModule\n\n\n\n\n\nDormService \n\nDormService \n\nDormService  -->\n\nDormModule->DormService \n\n\n\n\n\nUsersModule\n\nUsersModule\n\nDormModule -->\n\nUsersModule->DormModule\n\n\n\nAdminModule -->\n\nUsersModule->AdminModule\n\n\n\n\n\nAuthModule\n\nAuthModule\n\nAuthModule -->\n\nUsersModule->AuthModule\n\n\n\nLobbyModule -->\n\nUsersModule->LobbyModule\n\n\n\nAppModule -->\n\nUsersModule->AppModule\n\n\n\n\n\nUserRepository \n\nUserRepository \n\nUserRepository  -->\n\nUsersModule->UserRepository \n\n\n\n\n\nUsersService \n\nUsersService \n\nUsersService  -->\n\nUsersModule->UsersService \n\n\n\n\n\nAdminService \n\nAdminService \n\nAdminService  -->\n\nAdminModule->AdminService \n\n\n\nAppModule -->\n\nAdminModule->AppModule\n\n\n\n\n\nAdminService\n\nAdminService\n\nAdminModule -->\n\nAdminService->AdminModule\n\n\n\nAppModule -->\n\nAuthModule->AppModule\n\n\n\nAppModule -->\n\nLobbyModule->AppModule\n\n\n\n\n\nReviewModule\n\nReviewModule\n\nAppModule -->\n\nReviewModule->AppModule\n\n\n\n\n\nAppService\n\nAppService\n\nAppModule -->\n\nAppService->AppModule\n\n\n\n\n\nAuthService\n\nAuthService\n\nAuthModule -->\n\nAuthService->AuthModule\n\n\n\n\n\nJwtStrategy\n\nJwtStrategy\n\nAuthModule -->\n\nJwtStrategy->AuthModule\n\n\n\n\n\nLocalStrategy\n\nLocalStrategy\n\nAuthModule -->\n\nLocalStrategy->AuthModule\n\n\n\n\n\nUsersService\n\nUsersService\n\nUsersModule -->\n\nUsersService->UsersModule\n\n\n\nAuthModule -->\n\nUsersService->AuthModule\n\n\n\n\n\nDormService\n\nDormService\n\nDormModule -->\n\nDormService->DormModule\n\n\n\n\n\nLobbyService\n\nLobbyService\n\nLobbyModule -->\n\nLobbyService->LobbyModule\n\n\n\n\n\nReviewService\n\nReviewService\n\nReviewModule -->\n\nReviewService->ReviewModule\n\n\n\n\n\nUserRepository\n\nUserRepository\n\nUsersModule -->\n\nUserRepository->UsersModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n  \n\n    \n        \n            \n                \n                    \n                    \n                        7 Modules\n                    \n                \n            \n        \n        \n            \n                \n                    \n                    7 Controllers\n                \n            \n        \n        \n            \n                \n                    \n                    12 Injectables\n                \n            \n        \n        \n            \n                \n                    \n                    17 Classes\n                \n            \n        \n        \n            \n                \n                    \n                    1 Guard\n                \n            \n        \n        \n            \n                \n                    \n                    16 Interfaces\n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/propsSearchDto.html":{"url":"classes/propsSearchDto.html","title":"class - propsSearchDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  propsSearchDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/dorm/dorm.dto.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                aircond\n                            \n                            \n                                bathroom\n                            \n                            \n                                bedroom\n                            \n                            \n                                convenienceStore\n                            \n                            \n                                cooking\n                            \n                            \n                                distance\n                            \n                            \n                                dormName\n                            \n                            \n                                dormType\n                            \n                            \n                                fitness\n                            \n                            \n                                gender\n                            \n                            \n                                internet\n                            \n                            \n                                kitchen\n                            \n                            \n                                laundry\n                            \n                            \n                                maxperson\n                            \n                            \n                                parking\n                            \n                            \n                                pet\n                            \n                            \n                                pool\n                            \n                            \n                                price\n                            \n                            \n                                rating\n                            \n                            \n                                smoking\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            aircond\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                        \n                            \n                                    Defined in src/dorm/dorm.dto.ts:57\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            bathroom\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                        \n                            \n                                    Defined in src/dorm/dorm.dto.ts:58\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            bedroom\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                        \n                            \n                                    Defined in src/dorm/dorm.dto.ts:59\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            convenienceStore\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                        \n                            \n                                    Defined in src/dorm/dorm.dto.ts:63\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            cooking\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                        \n                            \n                                    Defined in src/dorm/dorm.dto.ts:71\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            distance\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                        \n                            \n                                    Defined in src/dorm/dorm.dto.ts:48\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            dormName\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                        \n                            \n                                    Defined in src/dorm/dorm.dto.ts:47\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            dormType\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                        \n                            \n                                    Defined in src/dorm/dorm.dto.ts:54\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            fitness\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                        \n                            \n                                    Defined in src/dorm/dorm.dto.ts:69\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            gender\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                        \n                            \n                                    Defined in src/dorm/dorm.dto.ts:50\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            internet\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                        \n                            \n                                    Defined in src/dorm/dorm.dto.ts:67\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            kitchen\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                        \n                            \n                                    Defined in src/dorm/dorm.dto.ts:56\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            laundry\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                        \n                            \n                                    Defined in src/dorm/dorm.dto.ts:64\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            maxperson\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                        \n                            \n                                    Defined in src/dorm/dorm.dto.ts:53\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            parking\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                        \n                            \n                                    Defined in src/dorm/dorm.dto.ts:65\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            pet\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                        \n                            \n                                    Defined in src/dorm/dorm.dto.ts:66\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            pool\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                        \n                            \n                                    Defined in src/dorm/dorm.dto.ts:70\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            price\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                        \n                            \n                                    Defined in src/dorm/dorm.dto.ts:52\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            rating\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                        \n                            \n                                    Defined in src/dorm/dorm.dto.ts:49\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            smoking\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                        \n                            \n                                    Defined in src/dorm/dorm.dto.ts:68\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {ApiProperty} from \"@nestjs/swagger\";\nimport {IsNotEmpty, Matches, IsString, IsNumberString, IsEmail, IsUrl} from \"class-validator\";\nimport { UserDocument } from \"src/users/schemas/users.schemas\";\nimport { RoomInterface, UtilityInterface } from \"./dorm.model\";\n\nexport class addDorm {\n\t@ApiProperty()\n\t@IsNotEmpty()\n\t@Matches(/[a-zA-Z]+/)\n\treadonly name: string;\n\n\t@ApiProperty()\n\t@IsNotEmpty()\n\t@IsString()\n\t@Matches(/[0-9]+/)\n\treadonly telephone: string;\n\n\t@ApiProperty()\n\t@IsEmail()\n\treadonly email: string;\n\n\t@ApiProperty()\n\t@IsString()\n\treadonly lineID: string;\n\n\t@ApiProperty()\n\t@IsUrl()\n\treadonly website: string;\n\n\t@ApiProperty()\n\t@IsNotEmpty()\n\tcoordinate: [number];\n\n\t@ApiProperty()\n\ttype: string;\n\n\t@ApiProperty()\n\tdescription: string;\n\n\t@ApiProperty()\n\tallowedSex: string;\n\n}\n\nexport class propsSearchDto {\n  //dorm\n  dormName: string;\n  distance: number; // address.coord - kaset.coord\n  rating: number;\n  gender: string;\n  //room\n  price: number;\n  maxperson: number;\n  dormType: string;\n  //room2\n  kitchen: number; //true = 0, false = 999999999999999999\n  aircond: number; //true = 0, false = 999999999999999999\n  bathroom: number; //true = 0, false = 999999999999999999\n  bedroom: number; //true = 0, false = 999999999999999999\n\n  //util\n  // in utility.type\n  convenienceStore: string; //true = convenienceStore, false = ''\n  laundry: string; // true = laundry, false = ''\n  parking: string;\n  pet: string;\n  internet: string;\n  smoking: string;\n  fitness: string;\n  pool: string;\n  cooking: string;\n}\n\ninterface Room {\n  name: string;\n  capacity: number;\n  image: string[];\n  bathroom: number;\n  aircond: number;\n  kitchen: number;\n  bedroom: number;\n  description: string;\n  price: {\n    amount: number;\n    pricePer: number;\n  };\n  allowedSex: string;\n}\n\ninterface Utility {\n  type: string;\n  distance: number;\n  description: string;\n}\n\nexport class DormAddDto {\n  @IsString()\n  @IsNotEmpty()\n  readonly name: string;\n\n  @IsString()\n  @IsNotEmpty()\n  owner: UserDocument;\n\n  @IsString()\n  @IsNotEmpty()\n  readonly telephone: string;\n\n  @IsString()\n  @IsNotEmpty()\n  @IsEmail()\n  readonly email: string;\n\n  @IsString()\n  @IsNotEmpty()\n  readonly lineID: string;\n\n  @IsString()\n  @IsNotEmpty()\n  readonly website: string;\n\n  @IsString()\n  @IsNotEmpty()\n  readonly address: string;\n\n  @IsNotEmpty()\n  readonly coordinate: number[];\n\n  @IsNotEmpty()\n  readonly utilities: UtilityInterface[];\n\n  @IsString()\n  @IsNotEmpty()\n  readonly type: string;\n\n  @IsString()\n  @IsNotEmpty()\n  readonly description: string;\n\n  @IsNotEmpty()\n  rooms: RoomInterface[];\n\n  @IsString()\n  @IsNotEmpty()\n  readonly allowedSex: string;\n\n  @IsNotEmpty()\n  image: string[];\n  \n  @IsNotEmpty()\n  license: string[];\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/propsSearchDto-1.html":{"url":"classes/propsSearchDto-1.html","title":"class - propsSearchDto-1","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  propsSearchDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/dorm/dorm.validation.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                aircond\n                            \n                            \n                                bathroom\n                            \n                            \n                                bedroom\n                            \n                            \n                                convenienceStore\n                            \n                            \n                                cooking\n                            \n                            \n                                distance\n                            \n                            \n                                dormName\n                            \n                            \n                                dormType\n                            \n                            \n                                fitness\n                            \n                            \n                                gender\n                            \n                            \n                                internet\n                            \n                            \n                                kitchen\n                            \n                            \n                                kuy\n                            \n                            \n                                laundry\n                            \n                            \n                                maxperson\n                            \n                            \n                                parking\n                            \n                            \n                                pet\n                            \n                            \n                                pool\n                            \n                            \n                                price\n                            \n                            \n                                rating\n                            \n                            \n                                smoking\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            aircond\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                        \n                            \n                                    Defined in src/dorm/dorm.validation.ts:15\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            bathroom\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                        \n                            \n                                    Defined in src/dorm/dorm.validation.ts:16\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            bedroom\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                        \n                            \n                                    Defined in src/dorm/dorm.validation.ts:17\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            convenienceStore\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                        \n                            \n                                    Defined in src/dorm/dorm.validation.ts:21\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            cooking\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                        \n                            \n                                    Defined in src/dorm/dorm.validation.ts:29\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            distance\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                        \n                            \n                                    Defined in src/dorm/dorm.validation.ts:6\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            dormName\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                        \n                            \n                                    Defined in src/dorm/dorm.validation.ts:5\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            dormType\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                        \n                            \n                                    Defined in src/dorm/dorm.validation.ts:12\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            fitness\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                        \n                            \n                                    Defined in src/dorm/dorm.validation.ts:27\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            gender\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                        \n                            \n                                    Defined in src/dorm/dorm.validation.ts:8\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            internet\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                        \n                            \n                                    Defined in src/dorm/dorm.validation.ts:25\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            kitchen\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                        \n                            \n                                    Defined in src/dorm/dorm.validation.ts:14\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            kuy\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                        \n                            \n                                    Defined in src/dorm/dorm.validation.ts:30\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            laundry\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                        \n                            \n                                    Defined in src/dorm/dorm.validation.ts:22\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            maxperson\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                        \n                            \n                                    Defined in src/dorm/dorm.validation.ts:11\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            parking\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                        \n                            \n                                    Defined in src/dorm/dorm.validation.ts:23\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            pet\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                        \n                            \n                                    Defined in src/dorm/dorm.validation.ts:24\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            pool\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                        \n                            \n                                    Defined in src/dorm/dorm.validation.ts:28\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            price\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                        \n                            \n                                    Defined in src/dorm/dorm.validation.ts:10\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            rating\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                        \n                            \n                                    Defined in src/dorm/dorm.validation.ts:7\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            smoking\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                        \n                            \n                                    Defined in src/dorm/dorm.validation.ts:26\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {} from 'class-validator';\n\nexport class propsSearchDto {\n  //dorm\n  dormName: string;\n  distance: number; // address.coord - kaset.coord\n  rating: number;\n  gender: string;\n  //room\n  price: number;\n  maxperson: number;\n  dormType: string;\n  //room2\n  kitchen:  number; //true = 0, false = 999999999999999999\n  aircond:  number; //true = 0, false = 999999999999999999\n  bathroom: number; //true = 0, false = 999999999999999999\n  bedroom:  number; //true = 0, false = 999999999999999999\n\n  //util\n  // in utility.type\n  convenienceStore: string; //true = convenienceStore, false = '' \n  laundry: string; // true = laundry, false = ''\n  parking: string;\n  pet: string;\n  internet: string;\n  smoking: string;\n  fitness: string;\n  pool: string;\n  cooking: string;\n  kuy : string;\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/reviewCodeDto.html":{"url":"classes/reviewCodeDto.html","title":"class - reviewCodeDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  reviewCodeDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/review/review.validation.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                reviewCode\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            reviewCode\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsString()@IsNotEmpty()@ApiProperty()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/review/review.validation.ts:9\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsNotEmpty, IsArray, IsInt, IsString, ValidateIf, IsNumberString, IsNumber } from 'class-validator';\nimport {ApiProperty} from '@nestjs/swagger';\n\n\nexport class reviewCodeDto {\n  @IsString()\n  @IsNotEmpty()\n  @ApiProperty()\n  reviewCode: string;\n}\n\nexport class ReviewBodyDto {\n  @IsNotEmpty()\n  @ApiProperty()\n  dorm: any;\n\n  @IsNotEmpty()\n  @ApiProperty()\n  user: any;\n\n  @IsNotEmpty()\n  @IsInt()\n  @ApiProperty()\n  star: number;\n\n  @IsNotEmpty()\n  @IsString()\n  @ApiProperty()\n  comment: string;\n\n  @IsNotEmpty()\n  @IsArray()\n  @ApiProperty()\n  image: [string];\n}\n\nexport class ReviewParamDto {\n  @IsNotEmpty()\n  @IsString()\n  @ApiProperty()\n  reviewId: string\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/typealiases.html":{"url":"miscellaneous/typealiases.html","title":"miscellaneous-typealiases - typealiases","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n  Miscellaneous\n  Type aliases\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            UserDocument   (src/.../users.schemas.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/users/schemas/users.schemas.ts\n    \n    \n        \n            \n                \n                    \n                    UserDocument\n                \n            \n            \n                \n                        \n\n                \n            \n        \n    \n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/variables.html":{"url":"miscellaneous/variables.html","title":"miscellaneous-variables - variables","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n  Miscellaneous\n  Variables\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            allowedUsertype   (src/.../create-user.dto.ts)\n                        \n                        \n                            bcrypt   (src/.../auth.service.ts)\n                        \n                        \n                            bcrypt   (src/.../users.service.ts)\n                        \n                        \n                            contactSchema   (src/.../dorm.model.ts)\n                        \n                        \n                            DormSchema   (src/.../dorm.model.ts)\n                        \n                        \n                            editFileName   (src/.../file-upload.utils.ts)\n                        \n                        \n                            imageFileFilter   (src/.../file-upload.utils.ts)\n                        \n                        \n                            jwtConstants   (src/.../constants.ts)\n                        \n                        \n                            LobbySchema   (src/.../lobby.model.ts)\n                        \n                        \n                            PendingActionSchema   (src/.../admin.model.ts)\n                        \n                        \n                            ReviewSchema   (src/.../review.model.ts)\n                        \n                        \n                            Role   (src/.../role.decorator.ts)\n                        \n                        \n                            RoomSchema   (src/.../dorm.model.ts)\n                        \n                        \n                            sex   (src/.../create-user.dto.ts)\n                        \n                        \n                            UserSchema   (src/.../users.schemas.ts)\n                        \n                        \n                            utilSchema   (src/.../dorm.model.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/users/dto/create-user.dto.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            allowedUsertype\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     string[]\n\n                        \n                    \n                    \n                        \n                            Default value : ['general', 'owner']\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            sex\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     string[]\n\n                        \n                    \n                    \n                        \n                            Default value : ['male', 'female']\n                        \n                    \n\n\n            \n        \n\n    src/auth/auth.service.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            bcrypt\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : require('bcryptjs')\n                        \n                    \n\n\n            \n        \n\n    src/users/users.service.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            bcrypt\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : require('bcryptjs')\n                        \n                    \n\n\n            \n        \n\n    src/dorm/dorm.model.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            contactSchema\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : new mongoose.Schema({\n  telephone: { type: String },\n  email: { type: String },\n  lineID: { type: String },\n  website: { type: String },\n})\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            DormSchema\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : new mongoose.Schema({\n  name: { type: String },\n  code: { type: String },\n  owner: { }, //{ type: mongoose.Schema.Types.ObjectId, ref: 'User' },\n  contact: contactSchema,\n  address: {\n    address: { type: String },\n    coordinate: {\n      type: [Number],\n    },\n  },\n  utility: [utilSchema],\n  type: { type: String },\n  description: { type: String },\n  room: [RoomSchema],\n  allowedSex: { type: String },\n  avgStar: { type: Number },\n  image: {type:[String]},\n  license: { type: [String] },\n  createdOn: { type: Date },\n  modifiedOn: { type: Date },\n  approved: {\n    type: String,\n    enum: ['approved', 'disapproved', 'pending'],\n    index: true,\n    default: 'pending',\n  },\n  approvedOn: { type: Date },\n})\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            RoomSchema\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : new mongoose.Schema({\n  name: { type: String },\n  capacity: { type: Number },\n  image: { type: [String] },\n  bathroom: { type: Number },\n  aircond: { type: Number },\n  kitchen: { type: Number },\n  bedroom: { type: Number },\n  description: { type: String },\n  price: {\n    amount: { type: Number },\n    pricePer: { type: Number },\n  },\n  allowedSex: { type: String, enum: ['any', 'male', 'female'] },\n})\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            utilSchema\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : new mongoose.Schema({\n  type: { type: String },\n  distance: { type: Number },\n  description: { type: String },\n})\n                        \n                    \n\n\n            \n        \n\n    src/file-upload.utils.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            editFileName\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : (req, file, callback) => {\n    const name = file.originalname.split('.')[0];\n    const fileExtName = path.extname(file.originalname);\n    const randomName = Array(4)\n      .fill(null)\n      .map(() => Math.round(Math.random() * 16).toString(16))\n      .join('');\n    callback(null, `${name}-${randomName}${fileExtName}`);\n  }\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            imageFileFilter\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : (req, file, callback) => {\n    if (!file.originalname.match(/\\.(jpg|jpeg|png|gif)$/)) {\n      return callback(new Error('Only image files are allowed!'), false);\n    }\n    callback(null, true);\n  }\n                        \n                    \n\n\n            \n        \n\n    src/auth/constants.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            jwtConstants\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         object\n\n                        \n                    \n                    \n                        \n                            Default value : {\n\tsecret: 'SecretKey',\n\trefreshSecret: 'refreshSecret'\n}\n                        \n                    \n\n\n            \n        \n\n    src/lobby/lobby.model.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            LobbySchema\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : new mongoose.Schema({\n  expireOn: { type: Date },\n  dorm: DormSchema,\n  owner: {},\n  code: { type: String },\n  member: { type: [{ user: {}, ready: Boolean }] },\n  blackList: { type: [{ user: {}, message: String }] },\n  maxMember: { type: Number },\n  createdOn: { type: Date },\n  modifiedOn: { type: Date },\n  chat: { type: [{ user: {}, message: String, time: Date }] },\n})\n                        \n                    \n\n\n            \n        \n\n    src/admin/admin.model.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            PendingActionSchema\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : new mongoose.Schema({\n  type: { type: String },\n  target: {},\n  newdata: {},\n  createdOn: { type: Date },\n  createdBy: {\n    userId: { type: String },\n    name: {\n      firstname: { type: String },\n      lastname: { type: String },\n    },\n    profilePic: { type: String },\n  },\n  status: { type: String },\n})\n                        \n                    \n\n\n            \n        \n\n    src/review/review.model.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            ReviewSchema\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : new mongoose.Schema({\n  reviewId: { type: String },\n  dorm: DormSchema,\n  user: {\n    userId: { type: String },\n  },\n  star: { type: Number },\n  comment: { type: String },\n  image: { type: [String] },\n  createdOn: { type: Date },\n})\n                        \n                    \n\n\n            \n        \n\n    src/auth/decorator/role.decorator.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            Role\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : ( role: string ) => SetMetadata('role', role)\n                        \n                    \n\n\n            \n        \n\n    src/users/schemas/users.schemas.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            UserSchema\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : SchemaFactory.createForClass(User)\n                        \n                    \n\n\n            \n        \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
